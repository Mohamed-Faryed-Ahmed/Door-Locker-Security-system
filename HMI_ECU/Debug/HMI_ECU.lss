
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000394c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000190  00800060  0000394c  000039e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008001f0  008001f0  00003b70  2**0
                  ALLOC
  3 .stab         00003690  00000000  00000000  00003b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a7a  00000000  00000000  00007200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b417  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c79d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d974  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000db34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000de2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3f       	cpi	r26, 0xFD	; 253
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <main>
      8a:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ed       	ldi	r26, 0xD8	; 216
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 ed       	ldi	r24, 0xD8	; 216
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 ed       	ldi	r22, 0xD8	; 216
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 52       	subi	r30, 0x20	; 32
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_11>:
/*******************************************************************************
*                      ISR Definitions                                  *
*******************************************************************************/
#if(UART_INT_RX == 1)
ISR(USART_RXC_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	8f 93       	push	r24
     e3a:	ef 93       	push	r30
     e3c:	ff 93       	push	r31
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
	Rx = 1;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 93 f1 01 	sts	0x01F1, r24
	g_valueRx = UDR ;
     e4c:	ec e2       	ldi	r30, 0x2C	; 44
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 93 f0 01 	sts	0x01F0, r24
}
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	ff 91       	pop	r31
     e5c:	ef 91       	pop	r30
     e5e:	8f 91       	pop	r24
     e60:	0f 90       	pop	r0
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	0f 90       	pop	r0
     e66:	1f 90       	pop	r1
     e68:	18 95       	reti

00000e6a <UART_init>:
* 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
* 2. Enable the UART.
* 3. Setup the UART baud rate.
*/
void UART_init(const UART_Init *s_confg_ptr)
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <UART_init+0x6>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <UART_init+0x8>
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     e7a:	1a 82       	std	Y+2, r1	; 0x02
     e7c:	19 82       	std	Y+1, r1	; 0x01

	/************************** UCSRA Description ***************************/
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     e7e:	eb e2       	ldi	r30, 0x2B	; 43
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
     e86:	ea e2       	ldi	r30, 0x2A	; 42
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	88 e1       	ldi	r24, 0x18	; 24
     e8c:	80 83       	st	Z, r24
	/************************** *s_baudRate_ptr Description **************************
	* udrie : Disable/Enable USART Data Register Empty Interrupt
	* rxcie : USART RX Complete Interrupt Enable/Disable
	*********************************************************************************/
	UCSRB= (UCSRB & 0x7f)|((s_confg_ptr->rxcie)<<RXCIE);
     e8e:	aa e2       	ldi	r26, 0x2A	; 42
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	ea e2       	ldi	r30, 0x2A	; 42
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	28 2f       	mov	r18, r24
     e9a:	2f 77       	andi	r18, 0x7F	; 127
     e9c:	eb 81       	ldd	r30, Y+3	; 0x03
     e9e:	fc 81       	ldd	r31, Y+4	; 0x04
     ea0:	84 81       	ldd	r24, Z+4	; 0x04
     ea2:	82 95       	swap	r24
     ea4:	8f 70       	andi	r24, 0x0F	; 15
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	88 2f       	mov	r24, r24
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	96 95       	lsr	r25
     eae:	98 2f       	mov	r25, r24
     eb0:	88 27       	eor	r24, r24
     eb2:	97 95       	ror	r25
     eb4:	87 95       	ror	r24
     eb6:	82 2b       	or	r24, r18
     eb8:	8c 93       	st	X, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
     eba:	e0 e4       	ldi	r30, 0x40	; 64
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 e8       	ldi	r24, 0x80	; 128
     ec0:	80 83       	st	Z, r24
	* baud_rate  : baud_rate Value
	* usbs       : number of stop bit
	* upm        : parity bit
	* UCSZ1:0    : For 8/7/6/5 -bit data mode
	*********************************************************************************/
	UCSRC = (UCSRC & 0xc1) | ((s_confg_ptr->upm)<<UPM0)\
     ec2:	a0 e4       	ldi	r26, 0x40	; 64
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e0 e4       	ldi	r30, 0x40	; 64
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	28 2f       	mov	r18, r24
     ece:	21 7c       	andi	r18, 0xC1	; 193
     ed0:	eb 81       	ldd	r30, Y+3	; 0x03
     ed2:	fc 81       	ldd	r31, Y+4	; 0x04
     ed4:	84 81       	ldd	r24, Z+4	; 0x04
     ed6:	83 70       	andi	r24, 0x03	; 3
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	82 95       	swap	r24
     ede:	92 95       	swap	r25
     ee0:	90 7f       	andi	r25, 0xF0	; 240
     ee2:	98 27       	eor	r25, r24
     ee4:	80 7f       	andi	r24, 0xF0	; 240
     ee6:	98 27       	eor	r25, r24
     ee8:	28 2b       	or	r18, r24
     eea:	eb 81       	ldd	r30, Y+3	; 0x03
     eec:	fc 81       	ldd	r31, Y+4	; 0x04
     eee:	84 81       	ldd	r24, Z+4	; 0x04
     ef0:	82 95       	swap	r24
     ef2:	86 95       	lsr	r24
     ef4:	87 70       	andi	r24, 0x07	; 7
     ef6:	81 70       	andi	r24, 0x01	; 1
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	28 2b       	or	r18, r24
     f0a:	eb 81       	ldd	r30, Y+3	; 0x03
     f0c:	fc 81       	ldd	r31, Y+4	; 0x04
     f0e:	84 81       	ldd	r24, Z+4	; 0x04
     f10:	86 95       	lsr	r24
     f12:	86 95       	lsr	r24
     f14:	83 70       	andi	r24, 0x03	; 3
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	82 2b       	or	r24, r18
     f20:	8c 93       	st	X, r24
			| ((s_confg_ptr->usbs)<<USBS) | ((s_confg_ptr->ucsz)<<UCSZ0);
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((s_confg_ptr->baud_rate) * 8UL))) - 1);
     f22:	eb 81       	ldd	r30, Y+3	; 0x03
     f24:	fc 81       	ldd	r31, Y+4	; 0x04
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01
     f2a:	a2 81       	ldd	r26, Z+2	; 0x02
     f2c:	b3 81       	ldd	r27, Z+3	; 0x03
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	aa 1f       	adc	r26, r26
     f34:	bb 1f       	adc	r27, r27
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	aa 1f       	adc	r26, r26
     f3c:	bb 1f       	adc	r27, r27
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	aa 1f       	adc	r26, r26
     f44:	bb 1f       	adc	r27, r27
     f46:	9c 01       	movw	r18, r24
     f48:	ad 01       	movw	r20, r26
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	92 e1       	ldi	r25, 0x12	; 18
     f4e:	aa e7       	ldi	r26, 0x7A	; 122
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	bc 01       	movw	r22, r24
     f54:	cd 01       	movw	r24, r26
     f56:	0e 94 06 1c 	call	0x380c	; 0x380c <__udivmodsi4>
     f5a:	da 01       	movw	r26, r20
     f5c:	c9 01       	movw	r24, r18
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     f64:	e0 e4       	ldi	r30, 0x40	; 64
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	89 2f       	mov	r24, r25
     f6e:	99 27       	eor	r25, r25
     f70:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     f72:	e9 e2       	ldi	r30, 0x29	; 41
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	80 83       	st	Z, r24
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <UART_sendByte>:
/*
* Description :
* Functional responsible for send byte to another UART device.
*/
void UART_sendByte(const uint8 data)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     f94:	eb e2       	ldi	r30, 0x2B	; 43
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	80 72       	andi	r24, 0x20	; 32
     fa0:	90 70       	andi	r25, 0x00	; 0
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	b9 f3       	breq	.-18     	; 0xf94 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     fa6:	ec e2       	ldi	r30, 0x2C	; 44
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     fae:	0f 90       	pop	r0
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <UART_recieveByte>:
/*
* Description :
* Functional responsible for receive byte from another UART device by interrupt.
*/
uint8 UART_recieveByte(void)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
	while(Rx == 0){}
     fbe:	80 91 f1 01 	lds	r24, 0x01F1
     fc2:	88 23       	and	r24, r24
     fc4:	e1 f3       	breq	.-8      	; 0xfbe <UART_recieveByte+0x8>
	Rx=0;
     fc6:	10 92 f1 01 	sts	0x01F1, r1
	return g_valueRx;
     fca:	80 91 f0 01 	lds	r24, 0x01F0
}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <UART_sendString>:
/*
* Description :
* Send the required string through UART to the other UART device.
*/
void UART_sendString(const uint8 *Str)
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	00 d0       	rcall	.+0      	; 0xfda <UART_sendString+0x6>
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	9b 83       	std	Y+3, r25	; 0x03
     fe2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	0e c0       	rjmp	.+28     	; 0x1004 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	9b 81       	ldd	r25, Y+3	; 0x03
     ff2:	fc 01       	movw	r30, r24
     ff4:	e2 0f       	add	r30, r18
     ff6:	f3 1f       	adc	r31, r19
     ff8:	80 81       	ld	r24, Z
     ffa:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>
		i++;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	8f 5f       	subi	r24, 0xFF	; 255
    1002:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	9b 81       	ldd	r25, Y+3	; 0x03
    100e:	fc 01       	movw	r30, r24
    1010:	e2 0f       	add	r30, r18
    1012:	f3 1f       	adc	r31, r19
    1014:	80 81       	ld	r24, Z
    1016:	88 23       	and	r24, r24
    1018:	39 f7       	brne	.-50     	; 0xfe8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <UART_receiveString>:
/*
* Description :
* Receive the required string until the '#' symbol through UART from the other UART device.
*/
void UART_receiveString(uint8 *Str)
{
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <UART_receiveString+0xa>
    1030:	0f 92       	push	r0
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	9b 83       	std	Y+3, r25	; 0x03
    1038:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    103a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	9b 81       	ldd	r25, Y+3	; 0x03
    1046:	8c 01       	movw	r16, r24
    1048:	02 0f       	add	r16, r18
    104a:	13 1f       	adc	r17, r19
    104c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_recieveByte>
    1050:	f8 01       	movw	r30, r16
    1052:	80 83       	st	Z, r24
    1054:	0f c0       	rjmp	.+30     	; 0x1074 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	8f 5f       	subi	r24, 0xFF	; 255
    105a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	9b 81       	ldd	r25, Y+3	; 0x03
    1066:	8c 01       	movw	r16, r24
    1068:	02 0f       	add	r16, r18
    106a:	13 1f       	adc	r17, r19
    106c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_recieveByte>
    1070:	f8 01       	movw	r30, r16
    1072:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	9b 81       	ldd	r25, Y+3	; 0x03
    107e:	fc 01       	movw	r30, r24
    1080:	e2 0f       	add	r30, r18
    1082:	f3 1f       	adc	r31, r19
    1084:	80 81       	ld	r24, Z
    1086:	83 32       	cpi	r24, 0x23	; 35
    1088:	31 f7       	brne	.-52     	; 0x1056 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	9b 81       	ldd	r25, Y+3	; 0x03
    1094:	fc 01       	movw	r30, r24
    1096:	e2 0f       	add	r30, r18
    1098:	f3 1f       	adc	r31, r19
    109a:	10 82       	st	Z, r1
}
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	08 95       	ret

000010ac <__vector_19>:
 *                      ISR Definition                                         *
 *******************************************************************************/

/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
    10ac:	1f 92       	push	r1
    10ae:	0f 92       	push	r0
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	0f 92       	push	r0
    10b4:	11 24       	eor	r1, r1
    10b6:	2f 93       	push	r18
    10b8:	3f 93       	push	r19
    10ba:	4f 93       	push	r20
    10bc:	5f 93       	push	r21
    10be:	6f 93       	push	r22
    10c0:	7f 93       	push	r23
    10c2:	8f 93       	push	r24
    10c4:	9f 93       	push	r25
    10c6:	af 93       	push	r26
    10c8:	bf 93       	push	r27
    10ca:	ef 93       	push	r30
    10cc:	ff 93       	push	r31
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_callBack != NULL_PTR)
    10d6:	80 91 f4 01 	lds	r24, 0x01F4
    10da:	90 91 f5 01 	lds	r25, 0x01F5
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	41 f0       	breq	.+16     	; 0x10f2 <__vector_19+0x46>
	{
		TCNT0 = 0;
    10e2:	e2 e5       	ldi	r30, 0x52	; 82
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	10 82       	st	Z, r1
		(*TIMER0_callBack)();
    10e8:	e0 91 f4 01 	lds	r30, 0x01F4
    10ec:	f0 91 f5 01 	lds	r31, 0x01F5
    10f0:	09 95       	icall
	}
}
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	ff 91       	pop	r31
    10f8:	ef 91       	pop	r30
    10fa:	bf 91       	pop	r27
    10fc:	af 91       	pop	r26
    10fe:	9f 91       	pop	r25
    1100:	8f 91       	pop	r24
    1102:	7f 91       	pop	r23
    1104:	6f 91       	pop	r22
    1106:	5f 91       	pop	r21
    1108:	4f 91       	pop	r20
    110a:	3f 91       	pop	r19
    110c:	2f 91       	pop	r18
    110e:	0f 90       	pop	r0
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	0f 90       	pop	r0
    1114:	1f 90       	pop	r1
    1116:	18 95       	reti

00001118 <__vector_9>:


/* Interrupt Service Routine for timer0 Normal mode */
ISR(TIMER0_OVF_vect)
{
    1118:	1f 92       	push	r1
    111a:	0f 92       	push	r0
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	0f 92       	push	r0
    1120:	11 24       	eor	r1, r1
    1122:	2f 93       	push	r18
    1124:	3f 93       	push	r19
    1126:	4f 93       	push	r20
    1128:	5f 93       	push	r21
    112a:	6f 93       	push	r22
    112c:	7f 93       	push	r23
    112e:	8f 93       	push	r24
    1130:	9f 93       	push	r25
    1132:	af 93       	push	r26
    1134:	bf 93       	push	r27
    1136:	ef 93       	push	r30
    1138:	ff 93       	push	r31
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_callBack != NULL_PTR)
    1142:	80 91 f4 01 	lds	r24, 0x01F4
    1146:	90 91 f5 01 	lds	r25, 0x01F5
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	61 f0       	breq	.+24     	; 0x1166 <__vector_9+0x4e>
	{
		TCNT0 = (uint8)timer0_re_count;
    114e:	e2 e5       	ldi	r30, 0x52	; 82
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 91 f2 01 	lds	r24, 0x01F2
    1156:	90 91 f3 01 	lds	r25, 0x01F3
    115a:	80 83       	st	Z, r24
		(*TIMER0_callBack)();
    115c:	e0 91 f4 01 	lds	r30, 0x01F4
    1160:	f0 91 f5 01 	lds	r31, 0x01F5
    1164:	09 95       	icall
	}
}
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	ff 91       	pop	r31
    116c:	ef 91       	pop	r30
    116e:	bf 91       	pop	r27
    1170:	af 91       	pop	r26
    1172:	9f 91       	pop	r25
    1174:	8f 91       	pop	r24
    1176:	7f 91       	pop	r23
    1178:	6f 91       	pop	r22
    117a:	5f 91       	pop	r21
    117c:	4f 91       	pop	r20
    117e:	3f 91       	pop	r19
    1180:	2f 91       	pop	r18
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	0f 90       	pop	r0
    1188:	1f 90       	pop	r1
    118a:	18 95       	reti

0000118c <TIMER_comparInit>:
/*******************************************************************************
 *                      Functions Definition                                   *
 *******************************************************************************/
void TIMER_comparInit(TIMER_Config *s_config_ptr,void (*callBack)(void))
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <TIMER_comparInit+0x6>
    1192:	00 d0       	rcall	.+0      	; 0x1194 <TIMER_comparInit+0x8>
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	9a 83       	std	Y+2, r25	; 0x02
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	7c 83       	std	Y+4, r23	; 0x04
    119e:	6b 83       	std	Y+3, r22	; 0x03
	if((s_config_ptr->timer_x)==T0)
    11a0:	e9 81       	ldd	r30, Y+1	; 0x01
    11a2:	fa 81       	ldd	r31, Y+2	; 0x02
    11a4:	84 81       	ldd	r24, Z+4	; 0x04
    11a6:	88 73       	andi	r24, 0x38	; 56
    11a8:	88 23       	and	r24, r24
    11aa:	09 f0       	breq	.+2      	; 0x11ae <TIMER_comparInit+0x22>
    11ac:	41 c0       	rjmp	.+130    	; 0x1230 <TIMER_comparInit+0xa4>
	{
		TCNT0 = 0;                                   /* Set Timer initial value to 0*/
    11ae:	e2 e5       	ldi	r30, 0x52	; 82
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	10 82       	st	Z, r1
		OCR0  = (uint8)s_config_ptr->timer_compare;  /* Set Compare Value*/
    11b4:	ac e5       	ldi	r26, 0x5C	; 92
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ba:	fa 81       	ldd	r31, Y+2	; 0x02
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	8c 93       	st	X, r24
		TIMSK = (TIMSK & 0xfc) | (1<<OCIE0);         /* Enable Timer0 Compare Interrupt*/
    11c2:	a9 e5       	ldi	r26, 0x59	; 89
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e9 e5       	ldi	r30, 0x59	; 89
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8c 7f       	andi	r24, 0xFC	; 252
    11ce:	82 60       	ori	r24, 0x02	; 2
    11d0:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. s_config_ptr->ocx     : status of OC0
		 * 4. s_config_ptr->pre     : clock = F_CPU / prescaler
		 */
		TCCR0 = (1<<FOC0) | (1<<WGM01) | ((s_config_ptr->ocx)<<COM00) | ((s_config_ptr->pre_timer)<<CS00);
    11d2:	a3 e5       	ldi	r26, 0x53	; 83
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e9 81       	ldd	r30, Y+1	; 0x01
    11d8:	fa 81       	ldd	r31, Y+2	; 0x02
    11da:	84 81       	ldd	r24, Z+4	; 0x04
    11dc:	82 95       	swap	r24
    11de:	86 95       	lsr	r24
    11e0:	86 95       	lsr	r24
    11e2:	83 70       	andi	r24, 0x03	; 3
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	82 95       	swap	r24
    11ea:	92 95       	swap	r25
    11ec:	90 7f       	andi	r25, 0xF0	; 240
    11ee:	98 27       	eor	r25, r24
    11f0:	80 7f       	andi	r24, 0xF0	; 240
    11f2:	98 27       	eor	r25, r24
    11f4:	98 2f       	mov	r25, r24
    11f6:	98 68       	ori	r25, 0x88	; 136
    11f8:	e9 81       	ldd	r30, Y+1	; 0x01
    11fa:	fa 81       	ldd	r31, Y+2	; 0x02
    11fc:	84 81       	ldd	r24, Z+4	; 0x04
    11fe:	87 70       	andi	r24, 0x07	; 7
    1200:	89 2b       	or	r24, r25
    1202:	8c 93       	st	X, r24
		TIMER0_callBack= callBack;
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	90 93 f5 01 	sts	0x01F5, r25
    120c:	80 93 f4 01 	sts	0x01F4, r24

		if((s_config_ptr->ocx) != DISCONECT)
    1210:	e9 81       	ldd	r30, Y+1	; 0x01
    1212:	fa 81       	ldd	r31, Y+2	; 0x02
    1214:	84 81       	ldd	r24, Z+4	; 0x04
    1216:	80 7c       	andi	r24, 0xC0	; 192
    1218:	88 23       	and	r24, r24
    121a:	51 f0       	breq	.+20     	; 0x1230 <TIMER_comparInit+0xa4>
		{
			GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	63 e0       	ldi	r22, 0x03	; 3
    1220:	41 e0       	ldi	r20, 0x01	; 1
    1222:	0e 94 07 0b 	call	0x160e	; 0x160e <GPIO_setupPinDirection>
			GPIO_writePin(PORTB_ID,PIN3_ID,LOGIC_LOW);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	63 e0       	ldi	r22, 0x03	; 3
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GPIO_writePin>
		}
	}
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <TIMER_NormalInit>:



void TIMER_NormalInit(TIMER_Config *s_config_ptr,void (*callBack)(void))
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <TIMER_NormalInit+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <TIMER_NormalInit+0x8>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	7c 83       	std	Y+4, r23	; 0x04
    1250:	6b 83       	std	Y+3, r22	; 0x03
	if((s_config_ptr->timer_x)==T0)
    1252:	e9 81       	ldd	r30, Y+1	; 0x01
    1254:	fa 81       	ldd	r31, Y+2	; 0x02
    1256:	84 81       	ldd	r24, Z+4	; 0x04
    1258:	88 73       	andi	r24, 0x38	; 56
    125a:	88 23       	and	r24, r24
    125c:	39 f5       	brne	.+78     	; 0x12ac <TIMER_NormalInit+0x6e>
	{
		timer0_re_count=(uint8)s_config_ptr->timer_init;
    125e:	e9 81       	ldd	r30, Y+1	; 0x01
    1260:	fa 81       	ldd	r31, Y+2	; 0x02
    1262:	80 81       	ld	r24, Z
    1264:	91 81       	ldd	r25, Z+1	; 0x01
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	90 93 f3 01 	sts	0x01F3, r25
    126e:	80 93 f2 01 	sts	0x01F2, r24
		TCNT0 = (uint8)timer0_re_count;              /* Set Timer initial value */
    1272:	e2 e5       	ldi	r30, 0x52	; 82
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 91 f2 01 	lds	r24, 0x01F2
    127a:	90 91 f3 01 	lds	r25, 0x01F3
    127e:	80 83       	st	Z, r24
		TIMSK = (TIMSK & 0xfc) | (1<<TOIE0);         /* Enable Timer0 Overflow Interrupt*/
    1280:	a9 e5       	ldi	r26, 0x59	; 89
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e9 e5       	ldi	r30, 0x59	; 89
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8c 7f       	andi	r24, 0xFC	; 252
    128c:	81 60       	ori	r24, 0x01	; 1
    128e:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. s_config_ptr->ocx     : status of OC0
		 * 4. s_config_ptr->pre     : clock = F_CPU / prescaler
		 */
		TCCR0 = (1<<FOC0) | ((s_config_ptr->pre_timer)<<CS00);
    1290:	a3 e5       	ldi	r26, 0x53	; 83
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e9 81       	ldd	r30, Y+1	; 0x01
    1296:	fa 81       	ldd	r31, Y+2	; 0x02
    1298:	84 81       	ldd	r24, Z+4	; 0x04
    129a:	87 70       	andi	r24, 0x07	; 7
    129c:	80 68       	ori	r24, 0x80	; 128
    129e:	8c 93       	st	X, r24
		TIMER0_callBack= callBack;
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	90 93 f5 01 	sts	0x01F5, r25
    12a8:	80 93 f4 01 	sts	0x01F4, r24
	}
}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <COUNTER_comparInit>:

void COUNTER_comparInit(COUNTER_Config *s_config_ptr,void (*callBack)(void))
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <COUNTER_comparInit+0x6>
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <COUNTER_comparInit+0x8>
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	9a 83       	std	Y+2, r25	; 0x02
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	7c 83       	std	Y+4, r23	; 0x04
    12cc:	6b 83       	std	Y+3, r22	; 0x03
	if((s_config_ptr->counter_x)==C0)
    12ce:	e9 81       	ldd	r30, Y+1	; 0x01
    12d0:	fa 81       	ldd	r31, Y+2	; 0x02
    12d2:	84 81       	ldd	r24, Z+4	; 0x04
    12d4:	88 73       	andi	r24, 0x38	; 56
    12d6:	88 23       	and	r24, r24
    12d8:	09 f0       	breq	.+2      	; 0x12dc <COUNTER_comparInit+0x22>
    12da:	41 c0       	rjmp	.+130    	; 0x135e <COUNTER_comparInit+0xa4>
	{
		TCNT0 = 0;                                   /* Set Timer initial value to 0*/
    12dc:	e2 e5       	ldi	r30, 0x52	; 82
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	10 82       	st	Z, r1
		OCR0  = s_config_ptr->counter_compare;       /* Set Compare Value*/
    12e2:	ac e5       	ldi	r26, 0x5C	; 92
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e9 81       	ldd	r30, Y+1	; 0x01
    12e8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ea:	82 81       	ldd	r24, Z+2	; 0x02
    12ec:	93 81       	ldd	r25, Z+3	; 0x03
    12ee:	8c 93       	st	X, r24
		TIMSK = (TIMSK & 0xfc) | (1<<OCIE0);         /* Enable Timer0 Compare Interrupt*/
    12f0:	a9 e5       	ldi	r26, 0x59	; 89
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e9 e5       	ldi	r30, 0x59	; 89
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8c 7f       	andi	r24, 0xFC	; 252
    12fc:	82 60       	ori	r24, 0x02	; 2
    12fe:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. s_config_ptr->ocx        : status of OC0
		 * 4. s_config_ptr->edge_state : External clock
		 */
		TCCR0 = (1<<FOC0) | (1<<WGM01) | ((s_config_ptr->ocx)<<COM00) | ((s_config_ptr->edge_state)<<CS00);
    1300:	a3 e5       	ldi	r26, 0x53	; 83
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e9 81       	ldd	r30, Y+1	; 0x01
    1306:	fa 81       	ldd	r31, Y+2	; 0x02
    1308:	84 81       	ldd	r24, Z+4	; 0x04
    130a:	82 95       	swap	r24
    130c:	86 95       	lsr	r24
    130e:	86 95       	lsr	r24
    1310:	83 70       	andi	r24, 0x03	; 3
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	82 95       	swap	r24
    1318:	92 95       	swap	r25
    131a:	90 7f       	andi	r25, 0xF0	; 240
    131c:	98 27       	eor	r25, r24
    131e:	80 7f       	andi	r24, 0xF0	; 240
    1320:	98 27       	eor	r25, r24
    1322:	98 2f       	mov	r25, r24
    1324:	98 68       	ori	r25, 0x88	; 136
    1326:	e9 81       	ldd	r30, Y+1	; 0x01
    1328:	fa 81       	ldd	r31, Y+2	; 0x02
    132a:	84 81       	ldd	r24, Z+4	; 0x04
    132c:	87 70       	andi	r24, 0x07	; 7
    132e:	89 2b       	or	r24, r25
    1330:	8c 93       	st	X, r24
		TIMER0_callBack= callBack;
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	90 93 f5 01 	sts	0x01F5, r25
    133a:	80 93 f4 01 	sts	0x01F4, r24

		if((s_config_ptr->ocx) != DISCONECT)
    133e:	e9 81       	ldd	r30, Y+1	; 0x01
    1340:	fa 81       	ldd	r31, Y+2	; 0x02
    1342:	84 81       	ldd	r24, Z+4	; 0x04
    1344:	80 7c       	andi	r24, 0xC0	; 192
    1346:	88 23       	and	r24, r24
    1348:	51 f0       	breq	.+20     	; 0x135e <COUNTER_comparInit+0xa4>
		{
			GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	63 e0       	ldi	r22, 0x03	; 3
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	0e 94 07 0b 	call	0x160e	; 0x160e <GPIO_setupPinDirection>
			GPIO_writePin(PORTB_ID,PIN3_ID,LOGIC_LOW);
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	63 e0       	ldi	r22, 0x03	; 3
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GPIO_writePin>
		}
	}

}
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <COUNTER_NormalInit>:


void COUNTER_NormalInit(COUNTER_Config *s_config_ptr,void (*callBack)(void))
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <COUNTER_NormalInit+0x6>
    1372:	00 d0       	rcall	.+0      	; 0x1374 <COUNTER_NormalInit+0x8>
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	9a 83       	std	Y+2, r25	; 0x02
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	7c 83       	std	Y+4, r23	; 0x04
    137e:	6b 83       	std	Y+3, r22	; 0x03
/*********************************************************************************************************/
	if((s_config_ptr->counter_x)==C0)
    1380:	e9 81       	ldd	r30, Y+1	; 0x01
    1382:	fa 81       	ldd	r31, Y+2	; 0x02
    1384:	84 81       	ldd	r24, Z+4	; 0x04
    1386:	88 73       	andi	r24, 0x38	; 56
    1388:	88 23       	and	r24, r24
    138a:	39 f5       	brne	.+78     	; 0x13da <COUNTER_NormalInit+0x6e>
	{
		TCNT0 = (uint8)s_config_ptr->counter_init;   /* Set Timer initial value to 0*/
    138c:	a2 e5       	ldi	r26, 0x52	; 82
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e9 81       	ldd	r30, Y+1	; 0x01
    1392:	fa 81       	ldd	r31, Y+2	; 0x02
    1394:	80 81       	ld	r24, Z
    1396:	91 81       	ldd	r25, Z+1	; 0x01
    1398:	8c 93       	st	X, r24
		TIMSK = (TIMSK & 0xfc) | (1<<TOIE0);         /* Enable Timer0 Compare Interrupt*/
    139a:	a9 e5       	ldi	r26, 0x59	; 89
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e9 e5       	ldi	r30, 0x59	; 89
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	8c 7f       	andi	r24, 0xFC	; 252
    13a6:	81 60       	ori	r24, 0x01	; 1
    13a8:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=0 & WGM00=0
		 * 3. s_config_ptr->ocx        : status of OC0
		 * 4. s_config_ptr->edge_state : External clock
		 */
		TCCR0 = (1<<FOC0) | ((s_config_ptr->edge_state)<<CS00);
    13aa:	a3 e5       	ldi	r26, 0x53	; 83
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e9 81       	ldd	r30, Y+1	; 0x01
    13b0:	fa 81       	ldd	r31, Y+2	; 0x02
    13b2:	84 81       	ldd	r24, Z+4	; 0x04
    13b4:	87 70       	andi	r24, 0x07	; 7
    13b6:	80 68       	ori	r24, 0x80	; 128
    13b8:	8c 93       	st	X, r24
		timer0_re_count=(uint8)s_config_ptr->counter_init;
    13ba:	e9 81       	ldd	r30, Y+1	; 0x01
    13bc:	fa 81       	ldd	r31, Y+2	; 0x02
    13be:	80 81       	ld	r24, Z
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	90 93 f3 01 	sts	0x01F3, r25
    13ca:	80 93 f2 01 	sts	0x01F2, r24
		TIMER0_callBack= callBack;
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	90 93 f5 01 	sts	0x01F5, r25
    13d6:	80 93 f4 01 	sts	0x01F4, r24
	}
/*********************************************************************************************************/
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <PWM_init>:


void PWM_init(PWM_Config *s_config_ptr)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <PWM_init+0x6>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <PWM_init+0x8>
    13f0:	0f 92       	push	r0
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	9d 83       	std	Y+5, r25	; 0x05
    13f8:	8c 83       	std	Y+4, r24	; 0x04
/*********************************************************************************************************/
	if((s_config_ptr->pwm_x)==PWM0)
    13fa:	ec 81       	ldd	r30, Y+4	; 0x04
    13fc:	fd 81       	ldd	r31, Y+5	; 0x05
    13fe:	85 81       	ldd	r24, Z+5	; 0x05
    1400:	83 70       	andi	r24, 0x03	; 3
    1402:	88 23       	and	r24, r24
    1404:	09 f0       	breq	.+2      	; 0x1408 <PWM_init+0x20>
    1406:	fb c0       	rjmp	.+502    	; 0x15fe <PWM_init+0x216>
	{
		TCNT0 = 0;                                        /* Set Timer initial value to 0*/
    1408:	e2 e5       	ldi	r30, 0x52	; 82
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	10 82       	st	Z, r1
		uint8 com = 50;
    140e:	82 e3       	ldi	r24, 0x32	; 50
    1410:	8b 83       	std	Y+3, r24	; 0x03
		if((s_config_ptr->pwm_duty) >= 100)
    1412:	ec 81       	ldd	r30, Y+4	; 0x04
    1414:	fd 81       	ldd	r31, Y+5	; 0x05
    1416:	84 81       	ldd	r24, Z+4	; 0x04
    1418:	84 36       	cpi	r24, 0x64	; 100
    141a:	68 f1       	brcs	.+90     	; 0x1476 <PWM_init+0x8e>
		{
			s_config_ptr->pwm_duty=100;
    141c:	ec 81       	ldd	r30, Y+4	; 0x04
    141e:	fd 81       	ldd	r31, Y+5	; 0x05
    1420:	84 e6       	ldi	r24, 0x64	; 100
    1422:	84 83       	std	Z+4, r24	; 0x04
			com= (uint8)(((float)(s_config_ptr->pwm_duty)/100)*255);
    1424:	ec 81       	ldd	r30, Y+4	; 0x04
    1426:	fd 81       	ldd	r31, Y+5	; 0x05
    1428:	84 81       	ldd	r24, Z+4	; 0x04
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 e0       	ldi	r26, 0x00	; 0
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	48 ec       	ldi	r20, 0xC8	; 200
    1448:	52 e4       	ldi	r21, 0x42	; 66
    144a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	bc 01       	movw	r22, r24
    1454:	cd 01       	movw	r24, r26
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	4f e7       	ldi	r20, 0x7F	; 127
    145c:	53 e4       	ldi	r21, 0x43	; 67
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	28 c0       	rjmp	.+80     	; 0x14c6 <PWM_init+0xde>
		}
		else
		{
			com= (uint8)(((float)(s_config_ptr->pwm_duty)/100)*256);
    1476:	ec 81       	ldd	r30, Y+4	; 0x04
    1478:	fd 81       	ldd	r31, Y+5	; 0x05
    147a:	84 81       	ldd	r24, Z+4	; 0x04
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a0 e0       	ldi	r26, 0x00	; 0
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	bc 01       	movw	r22, r24
    1486:	cd 01       	movw	r24, r26
    1488:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	48 ec       	ldi	r20, 0xC8	; 200
    149a:	52 e4       	ldi	r21, 0x42	; 66
    149c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e8       	ldi	r20, 0x80	; 128
    14ae:	53 e4       	ldi	r21, 0x43	; 67
    14b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	8b 83       	std	Y+3, r24	; 0x03
		}
		OCR0  = com ;                                     /* Set Compare Value*/
    14c6:	ec e5       	ldi	r30, 0x5C	; 92
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	80 83       	st	Z, r24
		TIMSK = (TIMSK & 0xfc) ;                          /*disable Timer0 Interrupt*/
    14ce:	a9 e5       	ldi	r26, 0x59	; 89
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e9 e5       	ldi	r30, 0x59	; 89
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8c 7f       	andi	r24, 0xFC	; 252
    14da:	8c 93       	st	X, r24

		GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	63 e0       	ldi	r22, 0x03	; 3
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 07 0b 	call	0x160e	; 0x160e <GPIO_setupPinDirection>
		GPIO_writePin(PORTB_ID,PIN3_ID,LOGIC_LOW);
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	63 e0       	ldi	r22, 0x03	; 3
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GPIO_writePin>
		 * 2. PWM Mode WGM01=1 & WGM00=1
		 * 3. s_config_ptr->pwm_state :  inverting or non inverting
		 * 4. s_config_ptr->pwm_clk   :  timer frequancy
		 */

		uint16 pre = (uint16)((F_CPU)/((float)(s_config_ptr->pwm_clk)*256));
    14f0:	ec 81       	ldd	r30, Y+4	; 0x04
    14f2:	fd 81       	ldd	r31, Y+5	; 0x05
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	cc 01       	movw	r24, r24
    14fa:	a0 e0       	ldi	r26, 0x00	; 0
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e8       	ldi	r20, 0x80	; 128
    1514:	53 e4       	ldi	r21, 0x43	; 67
    1516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	9c 01       	movw	r18, r24
    1520:	ad 01       	movw	r20, r26
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	74 e2       	ldi	r23, 0x24	; 36
    1526:	84 ef       	ldi	r24, 0xF4	; 244
    1528:	9a e4       	ldi	r25, 0x4A	; 74
    152a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9a 83       	std	Y+2, r25	; 0x02
    1540:	89 83       	std	Y+1, r24	; 0x01
		if((pre > 0) && (pre <= 4))
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	51 f0       	breq	.+20     	; 0x155e <PWM_init+0x176>
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	85 30       	cpi	r24, 0x05	; 5
    1550:	91 05       	cpc	r25, r1
    1552:	28 f4       	brcc	.+10     	; 0x155e <PWM_init+0x176>
		{
			pre =1;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9a 83       	std	Y+2, r25	; 0x02
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	41 c0       	rjmp	.+130    	; 0x15e0 <PWM_init+0x1f8>
		}
		else if((pre > 4) && (pre <= 10))
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	85 30       	cpi	r24, 0x05	; 5
    1564:	91 05       	cpc	r25, r1
    1566:	50 f0       	brcs	.+20     	; 0x157c <PWM_init+0x194>
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	9a 81       	ldd	r25, Y+2	; 0x02
    156c:	8b 30       	cpi	r24, 0x0B	; 11
    156e:	91 05       	cpc	r25, r1
    1570:	28 f4       	brcc	.+10     	; 0x157c <PWM_init+0x194>
		{
			pre =2;
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	9a 83       	std	Y+2, r25	; 0x02
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	32 c0       	rjmp	.+100    	; 0x15e0 <PWM_init+0x1f8>
		}
		else if((pre > 10) && (pre <= 70))
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	8b 30       	cpi	r24, 0x0B	; 11
    1582:	91 05       	cpc	r25, r1
    1584:	50 f0       	brcs	.+20     	; 0x159a <PWM_init+0x1b2>
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	9a 81       	ldd	r25, Y+2	; 0x02
    158a:	87 34       	cpi	r24, 0x47	; 71
    158c:	91 05       	cpc	r25, r1
    158e:	28 f4       	brcc	.+10     	; 0x159a <PWM_init+0x1b2>
		{
			pre =3;
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	23 c0       	rjmp	.+70     	; 0x15e0 <PWM_init+0x1f8>
		}
		else if((pre > 70) && (pre <= 300))
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	9a 81       	ldd	r25, Y+2	; 0x02
    159e:	87 34       	cpi	r24, 0x47	; 71
    15a0:	91 05       	cpc	r25, r1
    15a2:	58 f0       	brcs	.+22     	; 0x15ba <PWM_init+0x1d2>
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	9a 81       	ldd	r25, Y+2	; 0x02
    15a8:	21 e0       	ldi	r18, 0x01	; 1
    15aa:	8d 32       	cpi	r24, 0x2D	; 45
    15ac:	92 07       	cpc	r25, r18
    15ae:	28 f4       	brcc	.+10     	; 0x15ba <PWM_init+0x1d2>
		{
			pre =4;
    15b0:	84 e0       	ldi	r24, 0x04	; 4
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	13 c0       	rjmp	.+38     	; 0x15e0 <PWM_init+0x1f8>
		}
		else if((pre > 300) && (pre <= 1024))
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	21 e0       	ldi	r18, 0x01	; 1
    15c0:	8d 32       	cpi	r24, 0x2D	; 45
    15c2:	92 07       	cpc	r25, r18
    15c4:	58 f0       	brcs	.+22     	; 0x15dc <PWM_init+0x1f4>
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	24 e0       	ldi	r18, 0x04	; 4
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	92 07       	cpc	r25, r18
    15d0:	28 f4       	brcc	.+10     	; 0x15dc <PWM_init+0x1f4>
		{
			pre =5;
    15d2:	85 e0       	ldi	r24, 0x05	; 5
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <PWM_init+0x1f8>
		}
		else
		{
			pre = 0;
    15dc:	1a 82       	std	Y+2, r1	; 0x02
    15de:	19 82       	std	Y+1, r1	; 0x01
		}

		TCCR0 = (1<<WGM00) | (1<<WGM01) | ((s_config_ptr->pwm_state)<<COM00) | ((pre)<<CS00);
    15e0:	a3 e5       	ldi	r26, 0x53	; 83
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	ec 81       	ldd	r30, Y+4	; 0x04
    15e6:	fd 81       	ldd	r31, Y+5	; 0x05
    15e8:	85 81       	ldd	r24, Z+5	; 0x05
    15ea:	86 95       	lsr	r24
    15ec:	86 95       	lsr	r24
    15ee:	83 70       	andi	r24, 0x03	; 3
    15f0:	98 2f       	mov	r25, r24
    15f2:	92 95       	swap	r25
    15f4:	90 7f       	andi	r25, 0xF0	; 240
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	89 2b       	or	r24, r25
    15fa:	88 64       	ori	r24, 0x48	; 72
    15fc:	8c 93       	st	X, r24
	}

/*********************************************************************************************************/

}
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <GPIO_setupPinDirection+0x6>
    1614:	00 d0       	rcall	.+0      	; 0x1616 <GPIO_setupPinDirection+0x8>
    1616:	0f 92       	push	r0
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	6a 83       	std	Y+2, r22	; 0x02
    1620:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	88 30       	cpi	r24, 0x08	; 8
    1626:	08 f0       	brcs	.+2      	; 0x162a <GPIO_setupPinDirection+0x1c>
    1628:	d5 c0       	rjmp	.+426    	; 0x17d4 <GPIO_setupPinDirection+0x1c6>
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	84 30       	cpi	r24, 0x04	; 4
    162e:	08 f0       	brcs	.+2      	; 0x1632 <GPIO_setupPinDirection+0x24>
    1630:	d1 c0       	rjmp	.+418    	; 0x17d4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	3d 83       	std	Y+5, r19	; 0x05
    163a:	2c 83       	std	Y+4, r18	; 0x04
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	91 05       	cpc	r25, r1
    1644:	09 f4       	brne	.+2      	; 0x1648 <GPIO_setupPinDirection+0x3a>
    1646:	43 c0       	rjmp	.+134    	; 0x16ce <GPIO_setupPinDirection+0xc0>
    1648:	2c 81       	ldd	r18, Y+4	; 0x04
    164a:	3d 81       	ldd	r19, Y+5	; 0x05
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	2c f4       	brge	.+10     	; 0x165c <GPIO_setupPinDirection+0x4e>
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	9d 81       	ldd	r25, Y+5	; 0x05
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	71 f0       	breq	.+28     	; 0x1676 <GPIO_setupPinDirection+0x68>
    165a:	bc c0       	rjmp	.+376    	; 0x17d4 <GPIO_setupPinDirection+0x1c6>
    165c:	2c 81       	ldd	r18, Y+4	; 0x04
    165e:	3d 81       	ldd	r19, Y+5	; 0x05
    1660:	22 30       	cpi	r18, 0x02	; 2
    1662:	31 05       	cpc	r19, r1
    1664:	09 f4       	brne	.+2      	; 0x1668 <GPIO_setupPinDirection+0x5a>
    1666:	5f c0       	rjmp	.+190    	; 0x1726 <GPIO_setupPinDirection+0x118>
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	9d 81       	ldd	r25, Y+5	; 0x05
    166c:	83 30       	cpi	r24, 0x03	; 3
    166e:	91 05       	cpc	r25, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <GPIO_setupPinDirection+0x66>
    1672:	85 c0       	rjmp	.+266    	; 0x177e <GPIO_setupPinDirection+0x170>
    1674:	af c0       	rjmp	.+350    	; 0x17d4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	a1 f4       	brne	.+40     	; 0x16a4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    167c:	aa e3       	ldi	r26, 0x3A	; 58
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	ea e3       	ldi	r30, 0x3A	; 58
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <GPIO_setupPinDirection+0x8c>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <GPIO_setupPinDirection+0x88>
    169e:	84 2b       	or	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	98 c0       	rjmp	.+304    	; 0x17d4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16a4:	aa e3       	ldi	r26, 0x3A	; 58
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	ea e3       	ldi	r30, 0x3A	; 58
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <GPIO_setupPinDirection+0xb4>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <GPIO_setupPinDirection+0xb0>
    16c6:	80 95       	com	r24
    16c8:	84 23       	and	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	83 c0       	rjmp	.+262    	; 0x17d4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	a1 f4       	brne	.+40     	; 0x16fc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16d4:	a7 e3       	ldi	r26, 0x37	; 55
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e7 e3       	ldi	r30, 0x37	; 55
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <GPIO_setupPinDirection+0xe4>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <GPIO_setupPinDirection+0xe0>
    16f6:	84 2b       	or	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	6c c0       	rjmp	.+216    	; 0x17d4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    16fc:	a7 e3       	ldi	r26, 0x37	; 55
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e7 e3       	ldi	r30, 0x37	; 55
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <GPIO_setupPinDirection+0x10c>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <GPIO_setupPinDirection+0x108>
    171e:	80 95       	com	r24
    1720:	84 23       	and	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	57 c0       	rjmp	.+174    	; 0x17d4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	a1 f4       	brne	.+40     	; 0x1754 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    172c:	a4 e3       	ldi	r26, 0x34	; 52
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e4 e3       	ldi	r30, 0x34	; 52
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <GPIO_setupPinDirection+0x13c>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <GPIO_setupPinDirection+0x138>
    174e:	84 2b       	or	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	40 c0       	rjmp	.+128    	; 0x17d4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1754:	a4 e3       	ldi	r26, 0x34	; 52
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e4 e3       	ldi	r30, 0x34	; 52
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <GPIO_setupPinDirection+0x164>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <GPIO_setupPinDirection+0x160>
    1776:	80 95       	com	r24
    1778:	84 23       	and	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	2b c0       	rjmp	.+86     	; 0x17d4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	a1 f4       	brne	.+40     	; 0x17ac <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1784:	a1 e3       	ldi	r26, 0x31	; 49
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e1 e3       	ldi	r30, 0x31	; 49
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	48 2f       	mov	r20, r24
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 2e       	mov	r0, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <GPIO_setupPinDirection+0x194>
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	0a 94       	dec	r0
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <GPIO_setupPinDirection+0x190>
    17a6:	84 2b       	or	r24, r20
    17a8:	8c 93       	st	X, r24
    17aa:	14 c0       	rjmp	.+40     	; 0x17d4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    17ac:	a1 e3       	ldi	r26, 0x31	; 49
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e1 e3       	ldi	r30, 0x31	; 49
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <GPIO_setupPinDirection+0x1bc>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <GPIO_setupPinDirection+0x1b8>
    17ce:	80 95       	com	r24
    17d0:	84 23       	and	r24, r20
    17d2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <GPIO_writePin+0x6>
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <GPIO_writePin+0x8>
    17ec:	0f 92       	push	r0
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	6a 83       	std	Y+2, r22	; 0x02
    17f6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	88 30       	cpi	r24, 0x08	; 8
    17fc:	08 f0       	brcs	.+2      	; 0x1800 <GPIO_writePin+0x1c>
    17fe:	d5 c0       	rjmp	.+426    	; 0x19aa <GPIO_writePin+0x1c6>
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	84 30       	cpi	r24, 0x04	; 4
    1804:	08 f0       	brcs	.+2      	; 0x1808 <GPIO_writePin+0x24>
    1806:	d1 c0       	rjmp	.+418    	; 0x19aa <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	3d 83       	std	Y+5, r19	; 0x05
    1810:	2c 83       	std	Y+4, r18	; 0x04
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	9d 81       	ldd	r25, Y+5	; 0x05
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	91 05       	cpc	r25, r1
    181a:	09 f4       	brne	.+2      	; 0x181e <GPIO_writePin+0x3a>
    181c:	43 c0       	rjmp	.+134    	; 0x18a4 <GPIO_writePin+0xc0>
    181e:	2c 81       	ldd	r18, Y+4	; 0x04
    1820:	3d 81       	ldd	r19, Y+5	; 0x05
    1822:	22 30       	cpi	r18, 0x02	; 2
    1824:	31 05       	cpc	r19, r1
    1826:	2c f4       	brge	.+10     	; 0x1832 <GPIO_writePin+0x4e>
    1828:	8c 81       	ldd	r24, Y+4	; 0x04
    182a:	9d 81       	ldd	r25, Y+5	; 0x05
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	71 f0       	breq	.+28     	; 0x184c <GPIO_writePin+0x68>
    1830:	bc c0       	rjmp	.+376    	; 0x19aa <GPIO_writePin+0x1c6>
    1832:	2c 81       	ldd	r18, Y+4	; 0x04
    1834:	3d 81       	ldd	r19, Y+5	; 0x05
    1836:	22 30       	cpi	r18, 0x02	; 2
    1838:	31 05       	cpc	r19, r1
    183a:	09 f4       	brne	.+2      	; 0x183e <GPIO_writePin+0x5a>
    183c:	5f c0       	rjmp	.+190    	; 0x18fc <GPIO_writePin+0x118>
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	9d 81       	ldd	r25, Y+5	; 0x05
    1842:	83 30       	cpi	r24, 0x03	; 3
    1844:	91 05       	cpc	r25, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <GPIO_writePin+0x66>
    1848:	85 c0       	rjmp	.+266    	; 0x1954 <GPIO_writePin+0x170>
    184a:	af c0       	rjmp	.+350    	; 0x19aa <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	a1 f4       	brne	.+40     	; 0x187a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1852:	ab e3       	ldi	r26, 0x3B	; 59
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	eb e3       	ldi	r30, 0x3B	; 59
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <GPIO_writePin+0x8c>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <GPIO_writePin+0x88>
    1874:	84 2b       	or	r24, r20
    1876:	8c 93       	st	X, r24
    1878:	98 c0       	rjmp	.+304    	; 0x19aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    187a:	ab e3       	ldi	r26, 0x3B	; 59
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <GPIO_writePin+0xb4>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <GPIO_writePin+0xb0>
    189c:	80 95       	com	r24
    189e:	84 23       	and	r24, r20
    18a0:	8c 93       	st	X, r24
    18a2:	83 c0       	rjmp	.+262    	; 0x19aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	a1 f4       	brne	.+40     	; 0x18d2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    18aa:	a8 e3       	ldi	r26, 0x38	; 56
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e8 e3       	ldi	r30, 0x38	; 56
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <GPIO_writePin+0xe4>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <GPIO_writePin+0xe0>
    18cc:	84 2b       	or	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	6c c0       	rjmp	.+216    	; 0x19aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    18d2:	a8 e3       	ldi	r26, 0x38	; 56
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e8 e3       	ldi	r30, 0x38	; 56
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <GPIO_writePin+0x10c>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <GPIO_writePin+0x108>
    18f4:	80 95       	com	r24
    18f6:	84 23       	and	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	57 c0       	rjmp	.+174    	; 0x19aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	a1 f4       	brne	.+40     	; 0x192a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1902:	a5 e3       	ldi	r26, 0x35	; 53
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e5 e3       	ldi	r30, 0x35	; 53
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <GPIO_writePin+0x13c>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <GPIO_writePin+0x138>
    1924:	84 2b       	or	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	40 c0       	rjmp	.+128    	; 0x19aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    192a:	a5 e3       	ldi	r26, 0x35	; 53
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e5 e3       	ldi	r30, 0x35	; 53
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <GPIO_writePin+0x164>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <GPIO_writePin+0x160>
    194c:	80 95       	com	r24
    194e:	84 23       	and	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	2b c0       	rjmp	.+86     	; 0x19aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	a1 f4       	brne	.+40     	; 0x1982 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    195a:	a2 e3       	ldi	r26, 0x32	; 50
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e2 e3       	ldi	r30, 0x32	; 50
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <GPIO_writePin+0x194>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <GPIO_writePin+0x190>
    197c:	84 2b       	or	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1982:	a2 e3       	ldi	r26, 0x32	; 50
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e2 e3       	ldi	r30, 0x32	; 50
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <GPIO_writePin+0x1bc>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <GPIO_writePin+0x1b8>
    19a4:	80 95       	com	r24
    19a6:	84 23       	and	r24, r20
    19a8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <GPIO_readPin+0x6>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <GPIO_readPin+0x8>
    19c2:	0f 92       	push	r0
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	8a 83       	std	Y+2, r24	; 0x02
    19ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    19cc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	88 30       	cpi	r24, 0x08	; 8
    19d2:	08 f0       	brcs	.+2      	; 0x19d6 <GPIO_readPin+0x1c>
    19d4:	84 c0       	rjmp	.+264    	; 0x1ade <GPIO_readPin+0x124>
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	84 30       	cpi	r24, 0x04	; 4
    19da:	08 f0       	brcs	.+2      	; 0x19de <GPIO_readPin+0x24>
    19dc:	80 c0       	rjmp	.+256    	; 0x1ade <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	3d 83       	std	Y+5, r19	; 0x05
    19e6:	2c 83       	std	Y+4, r18	; 0x04
    19e8:	4c 81       	ldd	r20, Y+4	; 0x04
    19ea:	5d 81       	ldd	r21, Y+5	; 0x05
    19ec:	41 30       	cpi	r20, 0x01	; 1
    19ee:	51 05       	cpc	r21, r1
    19f0:	79 f1       	breq	.+94     	; 0x1a50 <GPIO_readPin+0x96>
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	9d 81       	ldd	r25, Y+5	; 0x05
    19f6:	82 30       	cpi	r24, 0x02	; 2
    19f8:	91 05       	cpc	r25, r1
    19fa:	34 f4       	brge	.+12     	; 0x1a08 <GPIO_readPin+0x4e>
    19fc:	2c 81       	ldd	r18, Y+4	; 0x04
    19fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1a00:	21 15       	cp	r18, r1
    1a02:	31 05       	cpc	r19, r1
    1a04:	69 f0       	breq	.+26     	; 0x1a20 <GPIO_readPin+0x66>
    1a06:	6b c0       	rjmp	.+214    	; 0x1ade <GPIO_readPin+0x124>
    1a08:	4c 81       	ldd	r20, Y+4	; 0x04
    1a0a:	5d 81       	ldd	r21, Y+5	; 0x05
    1a0c:	42 30       	cpi	r20, 0x02	; 2
    1a0e:	51 05       	cpc	r21, r1
    1a10:	b9 f1       	breq	.+110    	; 0x1a80 <GPIO_readPin+0xc6>
    1a12:	8c 81       	ldd	r24, Y+4	; 0x04
    1a14:	9d 81       	ldd	r25, Y+5	; 0x05
    1a16:	83 30       	cpi	r24, 0x03	; 3
    1a18:	91 05       	cpc	r25, r1
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <GPIO_readPin+0x64>
    1a1c:	49 c0       	rjmp	.+146    	; 0x1ab0 <GPIO_readPin+0xf6>
    1a1e:	5f c0       	rjmp	.+190    	; 0x1ade <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a20:	e9 e3       	ldi	r30, 0x39	; 57
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a9 01       	movw	r20, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <GPIO_readPin+0x7e>
    1a34:	55 95       	asr	r21
    1a36:	47 95       	ror	r20
    1a38:	8a 95       	dec	r24
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <GPIO_readPin+0x7a>
    1a3c:	ca 01       	movw	r24, r20
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	90 70       	andi	r25, 0x00	; 0
    1a42:	88 23       	and	r24, r24
    1a44:	19 f0       	breq	.+6      	; 0x1a4c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	49 c0       	rjmp	.+146    	; 0x1ade <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a4c:	19 82       	std	Y+1, r1	; 0x01
    1a4e:	47 c0       	rjmp	.+142    	; 0x1ade <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a50:	e6 e3       	ldi	r30, 0x36	; 54
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a9 01       	movw	r20, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <GPIO_readPin+0xae>
    1a64:	55 95       	asr	r21
    1a66:	47 95       	ror	r20
    1a68:	8a 95       	dec	r24
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <GPIO_readPin+0xaa>
    1a6c:	ca 01       	movw	r24, r20
    1a6e:	81 70       	andi	r24, 0x01	; 1
    1a70:	90 70       	andi	r25, 0x00	; 0
    1a72:	88 23       	and	r24, r24
    1a74:	19 f0       	breq	.+6      	; 0x1a7c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	31 c0       	rjmp	.+98     	; 0x1ade <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a7c:	19 82       	std	Y+1, r1	; 0x01
    1a7e:	2f c0       	rjmp	.+94     	; 0x1ade <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a80:	e3 e3       	ldi	r30, 0x33	; 51
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a9 01       	movw	r20, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <GPIO_readPin+0xde>
    1a94:	55 95       	asr	r21
    1a96:	47 95       	ror	r20
    1a98:	8a 95       	dec	r24
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <GPIO_readPin+0xda>
    1a9c:	ca 01       	movw	r24, r20
    1a9e:	81 70       	andi	r24, 0x01	; 1
    1aa0:	90 70       	andi	r25, 0x00	; 0
    1aa2:	88 23       	and	r24, r24
    1aa4:	19 f0       	breq	.+6      	; 0x1aac <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	19 c0       	rjmp	.+50     	; 0x1ade <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aac:	19 82       	std	Y+1, r1	; 0x01
    1aae:	17 c0       	rjmp	.+46     	; 0x1ade <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ab0:	e0 e3       	ldi	r30, 0x30	; 48
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	a9 01       	movw	r20, r18
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <GPIO_readPin+0x10e>
    1ac4:	55 95       	asr	r21
    1ac6:	47 95       	ror	r20
    1ac8:	8a 95       	dec	r24
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <GPIO_readPin+0x10a>
    1acc:	ca 01       	movw	r24, r20
    1ace:	81 70       	andi	r24, 0x01	; 1
    1ad0:	90 70       	andi	r25, 0x00	; 0
    1ad2:	88 23       	and	r24, r24
    1ad4:	19 f0       	breq	.+6      	; 0x1adc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1adc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <GPIO_setupPortDirection+0x6>
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <GPIO_setupPortDirection+0x8>
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	84 30       	cpi	r24, 0x04	; 4
    1b04:	90 f5       	brcc	.+100    	; 0x1b6a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	3c 83       	std	Y+4, r19	; 0x04
    1b0e:	2b 83       	std	Y+3, r18	; 0x03
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	91 05       	cpc	r25, r1
    1b18:	d1 f0       	breq	.+52     	; 0x1b4e <GPIO_setupPortDirection+0x5e>
    1b1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1e:	22 30       	cpi	r18, 0x02	; 2
    1b20:	31 05       	cpc	r19, r1
    1b22:	2c f4       	brge	.+10     	; 0x1b2e <GPIO_setupPortDirection+0x3e>
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	61 f0       	breq	.+24     	; 0x1b44 <GPIO_setupPortDirection+0x54>
    1b2c:	1e c0       	rjmp	.+60     	; 0x1b6a <GPIO_setupPortDirection+0x7a>
    1b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b30:	3c 81       	ldd	r19, Y+4	; 0x04
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	81 f0       	breq	.+32     	; 0x1b58 <GPIO_setupPortDirection+0x68>
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	83 30       	cpi	r24, 0x03	; 3
    1b3e:	91 05       	cpc	r25, r1
    1b40:	81 f0       	breq	.+32     	; 0x1b62 <GPIO_setupPortDirection+0x72>
    1b42:	13 c0       	rjmp	.+38     	; 0x1b6a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b44:	ea e3       	ldi	r30, 0x3A	; 58
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	80 83       	st	Z, r24
    1b4c:	0e c0       	rjmp	.+28     	; 0x1b6a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b4e:	e7 e3       	ldi	r30, 0x37	; 55
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	80 83       	st	Z, r24
    1b56:	09 c0       	rjmp	.+18     	; 0x1b6a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b58:	e4 e3       	ldi	r30, 0x34	; 52
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	80 83       	st	Z, r24
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b62:	e1 e3       	ldi	r30, 0x31	; 49
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <GPIO_writePort+0x6>
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <GPIO_writePort+0x8>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	84 30       	cpi	r24, 0x04	; 4
    1b8c:	90 f5       	brcc	.+100    	; 0x1bf2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	3c 83       	std	Y+4, r19	; 0x04
    1b96:	2b 83       	std	Y+3, r18	; 0x03
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	d1 f0       	breq	.+52     	; 0x1bd6 <GPIO_writePort+0x5e>
    1ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	31 05       	cpc	r19, r1
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <GPIO_writePort+0x3e>
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	61 f0       	breq	.+24     	; 0x1bcc <GPIO_writePort+0x54>
    1bb4:	1e c0       	rjmp	.+60     	; 0x1bf2 <GPIO_writePort+0x7a>
    1bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bba:	22 30       	cpi	r18, 0x02	; 2
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	81 f0       	breq	.+32     	; 0x1be0 <GPIO_writePort+0x68>
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	83 30       	cpi	r24, 0x03	; 3
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	81 f0       	breq	.+32     	; 0x1bea <GPIO_writePort+0x72>
    1bca:	13 c0       	rjmp	.+38     	; 0x1bf2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1bcc:	eb e3       	ldi	r30, 0x3B	; 59
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	80 83       	st	Z, r24
    1bd4:	0e c0       	rjmp	.+28     	; 0x1bf2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1bd6:	e8 e3       	ldi	r30, 0x38	; 56
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	80 83       	st	Z, r24
    1bde:	09 c0       	rjmp	.+18     	; 0x1bf2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1be0:	e5 e3       	ldi	r30, 0x35	; 53
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	80 83       	st	Z, r24
    1be8:	04 c0       	rjmp	.+8      	; 0x1bf2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1bea:	e2 e3       	ldi	r30, 0x32	; 50
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <GPIO_readPort+0x6>
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <GPIO_readPort+0x8>
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c0e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	84 30       	cpi	r24, 0x04	; 4
    1c14:	90 f5       	brcc	.+100    	; 0x1c7a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	3c 83       	std	Y+4, r19	; 0x04
    1c1e:	2b 83       	std	Y+3, r18	; 0x03
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	91 05       	cpc	r25, r1
    1c28:	d1 f0       	breq	.+52     	; 0x1c5e <GPIO_readPort+0x5e>
    1c2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2e:	22 30       	cpi	r18, 0x02	; 2
    1c30:	31 05       	cpc	r19, r1
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <GPIO_readPort+0x3e>
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	61 f0       	breq	.+24     	; 0x1c54 <GPIO_readPort+0x54>
    1c3c:	1e c0       	rjmp	.+60     	; 0x1c7a <GPIO_readPort+0x7a>
    1c3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c40:	3c 81       	ldd	r19, Y+4	; 0x04
    1c42:	22 30       	cpi	r18, 0x02	; 2
    1c44:	31 05       	cpc	r19, r1
    1c46:	81 f0       	breq	.+32     	; 0x1c68 <GPIO_readPort+0x68>
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	83 30       	cpi	r24, 0x03	; 3
    1c4e:	91 05       	cpc	r25, r1
    1c50:	81 f0       	breq	.+32     	; 0x1c72 <GPIO_readPort+0x72>
    1c52:	13 c0       	rjmp	.+38     	; 0x1c7a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c54:	e9 e3       	ldi	r30, 0x39	; 57
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	0e c0       	rjmp	.+28     	; 0x1c7a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c5e:	e6 e3       	ldi	r30, 0x36	; 54
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	09 c0       	rjmp	.+18     	; 0x1c7a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c68:	e3 e3       	ldi	r30, 0x33	; 51
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	04 c0       	rjmp	.+8      	; 0x1c7a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c72:	e0 e3       	ldi	r30, 0x30	; 48
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c92:	82 e0       	ldi	r24, 0x02	; 2
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	0e 94 07 0b 	call	0x160e	; 0x160e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	61 e0       	ldi	r22, 0x01	; 1
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	0e 94 07 0b 	call	0x160e	; 0x160e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1ca6:	82 e0       	ldi	r24, 0x02	; 2
    1ca8:	62 e0       	ldi	r22, 0x02	; 2
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	0e 94 07 0b 	call	0x160e	; 0x160e <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	6f ef       	ldi	r22, 0xFF	; 255
    1cb4:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1cb8:	88 e3       	ldi	r24, 0x38	; 56
    1cba:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1cbe:	8c e0       	ldi	r24, 0x0C	; 12
    1cc0:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_sendCommand>
}
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	e9 97       	sbiw	r28, 0x39	; 57
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	89 af       	std	Y+57, r24	; 0x39
#if (LCD_DATA_BITS_MODE == 4)
	uint8 lcd_port_value = 0;
#endif
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	61 e0       	ldi	r22, 0x01	; 1
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GPIO_writePin>
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a0 e8       	ldi	r26, 0x80	; 128
    1d00:	bf e3       	ldi	r27, 0x3F	; 63
    1d02:	8d ab       	std	Y+53, r24	; 0x35
    1d04:	9e ab       	std	Y+54, r25	; 0x36
    1d06:	af ab       	std	Y+55, r26	; 0x37
    1d08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d0c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d0e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d10:	98 ad       	ldd	r25, Y+56	; 0x38
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	4a e7       	ldi	r20, 0x7A	; 122
    1d18:	53 e4       	ldi	r21, 0x43	; 67
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	89 ab       	std	Y+49, r24	; 0x31
    1d24:	9a ab       	std	Y+50, r25	; 0x32
    1d26:	ab ab       	std	Y+51, r26	; 0x33
    1d28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d30:	9c a9       	ldd	r25, Y+52	; 0x34
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e8       	ldi	r20, 0x80	; 128
    1d38:	5f e3       	ldi	r21, 0x3F	; 63
    1d3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d3e:	88 23       	and	r24, r24
    1d40:	2c f4       	brge	.+10     	; 0x1d4c <LCD_sendCommand+0x7c>
		__ticks = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	98 ab       	std	Y+48, r25	; 0x30
    1d48:	8f a7       	std	Y+47, r24	; 0x2f
    1d4a:	3f c0       	rjmp	.+126    	; 0x1dca <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1d4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d50:	8b a9       	ldd	r24, Y+51	; 0x33
    1d52:	9c a9       	ldd	r25, Y+52	; 0x34
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	3f ef       	ldi	r19, 0xFF	; 255
    1d58:	4f e7       	ldi	r20, 0x7F	; 127
    1d5a:	57 e4       	ldi	r21, 0x47	; 71
    1d5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	4c f5       	brge	.+82     	; 0x1db6 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d64:	6d a9       	ldd	r22, Y+53	; 0x35
    1d66:	7e a9       	ldd	r23, Y+54	; 0x36
    1d68:	8f a9       	ldd	r24, Y+55	; 0x37
    1d6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e2       	ldi	r20, 0x20	; 32
    1d72:	51 e4       	ldi	r21, 0x41	; 65
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	98 ab       	std	Y+48, r25	; 0x30
    1d8a:	8f a7       	std	Y+47, r24	; 0x2f
    1d8c:	0f c0       	rjmp	.+30     	; 0x1dac <LCD_sendCommand+0xdc>
    1d8e:	89 e1       	ldi	r24, 0x19	; 25
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9e a7       	std	Y+46, r25	; 0x2e
    1d94:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d96:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d98:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <LCD_sendCommand+0xca>
    1d9e:	9e a7       	std	Y+46, r25	; 0x2e
    1da0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1da4:	98 a9       	ldd	r25, Y+48	; 0x30
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	98 ab       	std	Y+48, r25	; 0x30
    1daa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dae:	98 a9       	ldd	r25, Y+48	; 0x30
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	69 f7       	brne	.-38     	; 0x1d8e <LCD_sendCommand+0xbe>
    1db4:	14 c0       	rjmp	.+40     	; 0x1dde <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db6:	69 a9       	ldd	r22, Y+49	; 0x31
    1db8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dba:	8b a9       	ldd	r24, Y+51	; 0x33
    1dbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	98 ab       	std	Y+48, r25	; 0x30
    1dc8:	8f a7       	std	Y+47, r24	; 0x2f
    1dca:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dcc:	98 a9       	ldd	r25, Y+48	; 0x30
    1dce:	9c a7       	std	Y+44, r25	; 0x2c
    1dd0:	8b a7       	std	Y+43, r24	; 0x2b
    1dd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_sendCommand+0x106>
    1dda:	9c a7       	std	Y+44, r25	; 0x2c
    1ddc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	62 e0       	ldi	r22, 0x02	; 2
    1de2:	41 e0       	ldi	r20, 0x01	; 1
    1de4:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GPIO_writePin>
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	a0 e8       	ldi	r26, 0x80	; 128
    1dee:	bf e3       	ldi	r27, 0x3F	; 63
    1df0:	8f a3       	std	Y+39, r24	; 0x27
    1df2:	98 a7       	std	Y+40, r25	; 0x28
    1df4:	a9 a7       	std	Y+41, r26	; 0x29
    1df6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df8:	6f a1       	ldd	r22, Y+39	; 0x27
    1dfa:	78 a5       	ldd	r23, Y+40	; 0x28
    1dfc:	89 a5       	ldd	r24, Y+41	; 0x29
    1dfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	4a e7       	ldi	r20, 0x7A	; 122
    1e06:	53 e4       	ldi	r21, 0x43	; 67
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	8b a3       	std	Y+35, r24	; 0x23
    1e12:	9c a3       	std	Y+36, r25	; 0x24
    1e14:	ad a3       	std	Y+37, r26	; 0x25
    1e16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e18:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e8       	ldi	r20, 0x80	; 128
    1e26:	5f e3       	ldi	r21, 0x3F	; 63
    1e28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e2c:	88 23       	and	r24, r24
    1e2e:	2c f4       	brge	.+10     	; 0x1e3a <LCD_sendCommand+0x16a>
		__ticks = 1;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	9a a3       	std	Y+34, r25	; 0x22
    1e36:	89 a3       	std	Y+33, r24	; 0x21
    1e38:	3f c0       	rjmp	.+126    	; 0x1eb8 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1e3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e40:	9e a1       	ldd	r25, Y+38	; 0x26
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	3f ef       	ldi	r19, 0xFF	; 255
    1e46:	4f e7       	ldi	r20, 0x7F	; 127
    1e48:	57 e4       	ldi	r21, 0x47	; 71
    1e4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e4e:	18 16       	cp	r1, r24
    1e50:	4c f5       	brge	.+82     	; 0x1ea4 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e52:	6f a1       	ldd	r22, Y+39	; 0x27
    1e54:	78 a5       	ldd	r23, Y+40	; 0x28
    1e56:	89 a5       	ldd	r24, Y+41	; 0x29
    1e58:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e2       	ldi	r20, 0x20	; 32
    1e60:	51 e4       	ldi	r21, 0x41	; 65
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	bc 01       	movw	r22, r24
    1e6c:	cd 01       	movw	r24, r26
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9a a3       	std	Y+34, r25	; 0x22
    1e78:	89 a3       	std	Y+33, r24	; 0x21
    1e7a:	0f c0       	rjmp	.+30     	; 0x1e9a <LCD_sendCommand+0x1ca>
    1e7c:	89 e1       	ldi	r24, 0x19	; 25
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	98 a3       	std	Y+32, r25	; 0x20
    1e82:	8f 8f       	std	Y+31, r24	; 0x1f
    1e84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e86:	98 a1       	ldd	r25, Y+32	; 0x20
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_sendCommand+0x1b8>
    1e8c:	98 a3       	std	Y+32, r25	; 0x20
    1e8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e90:	89 a1       	ldd	r24, Y+33	; 0x21
    1e92:	9a a1       	ldd	r25, Y+34	; 0x22
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	9a a3       	std	Y+34, r25	; 0x22
    1e98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	69 f7       	brne	.-38     	; 0x1e7c <LCD_sendCommand+0x1ac>
    1ea2:	14 c0       	rjmp	.+40     	; 0x1ecc <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eaa:	9e a1       	ldd	r25, Y+38	; 0x26
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9a a3       	std	Y+34, r25	; 0x22
    1eb6:	89 a3       	std	Y+33, r24	; 0x21
    1eb8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eba:	9a a1       	ldd	r25, Y+34	; 0x22
    1ebc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ebe:	8d 8f       	std	Y+29, r24	; 0x1d
    1ec0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ec2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <LCD_sendCommand+0x1f4>
    1ec8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	69 ad       	ldd	r22, Y+57	; 0x39
    1ed0:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <GPIO_writePort>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a0 e8       	ldi	r26, 0x80	; 128
    1eda:	bf e3       	ldi	r27, 0x3F	; 63
    1edc:	89 8f       	std	Y+25, r24	; 0x19
    1ede:	9a 8f       	std	Y+26, r25	; 0x1a
    1ee0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ee2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	4a e7       	ldi	r20, 0x7A	; 122
    1ef2:	53 e4       	ldi	r21, 0x43	; 67
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	8d 8b       	std	Y+21, r24	; 0x15
    1efe:	9e 8b       	std	Y+22, r25	; 0x16
    1f00:	af 8b       	std	Y+23, r26	; 0x17
    1f02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f04:	6d 89       	ldd	r22, Y+21	; 0x15
    1f06:	7e 89       	ldd	r23, Y+22	; 0x16
    1f08:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e8       	ldi	r20, 0x80	; 128
    1f12:	5f e3       	ldi	r21, 0x3F	; 63
    1f14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f18:	88 23       	and	r24, r24
    1f1a:	2c f4       	brge	.+10     	; 0x1f26 <LCD_sendCommand+0x256>
		__ticks = 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	9c 8b       	std	Y+20, r25	; 0x14
    1f22:	8b 8b       	std	Y+19, r24	; 0x13
    1f24:	3f c0       	rjmp	.+126    	; 0x1fa4 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1f26:	6d 89       	ldd	r22, Y+21	; 0x15
    1f28:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	3f ef       	ldi	r19, 0xFF	; 255
    1f32:	4f e7       	ldi	r20, 0x7F	; 127
    1f34:	57 e4       	ldi	r21, 0x47	; 71
    1f36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f3a:	18 16       	cp	r1, r24
    1f3c:	4c f5       	brge	.+82     	; 0x1f90 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e2       	ldi	r20, 0x20	; 32
    1f4c:	51 e4       	ldi	r21, 0x41	; 65
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	bc 01       	movw	r22, r24
    1f58:	cd 01       	movw	r24, r26
    1f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9c 8b       	std	Y+20, r25	; 0x14
    1f64:	8b 8b       	std	Y+19, r24	; 0x13
    1f66:	0f c0       	rjmp	.+30     	; 0x1f86 <LCD_sendCommand+0x2b6>
    1f68:	89 e1       	ldi	r24, 0x19	; 25
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9a 8b       	std	Y+18, r25	; 0x12
    1f6e:	89 8b       	std	Y+17, r24	; 0x11
    1f70:	89 89       	ldd	r24, Y+17	; 0x11
    1f72:	9a 89       	ldd	r25, Y+18	; 0x12
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_sendCommand+0x2a4>
    1f78:	9a 8b       	std	Y+18, r25	; 0x12
    1f7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	9c 8b       	std	Y+20, r25	; 0x14
    1f84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f86:	8b 89       	ldd	r24, Y+19	; 0x13
    1f88:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	69 f7       	brne	.-38     	; 0x1f68 <LCD_sendCommand+0x298>
    1f8e:	14 c0       	rjmp	.+40     	; 0x1fb8 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	6d 89       	ldd	r22, Y+21	; 0x15
    1f92:	7e 89       	ldd	r23, Y+22	; 0x16
    1f94:	8f 89       	ldd	r24, Y+23	; 0x17
    1f96:	98 8d       	ldd	r25, Y+24	; 0x18
    1f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9c 8b       	std	Y+20, r25	; 0x14
    1fa2:	8b 8b       	std	Y+19, r24	; 0x13
    1fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa8:	98 8b       	std	Y+16, r25	; 0x10
    1faa:	8f 87       	std	Y+15, r24	; 0x0f
    1fac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fae:	98 89       	ldd	r25, Y+16	; 0x10
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_sendCommand+0x2e0>
    1fb4:	98 8b       	std	Y+16, r25	; 0x10
    1fb6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	62 e0       	ldi	r22, 0x02	; 2
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GPIO_writePin>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e8       	ldi	r26, 0x80	; 128
    1fc8:	bf e3       	ldi	r27, 0x3F	; 63
    1fca:	8b 87       	std	Y+11, r24	; 0x0b
    1fcc:	9c 87       	std	Y+12, r25	; 0x0c
    1fce:	ad 87       	std	Y+13, r26	; 0x0d
    1fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a e7       	ldi	r20, 0x7A	; 122
    1fe0:	53 e4       	ldi	r21, 0x43	; 67
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8f 83       	std	Y+7, r24	; 0x07
    1fec:	98 87       	std	Y+8, r25	; 0x08
    1fee:	a9 87       	std	Y+9, r26	; 0x09
    1ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_sendCommand+0x344>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6b 85       	ldd	r22, Y+11	; 0x0b
    202e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2030:	8d 85       	ldd	r24, Y+13	; 0x0d
    2032:	9e 85       	ldd	r25, Y+14	; 0x0e
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_sendCommand+0x3a4>
    2056:	89 e1       	ldi	r24, 0x19	; 25
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_sendCommand+0x392>
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <LCD_sendCommand+0x386>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_sendCommand+0x3ce>
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    20a6:	e9 96       	adiw	r28, 0x39	; 57
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	e9 97       	sbiw	r28, 0x39	; 57
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	89 af       	std	Y+57, r24	; 0x39
#if (LCD_DATA_BITS_MODE == 4)
	uint8 lcd_port_value = 0;
#endif
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	60 e0       	ldi	r22, 0x00	; 0
    20d2:	41 e0       	ldi	r20, 0x01	; 1
    20d4:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    20d8:	82 e0       	ldi	r24, 0x02	; 2
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GPIO_writePin>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 e8       	ldi	r26, 0x80	; 128
    20e8:	bf e3       	ldi	r27, 0x3F	; 63
    20ea:	8d ab       	std	Y+53, r24	; 0x35
    20ec:	9e ab       	std	Y+54, r25	; 0x36
    20ee:	af ab       	std	Y+55, r26	; 0x37
    20f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	6d a9       	ldd	r22, Y+53	; 0x35
    20f4:	7e a9       	ldd	r23, Y+54	; 0x36
    20f6:	8f a9       	ldd	r24, Y+55	; 0x37
    20f8:	98 ad       	ldd	r25, Y+56	; 0x38
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a e7       	ldi	r20, 0x7A	; 122
    2100:	53 e4       	ldi	r21, 0x43	; 67
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	89 ab       	std	Y+49, r24	; 0x31
    210c:	9a ab       	std	Y+50, r25	; 0x32
    210e:	ab ab       	std	Y+51, r26	; 0x33
    2110:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2112:	69 a9       	ldd	r22, Y+49	; 0x31
    2114:	7a a9       	ldd	r23, Y+50	; 0x32
    2116:	8b a9       	ldd	r24, Y+51	; 0x33
    2118:	9c a9       	ldd	r25, Y+52	; 0x34
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	98 ab       	std	Y+48, r25	; 0x30
    2130:	8f a7       	std	Y+47, r24	; 0x2f
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2134:	69 a9       	ldd	r22, Y+49	; 0x31
    2136:	7a a9       	ldd	r23, Y+50	; 0x32
    2138:	8b a9       	ldd	r24, Y+51	; 0x33
    213a:	9c a9       	ldd	r25, Y+52	; 0x34
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	6d a9       	ldd	r22, Y+53	; 0x35
    214e:	7e a9       	ldd	r23, Y+54	; 0x36
    2150:	8f a9       	ldd	r24, Y+55	; 0x37
    2152:	98 ad       	ldd	r25, Y+56	; 0x38
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	98 ab       	std	Y+48, r25	; 0x30
    2172:	8f a7       	std	Y+47, r24	; 0x2f
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <LCD_displayCharacter+0xdc>
    2176:	89 e1       	ldi	r24, 0x19	; 25
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9e a7       	std	Y+46, r25	; 0x2e
    217c:	8d a7       	std	Y+45, r24	; 0x2d
    217e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2180:	9e a5       	ldd	r25, Y+46	; 0x2e
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_displayCharacter+0xca>
    2186:	9e a7       	std	Y+46, r25	; 0x2e
    2188:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8f a5       	ldd	r24, Y+47	; 0x2f
    218c:	98 a9       	ldd	r25, Y+48	; 0x30
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	98 ab       	std	Y+48, r25	; 0x30
    2192:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8f a5       	ldd	r24, Y+47	; 0x2f
    2196:	98 a9       	ldd	r25, Y+48	; 0x30
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <LCD_displayCharacter+0xbe>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	69 a9       	ldd	r22, Y+49	; 0x31
    21a0:	7a a9       	ldd	r23, Y+50	; 0x32
    21a2:	8b a9       	ldd	r24, Y+51	; 0x33
    21a4:	9c a9       	ldd	r25, Y+52	; 0x34
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	98 ab       	std	Y+48, r25	; 0x30
    21b0:	8f a7       	std	Y+47, r24	; 0x2f
    21b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b4:	98 a9       	ldd	r25, Y+48	; 0x30
    21b6:	9c a7       	std	Y+44, r25	; 0x2c
    21b8:	8b a7       	std	Y+43, r24	; 0x2b
    21ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    21bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <LCD_displayCharacter+0x106>
    21c2:	9c a7       	std	Y+44, r25	; 0x2c
    21c4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	62 e0       	ldi	r22, 0x02	; 2
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GPIO_writePin>
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a0 e8       	ldi	r26, 0x80	; 128
    21d6:	bf e3       	ldi	r27, 0x3F	; 63
    21d8:	8f a3       	std	Y+39, r24	; 0x27
    21da:	98 a7       	std	Y+40, r25	; 0x28
    21dc:	a9 a7       	std	Y+41, r26	; 0x29
    21de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e0:	6f a1       	ldd	r22, Y+39	; 0x27
    21e2:	78 a5       	ldd	r23, Y+40	; 0x28
    21e4:	89 a5       	ldd	r24, Y+41	; 0x29
    21e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a e7       	ldi	r20, 0x7A	; 122
    21ee:	53 e4       	ldi	r21, 0x43	; 67
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	8b a3       	std	Y+35, r24	; 0x23
    21fa:	9c a3       	std	Y+36, r25	; 0x24
    21fc:	ad a3       	std	Y+37, r26	; 0x25
    21fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2200:	6b a1       	ldd	r22, Y+35	; 0x23
    2202:	7c a1       	ldd	r23, Y+36	; 0x24
    2204:	8d a1       	ldd	r24, Y+37	; 0x25
    2206:	9e a1       	ldd	r25, Y+38	; 0x26
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	2c f4       	brge	.+10     	; 0x2222 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9a a3       	std	Y+34, r25	; 0x22
    221e:	89 a3       	std	Y+33, r24	; 0x21
    2220:	3f c0       	rjmp	.+126    	; 0x22a0 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2222:	6b a1       	ldd	r22, Y+35	; 0x23
    2224:	7c a1       	ldd	r23, Y+36	; 0x24
    2226:	8d a1       	ldd	r24, Y+37	; 0x25
    2228:	9e a1       	ldd	r25, Y+38	; 0x26
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	4c f5       	brge	.+82     	; 0x228c <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223a:	6f a1       	ldd	r22, Y+39	; 0x27
    223c:	78 a5       	ldd	r23, Y+40	; 0x28
    223e:	89 a5       	ldd	r24, Y+41	; 0x29
    2240:	9a a5       	ldd	r25, Y+42	; 0x2a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	9a a3       	std	Y+34, r25	; 0x22
    2260:	89 a3       	std	Y+33, r24	; 0x21
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <LCD_displayCharacter+0x1ca>
    2264:	89 e1       	ldi	r24, 0x19	; 25
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	98 a3       	std	Y+32, r25	; 0x20
    226a:	8f 8f       	std	Y+31, r24	; 0x1f
    226c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    226e:	98 a1       	ldd	r25, Y+32	; 0x20
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <LCD_displayCharacter+0x1b8>
    2274:	98 a3       	std	Y+32, r25	; 0x20
    2276:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	89 a1       	ldd	r24, Y+33	; 0x21
    227a:	9a a1       	ldd	r25, Y+34	; 0x22
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	9a a3       	std	Y+34, r25	; 0x22
    2280:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	89 a1       	ldd	r24, Y+33	; 0x21
    2284:	9a a1       	ldd	r25, Y+34	; 0x22
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	69 f7       	brne	.-38     	; 0x2264 <LCD_displayCharacter+0x1ac>
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228c:	6b a1       	ldd	r22, Y+35	; 0x23
    228e:	7c a1       	ldd	r23, Y+36	; 0x24
    2290:	8d a1       	ldd	r24, Y+37	; 0x25
    2292:	9e a1       	ldd	r25, Y+38	; 0x26
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9a a3       	std	Y+34, r25	; 0x22
    229e:	89 a3       	std	Y+33, r24	; 0x21
    22a0:	89 a1       	ldd	r24, Y+33	; 0x21
    22a2:	9a a1       	ldd	r25, Y+34	; 0x22
    22a4:	9e 8f       	std	Y+30, r25	; 0x1e
    22a6:	8d 8f       	std	Y+29, r24	; 0x1d
    22a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <LCD_displayCharacter+0x1f4>
    22b0:	9e 8f       	std	Y+30, r25	; 0x1e
    22b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	69 ad       	ldd	r22, Y+57	; 0x39
    22b8:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <GPIO_writePort>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	a0 e8       	ldi	r26, 0x80	; 128
    22c2:	bf e3       	ldi	r27, 0x3F	; 63
    22c4:	89 8f       	std	Y+25, r24	; 0x19
    22c6:	9a 8f       	std	Y+26, r25	; 0x1a
    22c8:	ab 8f       	std	Y+27, r26	; 0x1b
    22ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22cc:	69 8d       	ldd	r22, Y+25	; 0x19
    22ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4a e7       	ldi	r20, 0x7A	; 122
    22da:	53 e4       	ldi	r21, 0x43	; 67
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	8d 8b       	std	Y+21, r24	; 0x15
    22e6:	9e 8b       	std	Y+22, r25	; 0x16
    22e8:	af 8b       	std	Y+23, r26	; 0x17
    22ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22ec:	6d 89       	ldd	r22, Y+21	; 0x15
    22ee:	7e 89       	ldd	r23, Y+22	; 0x16
    22f0:	8f 89       	ldd	r24, Y+23	; 0x17
    22f2:	98 8d       	ldd	r25, Y+24	; 0x18
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e8       	ldi	r20, 0x80	; 128
    22fa:	5f e3       	ldi	r21, 0x3F	; 63
    22fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2300:	88 23       	and	r24, r24
    2302:	2c f4       	brge	.+10     	; 0x230e <LCD_displayCharacter+0x256>
		__ticks = 1;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9c 8b       	std	Y+20, r25	; 0x14
    230a:	8b 8b       	std	Y+19, r24	; 0x13
    230c:	3f c0       	rjmp	.+126    	; 0x238c <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    230e:	6d 89       	ldd	r22, Y+21	; 0x15
    2310:	7e 89       	ldd	r23, Y+22	; 0x16
    2312:	8f 89       	ldd	r24, Y+23	; 0x17
    2314:	98 8d       	ldd	r25, Y+24	; 0x18
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	4f e7       	ldi	r20, 0x7F	; 127
    231c:	57 e4       	ldi	r21, 0x47	; 71
    231e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2322:	18 16       	cp	r1, r24
    2324:	4c f5       	brge	.+82     	; 0x2378 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2326:	69 8d       	ldd	r22, Y+25	; 0x19
    2328:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	51 e4       	ldi	r21, 0x41	; 65
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	9c 8b       	std	Y+20, r25	; 0x14
    234c:	8b 8b       	std	Y+19, r24	; 0x13
    234e:	0f c0       	rjmp	.+30     	; 0x236e <LCD_displayCharacter+0x2b6>
    2350:	89 e1       	ldi	r24, 0x19	; 25
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9a 8b       	std	Y+18, r25	; 0x12
    2356:	89 8b       	std	Y+17, r24	; 0x11
    2358:	89 89       	ldd	r24, Y+17	; 0x11
    235a:	9a 89       	ldd	r25, Y+18	; 0x12
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_displayCharacter+0x2a4>
    2360:	9a 8b       	std	Y+18, r25	; 0x12
    2362:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2364:	8b 89       	ldd	r24, Y+19	; 0x13
    2366:	9c 89       	ldd	r25, Y+20	; 0x14
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	9c 8b       	std	Y+20, r25	; 0x14
    236c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236e:	8b 89       	ldd	r24, Y+19	; 0x13
    2370:	9c 89       	ldd	r25, Y+20	; 0x14
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	69 f7       	brne	.-38     	; 0x2350 <LCD_displayCharacter+0x298>
    2376:	14 c0       	rjmp	.+40     	; 0x23a0 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2378:	6d 89       	ldd	r22, Y+21	; 0x15
    237a:	7e 89       	ldd	r23, Y+22	; 0x16
    237c:	8f 89       	ldd	r24, Y+23	; 0x17
    237e:	98 8d       	ldd	r25, Y+24	; 0x18
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9c 8b       	std	Y+20, r25	; 0x14
    238a:	8b 8b       	std	Y+19, r24	; 0x13
    238c:	8b 89       	ldd	r24, Y+19	; 0x13
    238e:	9c 89       	ldd	r25, Y+20	; 0x14
    2390:	98 8b       	std	Y+16, r25	; 0x10
    2392:	8f 87       	std	Y+15, r24	; 0x0f
    2394:	8f 85       	ldd	r24, Y+15	; 0x0f
    2396:	98 89       	ldd	r25, Y+16	; 0x10
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <LCD_displayCharacter+0x2e0>
    239c:	98 8b       	std	Y+16, r25	; 0x10
    239e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23a0:	82 e0       	ldi	r24, 0x02	; 2
    23a2:	62 e0       	ldi	r22, 0x02	; 2
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <GPIO_writePin>
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	a0 e8       	ldi	r26, 0x80	; 128
    23b0:	bf e3       	ldi	r27, 0x3F	; 63
    23b2:	8b 87       	std	Y+11, r24	; 0x0b
    23b4:	9c 87       	std	Y+12, r25	; 0x0c
    23b6:	ad 87       	std	Y+13, r26	; 0x0d
    23b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    23bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23be:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	4a e7       	ldi	r20, 0x7A	; 122
    23c8:	53 e4       	ldi	r21, 0x43	; 67
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	8f 83       	std	Y+7, r24	; 0x07
    23d4:	98 87       	std	Y+8, r25	; 0x08
    23d6:	a9 87       	std	Y+9, r26	; 0x09
    23d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e8       	ldi	r20, 0x80	; 128
    23e8:	5f e3       	ldi	r21, 0x3F	; 63
    23ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ee:	88 23       	and	r24, r24
    23f0:	2c f4       	brge	.+10     	; 0x23fc <LCD_displayCharacter+0x344>
		__ticks = 1;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	9e 83       	std	Y+6, r25	; 0x06
    23f8:	8d 83       	std	Y+5, r24	; 0x05
    23fa:	3f c0       	rjmp	.+126    	; 0x247a <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    23fc:	6f 81       	ldd	r22, Y+7	; 0x07
    23fe:	78 85       	ldd	r23, Y+8	; 0x08
    2400:	89 85       	ldd	r24, Y+9	; 0x09
    2402:	9a 85       	ldd	r25, Y+10	; 0x0a
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	3f ef       	ldi	r19, 0xFF	; 255
    2408:	4f e7       	ldi	r20, 0x7F	; 127
    240a:	57 e4       	ldi	r21, 0x47	; 71
    240c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2410:	18 16       	cp	r1, r24
    2412:	4c f5       	brge	.+82     	; 0x2466 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2414:	6b 85       	ldd	r22, Y+11	; 0x0b
    2416:	7c 85       	ldd	r23, Y+12	; 0x0c
    2418:	8d 85       	ldd	r24, Y+13	; 0x0d
    241a:	9e 85       	ldd	r25, Y+14	; 0x0e
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 e2       	ldi	r20, 0x20	; 32
    2422:	51 e4       	ldi	r21, 0x41	; 65
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9e 83       	std	Y+6, r25	; 0x06
    243a:	8d 83       	std	Y+5, r24	; 0x05
    243c:	0f c0       	rjmp	.+30     	; 0x245c <LCD_displayCharacter+0x3a4>
    243e:	89 e1       	ldi	r24, 0x19	; 25
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9c 83       	std	Y+4, r25	; 0x04
    2444:	8b 83       	std	Y+3, r24	; 0x03
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <LCD_displayCharacter+0x392>
    244e:	9c 83       	std	Y+4, r25	; 0x04
    2450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
    2454:	9e 81       	ldd	r25, Y+6	; 0x06
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	9e 81       	ldd	r25, Y+6	; 0x06
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	69 f7       	brne	.-38     	; 0x243e <LCD_displayCharacter+0x386>
    2464:	14 c0       	rjmp	.+40     	; 0x248e <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
    247a:	8d 81       	ldd	r24, Y+5	; 0x05
    247c:	9e 81       	ldd	r25, Y+6	; 0x06
    247e:	9a 83       	std	Y+2, r25	; 0x02
    2480:	89 83       	std	Y+1, r24	; 0x01
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	9a 81       	ldd	r25, Y+2	; 0x02
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <LCD_displayCharacter+0x3ce>
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    248e:	e9 96       	adiw	r28, 0x39	; 57
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <LCD_displayString+0x6>
    24a6:	0f 92       	push	r0
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	9b 83       	std	Y+3, r25	; 0x03
    24ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24b0:	19 82       	std	Y+1, r1	; 0x01
    24b2:	0e c0       	rjmp	.+28     	; 0x24d0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	fc 01       	movw	r30, r24
    24c0:	e2 0f       	add	r30, r18
    24c2:	f3 1f       	adc	r31, r19
    24c4:	80 81       	ld	r24, Z
    24c6:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayCharacter>
		i++;
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	8f 5f       	subi	r24, 0xFF	; 255
    24ce:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	9b 81       	ldd	r25, Y+3	; 0x03
    24da:	fc 01       	movw	r30, r24
    24dc:	e2 0f       	add	r30, r18
    24de:	f3 1f       	adc	r31, r19
    24e0:	80 81       	ld	r24, Z
    24e2:	88 23       	and	r24, r24
    24e4:	39 f7       	brne	.-50     	; 0x24b4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <LCD_moveCursor+0x6>
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <LCD_moveCursor+0x8>
    24fa:	0f 92       	push	r0
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	8a 83       	std	Y+2, r24	; 0x02
    2502:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	3d 83       	std	Y+5, r19	; 0x05
    250c:	2c 83       	std	Y+4, r18	; 0x04
    250e:	8c 81       	ldd	r24, Y+4	; 0x04
    2510:	9d 81       	ldd	r25, Y+5	; 0x05
    2512:	81 30       	cpi	r24, 0x01	; 1
    2514:	91 05       	cpc	r25, r1
    2516:	c1 f0       	breq	.+48     	; 0x2548 <LCD_moveCursor+0x56>
    2518:	2c 81       	ldd	r18, Y+4	; 0x04
    251a:	3d 81       	ldd	r19, Y+5	; 0x05
    251c:	22 30       	cpi	r18, 0x02	; 2
    251e:	31 05       	cpc	r19, r1
    2520:	2c f4       	brge	.+10     	; 0x252c <LCD_moveCursor+0x3a>
    2522:	8c 81       	ldd	r24, Y+4	; 0x04
    2524:	9d 81       	ldd	r25, Y+5	; 0x05
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	61 f0       	breq	.+24     	; 0x2542 <LCD_moveCursor+0x50>
    252a:	19 c0       	rjmp	.+50     	; 0x255e <LCD_moveCursor+0x6c>
    252c:	2c 81       	ldd	r18, Y+4	; 0x04
    252e:	3d 81       	ldd	r19, Y+5	; 0x05
    2530:	22 30       	cpi	r18, 0x02	; 2
    2532:	31 05       	cpc	r19, r1
    2534:	69 f0       	breq	.+26     	; 0x2550 <LCD_moveCursor+0x5e>
    2536:	8c 81       	ldd	r24, Y+4	; 0x04
    2538:	9d 81       	ldd	r25, Y+5	; 0x05
    253a:	83 30       	cpi	r24, 0x03	; 3
    253c:	91 05       	cpc	r25, r1
    253e:	61 f0       	breq	.+24     	; 0x2558 <LCD_moveCursor+0x66>
    2540:	0e c0       	rjmp	.+28     	; 0x255e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	0b c0       	rjmp	.+22     	; 0x255e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	80 5c       	subi	r24, 0xC0	; 192
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	07 c0       	rjmp	.+14     	; 0x255e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	80 5f       	subi	r24, 0xF0	; 240
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	03 c0       	rjmp	.+6      	; 0x255e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	80 5b       	subi	r24, 0xB0	; 176
    255c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	80 68       	ori	r24, 0x80	; 128
    2562:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_sendCommand>
}
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	00 d0       	rcall	.+0      	; 0x257c <LCD_displayStringRowColumn+0x6>
    257c:	00 d0       	rcall	.+0      	; 0x257e <LCD_displayStringRowColumn+0x8>
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	6a 83       	std	Y+2, r22	; 0x02
    2586:	5c 83       	std	Y+4, r21	; 0x04
    2588:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	6a 81       	ldd	r22, Y+2	; 0x02
    258e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	0e 94 50 12 	call	0x24a0	; 0x24a0 <LCD_displayString>
}
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	62 97       	sbiw	r28, 0x12	; 18
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	f8 94       	cli
    25b6:	de bf       	out	0x3e, r29	; 62
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	cd bf       	out	0x3d, r28	; 61
    25bc:	9a 8b       	std	Y+18, r25	; 0x12
    25be:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    25c0:	89 89       	ldd	r24, Y+17	; 0x11
    25c2:	9a 89       	ldd	r25, Y+18	; 0x12
    25c4:	9e 01       	movw	r18, r28
    25c6:	2f 5f       	subi	r18, 0xFF	; 255
    25c8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ca:	b9 01       	movw	r22, r18
    25cc:	4a e0       	ldi	r20, 0x0A	; 10
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	0e 94 5f 1c 	call	0x38be	; 0x38be <itoa>
   LCD_displayString(buff); /* Display the string */
    25d4:	ce 01       	movw	r24, r28
    25d6:	01 96       	adiw	r24, 0x01	; 1
    25d8:	0e 94 50 12 	call	0x24a0	; 0x24a0 <LCD_displayString>
}
    25dc:	62 96       	adiw	r28, 0x12	; 18
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_sendCommand>
}
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	00 d0       	rcall	.+0      	; 0x2608 <KEYPAD_getPressedKey+0x6>
    2608:	0f 92       	push	r0
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    260e:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2610:	1b 82       	std	Y+3, r1	; 0x03
    2612:	42 c0       	rjmp	.+132    	; 0x2698 <KEYPAD_getPressedKey+0x96>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	98 2f       	mov	r25, r24
    2620:	9c 5f       	subi	r25, 0xFC	; 252
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	69 2f       	mov	r22, r25
    2626:	41 e0       	ldi	r20, 0x01	; 1
    2628:	0e 94 07 0b 	call	0x160e	; 0x160e <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	88 2f       	mov	r24, r24
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9c 01       	movw	r18, r24
    2634:	2c 5f       	subi	r18, 0xFC	; 252
    2636:	3f 4f       	sbci	r19, 0xFF	; 255
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	02 c0       	rjmp	.+4      	; 0x2642 <KEYPAD_getPressedKey+0x40>
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	2a 95       	dec	r18
    2644:	e2 f7       	brpl	.-8      	; 0x263e <KEYPAD_getPressedKey+0x3c>
    2646:	89 83       	std	Y+1, r24	; 0x01
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	69 81       	ldd	r22, Y+1	; 0x01
    264c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2650:	1a 82       	std	Y+2, r1	; 0x02
    2652:	1c c0       	rjmp	.+56     	; 0x268c <KEYPAD_getPressedKey+0x8a>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	6a 81       	ldd	r22, Y+2	; 0x02
    2658:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <GPIO_readPin>
    265c:	81 30       	cpi	r24, 0x01	; 1
    265e:	99 f4       	brne	.+38     	; 0x2686 <KEYPAD_getPressedKey+0x84>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	88 2f       	mov	r24, r24
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	88 0f       	add	r24, r24
    2668:	99 1f       	adc	r25, r25
    266a:	88 0f       	add	r24, r24
    266c:	99 1f       	adc	r25, r25
    266e:	98 2f       	mov	r25, r24
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	89 0f       	add	r24, r25
    2674:	8f 5f       	subi	r24, 0xFF	; 255
    2676:	0e 94 51 13 	call	0x26a2	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	8f 5f       	subi	r24, 0xFF	; 255
    268a:	8a 83       	std	Y+2, r24	; 0x02
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	84 30       	cpi	r24, 0x04	; 4
    2690:	08 f3       	brcs	.-62     	; 0x2654 <KEYPAD_getPressedKey+0x52>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	8f 5f       	subi	r24, 0xFF	; 255
    2696:	8b 83       	std	Y+3, r24	; 0x03
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	84 30       	cpi	r24, 0x04	; 4
    269c:	08 f4       	brcc	.+2      	; 0x26a0 <KEYPAD_getPressedKey+0x9e>
    269e:	ba cf       	rjmp	.-140    	; 0x2614 <KEYPAD_getPressedKey+0x12>
    26a0:	b7 cf       	rjmp	.-146    	; 0x2610 <KEYPAD_getPressedKey+0xe>

000026a2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <KEYPAD_4x4_adjustKeyNumber+0x8>
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    26b0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	3c 83       	std	Y+4, r19	; 0x04
    26ba:	2b 83       	std	Y+3, r18	; 0x03
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	9c 81       	ldd	r25, Y+4	; 0x04
    26c0:	88 30       	cpi	r24, 0x08	; 8
    26c2:	91 05       	cpc	r25, r1
    26c4:	09 f4       	brne	.+2      	; 0x26c8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    26c6:	70 c0       	rjmp	.+224    	; 0x27a8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    26c8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ca:	3c 81       	ldd	r19, Y+4	; 0x04
    26cc:	29 30       	cpi	r18, 0x09	; 9
    26ce:	31 05       	cpc	r19, r1
    26d0:	5c f5       	brge	.+86     	; 0x2728 <KEYPAD_4x4_adjustKeyNumber+0x86>
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	9c 81       	ldd	r25, Y+4	; 0x04
    26d6:	84 30       	cpi	r24, 0x04	; 4
    26d8:	91 05       	cpc	r25, r1
    26da:	09 f4       	brne	.+2      	; 0x26de <KEYPAD_4x4_adjustKeyNumber+0x3c>
    26dc:	59 c0       	rjmp	.+178    	; 0x2790 <KEYPAD_4x4_adjustKeyNumber+0xee>
    26de:	2b 81       	ldd	r18, Y+3	; 0x03
    26e0:	3c 81       	ldd	r19, Y+4	; 0x04
    26e2:	25 30       	cpi	r18, 0x05	; 5
    26e4:	31 05       	cpc	r19, r1
    26e6:	9c f4       	brge	.+38     	; 0x270e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	9c 81       	ldd	r25, Y+4	; 0x04
    26ec:	82 30       	cpi	r24, 0x02	; 2
    26ee:	91 05       	cpc	r25, r1
    26f0:	09 f4       	brne	.+2      	; 0x26f4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    26f2:	48 c0       	rjmp	.+144    	; 0x2784 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    26f4:	2b 81       	ldd	r18, Y+3	; 0x03
    26f6:	3c 81       	ldd	r19, Y+4	; 0x04
    26f8:	23 30       	cpi	r18, 0x03	; 3
    26fa:	31 05       	cpc	r19, r1
    26fc:	0c f0       	brlt	.+2      	; 0x2700 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    26fe:	45 c0       	rjmp	.+138    	; 0x278a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	9c 81       	ldd	r25, Y+4	; 0x04
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	91 05       	cpc	r25, r1
    2708:	09 f4       	brne	.+2      	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    270a:	39 c0       	rjmp	.+114    	; 0x277e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    270c:	67 c0       	rjmp	.+206    	; 0x27dc <KEYPAD_4x4_adjustKeyNumber+0x13a>
    270e:	2b 81       	ldd	r18, Y+3	; 0x03
    2710:	3c 81       	ldd	r19, Y+4	; 0x04
    2712:	26 30       	cpi	r18, 0x06	; 6
    2714:	31 05       	cpc	r19, r1
    2716:	09 f4       	brne	.+2      	; 0x271a <KEYPAD_4x4_adjustKeyNumber+0x78>
    2718:	41 c0       	rjmp	.+130    	; 0x279c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	9c 81       	ldd	r25, Y+4	; 0x04
    271e:	87 30       	cpi	r24, 0x07	; 7
    2720:	91 05       	cpc	r25, r1
    2722:	0c f0       	brlt	.+2      	; 0x2726 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2724:	3e c0       	rjmp	.+124    	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2726:	37 c0       	rjmp	.+110    	; 0x2796 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2728:	2b 81       	ldd	r18, Y+3	; 0x03
    272a:	3c 81       	ldd	r19, Y+4	; 0x04
    272c:	2c 30       	cpi	r18, 0x0C	; 12
    272e:	31 05       	cpc	r19, r1
    2730:	09 f4       	brne	.+2      	; 0x2734 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2732:	46 c0       	rjmp	.+140    	; 0x27c0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2734:	8b 81       	ldd	r24, Y+3	; 0x03
    2736:	9c 81       	ldd	r25, Y+4	; 0x04
    2738:	8d 30       	cpi	r24, 0x0D	; 13
    273a:	91 05       	cpc	r25, r1
    273c:	5c f4       	brge	.+22     	; 0x2754 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    273e:	2b 81       	ldd	r18, Y+3	; 0x03
    2740:	3c 81       	ldd	r19, Y+4	; 0x04
    2742:	2a 30       	cpi	r18, 0x0A	; 10
    2744:	31 05       	cpc	r19, r1
    2746:	b1 f1       	breq	.+108    	; 0x27b4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	9c 81       	ldd	r25, Y+4	; 0x04
    274c:	8b 30       	cpi	r24, 0x0B	; 11
    274e:	91 05       	cpc	r25, r1
    2750:	a4 f5       	brge	.+104    	; 0x27ba <KEYPAD_4x4_adjustKeyNumber+0x118>
    2752:	2d c0       	rjmp	.+90     	; 0x27ae <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2754:	2b 81       	ldd	r18, Y+3	; 0x03
    2756:	3c 81       	ldd	r19, Y+4	; 0x04
    2758:	2e 30       	cpi	r18, 0x0E	; 14
    275a:	31 05       	cpc	r19, r1
    275c:	b9 f1       	breq	.+110    	; 0x27cc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	9c 81       	ldd	r25, Y+4	; 0x04
    2762:	8e 30       	cpi	r24, 0x0E	; 14
    2764:	91 05       	cpc	r25, r1
    2766:	7c f1       	brlt	.+94     	; 0x27c6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2768:	2b 81       	ldd	r18, Y+3	; 0x03
    276a:	3c 81       	ldd	r19, Y+4	; 0x04
    276c:	2f 30       	cpi	r18, 0x0F	; 15
    276e:	31 05       	cpc	r19, r1
    2770:	79 f1       	breq	.+94     	; 0x27d0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	9c 81       	ldd	r25, Y+4	; 0x04
    2776:	80 31       	cpi	r24, 0x10	; 16
    2778:	91 05       	cpc	r25, r1
    277a:	69 f1       	breq	.+90     	; 0x27d6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    277c:	2f c0       	rjmp	.+94     	; 0x27dc <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    277e:	87 e0       	ldi	r24, 0x07	; 7
    2780:	89 83       	std	Y+1, r24	; 0x01
    2782:	2e c0       	rjmp	.+92     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2784:	88 e0       	ldi	r24, 0x08	; 8
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	2b c0       	rjmp	.+86     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    278a:	89 e0       	ldi	r24, 0x09	; 9
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	28 c0       	rjmp	.+80     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2790:	85 e2       	ldi	r24, 0x25	; 37
    2792:	89 83       	std	Y+1, r24	; 0x01
    2794:	25 c0       	rjmp	.+74     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2796:	84 e0       	ldi	r24, 0x04	; 4
    2798:	89 83       	std	Y+1, r24	; 0x01
    279a:	22 c0       	rjmp	.+68     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    279c:	85 e0       	ldi	r24, 0x05	; 5
    279e:	89 83       	std	Y+1, r24	; 0x01
    27a0:	1f c0       	rjmp	.+62     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    27a2:	86 e0       	ldi	r24, 0x06	; 6
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	1c c0       	rjmp	.+56     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    27a8:	8a e2       	ldi	r24, 0x2A	; 42
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	19 c0       	rjmp	.+50     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	16 c0       	rjmp	.+44     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    27b4:	82 e0       	ldi	r24, 0x02	; 2
    27b6:	89 83       	std	Y+1, r24	; 0x01
    27b8:	13 c0       	rjmp	.+38     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    27ba:	83 e0       	ldi	r24, 0x03	; 3
    27bc:	89 83       	std	Y+1, r24	; 0x01
    27be:	10 c0       	rjmp	.+32     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    27c0:	8d e2       	ldi	r24, 0x2D	; 45
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	0d c0       	rjmp	.+26     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    27c6:	8d e0       	ldi	r24, 0x0D	; 13
    27c8:	89 83       	std	Y+1, r24	; 0x01
    27ca:	0a c0       	rjmp	.+20     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    27cc:	19 82       	std	Y+1, r1	; 0x01
    27ce:	08 c0       	rjmp	.+16     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    27d0:	8d e3       	ldi	r24, 0x3D	; 61
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	05 c0       	rjmp	.+10     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    27d6:	8b e2       	ldi	r24, 0x2B	; 43
    27d8:	89 83       	std	Y+1, r24	; 0x01
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	08 95       	ret

000027f0 <main>:

/******************************************************************************************************
 *                                 Main Function                                                      *
 ******************************************************************************************************/
int main(void)
{
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	a2 97       	sbiw	r28, 0x22	; 34
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61

	UART_Init s_uart_config={RATE9600,DISP,EIGHT_BIT,ENR,ONE_STOP};
    2804:	ce 01       	movw	r24, r28
    2806:	0f 96       	adiw	r24, 0x0f	; 15
    2808:	9a 8f       	std	Y+26, r25	; 0x1a
    280a:	89 8f       	std	Y+25, r24	; 0x19
    280c:	ea ee       	ldi	r30, 0xEA	; 234
    280e:	f1 e0       	ldi	r31, 0x01	; 1
    2810:	fc 8f       	std	Y+28, r31	; 0x1c
    2812:	eb 8f       	std	Y+27, r30	; 0x1b
    2814:	f5 e0       	ldi	r31, 0x05	; 5
    2816:	fd 8f       	std	Y+29, r31	; 0x1d
    2818:	eb 8d       	ldd	r30, Y+27	; 0x1b
    281a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    281c:	00 80       	ld	r0, Z
    281e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2820:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	9c 8f       	std	Y+28, r25	; 0x1c
    2826:	8b 8f       	std	Y+27, r24	; 0x1b
    2828:	e9 8d       	ldd	r30, Y+25	; 0x19
    282a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    282c:	00 82       	st	Z, r0
    282e:	89 8d       	ldd	r24, Y+25	; 0x19
    2830:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	9a 8f       	std	Y+26, r25	; 0x1a
    2836:	89 8f       	std	Y+25, r24	; 0x19
    2838:	9d 8d       	ldd	r25, Y+29	; 0x1d
    283a:	91 50       	subi	r25, 0x01	; 1
    283c:	9d 8f       	std	Y+29, r25	; 0x1d
    283e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2840:	ee 23       	and	r30, r30
    2842:	51 f7       	brne	.-44     	; 0x2818 <main+0x28>
	TIMER_Config s_timer_config={6,0,PRE8,T0,0};
    2844:	ce 01       	movw	r24, r28
    2846:	44 96       	adiw	r24, 0x14	; 20
    2848:	9f 8f       	std	Y+31, r25	; 0x1f
    284a:	8e 8f       	std	Y+30, r24	; 0x1e
    284c:	e5 ee       	ldi	r30, 0xE5	; 229
    284e:	f1 e0       	ldi	r31, 0x01	; 1
    2850:	f9 a3       	std	Y+33, r31	; 0x21
    2852:	e8 a3       	std	Y+32, r30	; 0x20
    2854:	f5 e0       	ldi	r31, 0x05	; 5
    2856:	fa a3       	std	Y+34, r31	; 0x22
    2858:	e8 a1       	ldd	r30, Y+32	; 0x20
    285a:	f9 a1       	ldd	r31, Y+33	; 0x21
    285c:	00 80       	ld	r0, Z
    285e:	88 a1       	ldd	r24, Y+32	; 0x20
    2860:	99 a1       	ldd	r25, Y+33	; 0x21
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	99 a3       	std	Y+33, r25	; 0x21
    2866:	88 a3       	std	Y+32, r24	; 0x20
    2868:	ee 8d       	ldd	r30, Y+30	; 0x1e
    286a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    286c:	00 82       	st	Z, r0
    286e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2870:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	9f 8f       	std	Y+31, r25	; 0x1f
    2876:	8e 8f       	std	Y+30, r24	; 0x1e
    2878:	9a a1       	ldd	r25, Y+34	; 0x22
    287a:	91 50       	subi	r25, 0x01	; 1
    287c:	9a a3       	std	Y+34, r25	; 0x22
    287e:	ea a1       	ldd	r30, Y+34	; 0x22
    2880:	ee 23       	and	r30, r30
    2882:	51 f7       	brne	.-44     	; 0x2858 <main+0x68>

	TIMER_NormalInit(&s_timer_config,TIME_delay);
    2884:	ce 01       	movw	r24, r28
    2886:	44 96       	adiw	r24, 0x14	; 20
    2888:	25 ee       	ldi	r18, 0xE5	; 229
    288a:	3b e1       	ldi	r19, 0x1B	; 27
    288c:	b9 01       	movw	r22, r18
    288e:	0e 94 1f 09 	call	0x123e	; 0x123e <TIMER_NormalInit>
	LCD_init();
    2892:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_init>
	UART_init(&s_uart_config);
    2896:	ce 01       	movw	r24, r28
    2898:	0f 96       	adiw	r24, 0x0f	; 15
    289a:	0e 94 35 07 	call	0xe6a	; 0xe6a <UART_init>
	SREG |=(1<<7);
    289e:	af e5       	ldi	r26, 0x5F	; 95
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	ef e5       	ldi	r30, 0x5F	; 95
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	80 68       	ori	r24, 0x80	; 128
    28aa:	8c 93       	st	X, r24


	while(UART_recieveByte() != MC2_READY){}
    28ac:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_recieveByte>
    28b0:	8f 3f       	cpi	r24, 0xFF	; 255
    28b2:	e1 f7       	brne	.-8      	; 0x28ac <main+0xbc>
	UART_sendByte(MC1_READY);
    28b4:	80 ef       	ldi	r24, 0xF0	; 240
    28b6:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>
	val = UART_recieveByte();
    28ba:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_recieveByte>
    28be:	80 93 f9 01 	sts	0x01F9, r24

	if(val == 0x10)
    28c2:	80 91 f9 01 	lds	r24, 0x01F9
    28c6:	80 31       	cpi	r24, 0x10	; 16
    28c8:	21 f4       	brne	.+8      	; 0x28d2 <main+0xe2>
	{
		stepONE_ack1=1;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	80 93 f7 01 	sts	0x01F7, r24
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <main+0xe6>
	}
	else
	{
		stepONE_ack1=0;
    28d2:	10 92 f7 01 	sts	0x01F7, r1
	}

	while(1)
	{
		if(stepONE_ack2 == 0 && stepONE_ack1 == 0)
    28d6:	80 91 f8 01 	lds	r24, 0x01F8
    28da:	88 23       	and	r24, r24
    28dc:	51 f4       	brne	.+20     	; 0x28f2 <main+0x102>
    28de:	80 91 f7 01 	lds	r24, 0x01F7
    28e2:	88 23       	and	r24, r24
    28e4:	31 f4       	brne	.+12     	; 0x28f2 <main+0x102>
		{
			stepONE() ;
    28e6:	0e 94 b6 19 	call	0x336c	; 0x336c <stepONE>
			stepONE_ack2 =1;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	80 93 f8 01 	sts	0x01F8, r24
    28f0:	f2 cf       	rjmp	.-28     	; 0x28d6 <main+0xe6>
		}

		else if(stepONE_ack2 == 0 && stepONE_ack1 == 1)
    28f2:	80 91 f8 01 	lds	r24, 0x01F8
    28f6:	88 23       	and	r24, r24
    28f8:	39 f4       	brne	.+14     	; 0x2908 <main+0x118>
    28fa:	80 91 f7 01 	lds	r24, 0x01F7
    28fe:	81 30       	cpi	r24, 0x01	; 1
    2900:	19 f4       	brne	.+6      	; 0x2908 <main+0x118>
		{
			stepONETWO();
    2902:	0e 94 2e 1a 	call	0x345c	; 0x345c <stepONETWO>
    2906:	e7 cf       	rjmp	.-50     	; 0x28d6 <main+0xe6>
		}

		else if(stepONE_ack2 == 1 && stepONE_ack1 == 1)
    2908:	80 91 f8 01 	lds	r24, 0x01F8
    290c:	81 30       	cpi	r24, 0x01	; 1
    290e:	09 f0       	breq	.+2      	; 0x2912 <main+0x122>
    2910:	7a c0       	rjmp	.+244    	; 0x2a06 <main+0x216>
    2912:	80 91 f7 01 	lds	r24, 0x01F7
    2916:	81 30       	cpi	r24, 0x01	; 1
    2918:	09 f0       	breq	.+2      	; 0x291c <main+0x12c>
    291a:	75 c0       	rjmp	.+234    	; 0x2a06 <main+0x216>
		{

			TWO();
    291c:	0e 94 83 1a 	call	0x3506	; 0x3506 <TWO>
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	a8 ec       	ldi	r26, 0xC8	; 200
    2926:	b3 e4       	ldi	r27, 0x43	; 67
    2928:	8b 87       	std	Y+11, r24	; 0x0b
    292a:	9c 87       	std	Y+12, r25	; 0x0c
    292c:	ad 87       	std	Y+13, r26	; 0x0d
    292e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2930:	6b 85       	ldd	r22, Y+11	; 0x0b
    2932:	7c 85       	ldd	r23, Y+12	; 0x0c
    2934:	8d 85       	ldd	r24, Y+13	; 0x0d
    2936:	9e 85       	ldd	r25, Y+14	; 0x0e
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	4a ef       	ldi	r20, 0xFA	; 250
    293e:	54 e4       	ldi	r21, 0x44	; 68
    2940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	8f 83       	std	Y+7, r24	; 0x07
    294a:	98 87       	std	Y+8, r25	; 0x08
    294c:	a9 87       	std	Y+9, r26	; 0x09
    294e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2950:	6f 81       	ldd	r22, Y+7	; 0x07
    2952:	78 85       	ldd	r23, Y+8	; 0x08
    2954:	89 85       	ldd	r24, Y+9	; 0x09
    2956:	9a 85       	ldd	r25, Y+10	; 0x0a
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e8       	ldi	r20, 0x80	; 128
    295e:	5f e3       	ldi	r21, 0x3F	; 63
    2960:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2964:	88 23       	and	r24, r24
    2966:	2c f4       	brge	.+10     	; 0x2972 <main+0x182>
		__ticks = 1;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9e 83       	std	Y+6, r25	; 0x06
    296e:	8d 83       	std	Y+5, r24	; 0x05
    2970:	3f c0       	rjmp	.+126    	; 0x29f0 <main+0x200>
	else if (__tmp > 65535)
    2972:	6f 81       	ldd	r22, Y+7	; 0x07
    2974:	78 85       	ldd	r23, Y+8	; 0x08
    2976:	89 85       	ldd	r24, Y+9	; 0x09
    2978:	9a 85       	ldd	r25, Y+10	; 0x0a
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	3f ef       	ldi	r19, 0xFF	; 255
    297e:	4f e7       	ldi	r20, 0x7F	; 127
    2980:	57 e4       	ldi	r21, 0x47	; 71
    2982:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2986:	18 16       	cp	r1, r24
    2988:	4c f5       	brge	.+82     	; 0x29dc <main+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298a:	6b 85       	ldd	r22, Y+11	; 0x0b
    298c:	7c 85       	ldd	r23, Y+12	; 0x0c
    298e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2990:	9e 85       	ldd	r25, Y+14	; 0x0e
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e2       	ldi	r20, 0x20	; 32
    2998:	51 e4       	ldi	r21, 0x41	; 65
    299a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9e 83       	std	Y+6, r25	; 0x06
    29b0:	8d 83       	std	Y+5, r24	; 0x05
    29b2:	0f c0       	rjmp	.+30     	; 0x29d2 <main+0x1e2>
    29b4:	88 ec       	ldi	r24, 0xC8	; 200
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9c 83       	std	Y+4, r25	; 0x04
    29ba:	8b 83       	std	Y+3, r24	; 0x03
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	9c 81       	ldd	r25, Y+4	; 0x04
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <main+0x1d0>
    29c4:	9c 83       	std	Y+4, r25	; 0x04
    29c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ca:	9e 81       	ldd	r25, Y+6	; 0x06
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	9e 83       	std	Y+6, r25	; 0x06
    29d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	00 97       	sbiw	r24, 0x00	; 0
    29d8:	69 f7       	brne	.-38     	; 0x29b4 <main+0x1c4>
    29da:	7d cf       	rjmp	.-262    	; 0x28d6 <main+0xe6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29dc:	6f 81       	ldd	r22, Y+7	; 0x07
    29de:	78 85       	ldd	r23, Y+8	; 0x08
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	9e 83       	std	Y+6, r25	; 0x06
    29ee:	8d 83       	std	Y+5, r24	; 0x05
    29f0:	8d 81       	ldd	r24, Y+5	; 0x05
    29f2:	9e 81       	ldd	r25, Y+6	; 0x06
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <main+0x20c>
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	68 cf       	rjmp	.-304    	; 0x28d6 <main+0xe6>
			_delay_ms(400);
		}

		else
		{
			LCD_displayStringRowColumn(0,6,"Fault");
    2a06:	20 e6       	ldi	r18, 0x60	; 96
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	66 e0       	ldi	r22, 0x06	; 6
    2a0e:	a9 01       	movw	r20, r18
    2a10:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayStringRowColumn>
			g_count_value=0;
    2a14:	10 92 f6 01 	sts	0x01F6, r1
			while(g_count_value <= 10){}
    2a18:	80 91 f6 01 	lds	r24, 0x01F6
    2a1c:	8b 30       	cpi	r24, 0x0B	; 11
    2a1e:	e0 f3       	brcs	.-8      	; 0x2a18 <main+0x228>
			stepONE_ack2 = 0;
    2a20:	10 92 f8 01 	sts	0x01F8, r1
    2a24:	58 cf       	rjmp	.-336    	; 0x28d6 <main+0xe6>

00002a26 <supONE>:
/*
 * Description:
 *             this function is responsible for receive input from the user
 */
void supONE(uint8 step)
{
    2a26:	0f 93       	push	r16
    2a28:	1f 93       	push	r17
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	cb 55       	subi	r28, 0x5B	; 91
    2a34:	d0 40       	sbci	r29, 0x00	; 0
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	fe 01       	movw	r30, r28
    2a42:	e8 5a       	subi	r30, 0xA8	; 168
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 83       	st	Z, r24
	volatile static uint8 LDC_step1 = 0;
	LDC_step1 = step;
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e8 5a       	subi	r30, 0xA8	; 168
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	80 81       	ld	r24, Z
    2a50:	80 93 fa 01 	sts	0x01FA, r24

	if(0 == LDC_step1)
    2a54:	80 91 fa 01 	lds	r24, 0x01FA
    2a58:	88 23       	and	r24, r24
    2a5a:	09 f0       	breq	.+2      	; 0x2a5e <supONE+0x38>
    2a5c:	b3 c1       	rjmp	.+870    	; 0x2dc4 <supONE+0x39e>
	{
		LCD_clearScreen();
    2a5e:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Enter New Pass:");
    2a62:	26 e6       	ldi	r18, 0x66	; 102
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	a9 01       	movw	r20, r18
    2a6c:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayStringRowColumn>
		for(uint8 i=0;i<4;i++)
    2a70:	fe 01       	movw	r30, r28
    2a72:	e9 5a       	subi	r30, 0xA9	; 169
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	10 82       	st	Z, r1
    2a78:	88 c1       	rjmp	.+784    	; 0x2d8a <supONE+0x364>
		{
			while((key[i] < 0) || (key[i] > 9))
			{
				key[i]=KEYPAD_getPressedKey();
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e9 5a       	subi	r30, 0xA9	; 169
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 81       	ld	r24, Z
    2a82:	08 2f       	mov	r16, r24
    2a84:	10 e0       	ldi	r17, 0x00	; 0
    2a86:	0e 94 01 13 	call	0x2602	; 0x2602 <KEYPAD_getPressedKey>
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	e0 52       	subi	r30, 0x20	; 32
    2a8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a90:	80 83       	st	Z, r24
	{
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Enter New Pass:");
		for(uint8 i=0;i<4;i++)
		{
			while((key[i] < 0) || (key[i] > 9))
    2a92:	fe 01       	movw	r30, r28
    2a94:	e9 5a       	subi	r30, 0xA9	; 169
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	88 2f       	mov	r24, r24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	e0 52       	subi	r30, 0x20	; 32
    2aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa4:	80 81       	ld	r24, Z
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e9 5a       	subi	r30, 0xA9	; 169
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	80 81       	ld	r24, Z
    2aae:	88 2f       	mov	r24, r24
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	e0 52       	subi	r30, 0x20	; 32
    2ab6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab8:	80 81       	ld	r24, Z
    2aba:	8a 30       	cpi	r24, 0x0A	; 10
    2abc:	f0 f6       	brcc	.-68     	; 0x2a7a <supONE+0x54>
    2abe:	fe 01       	movw	r30, r28
    2ac0:	ef 5a       	subi	r30, 0xAF	; 175
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a6 e9       	ldi	r26, 0x96	; 150
    2aca:	b3 e4       	ldi	r27, 0x43	; 67
    2acc:	80 83       	st	Z, r24
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	a2 83       	std	Z+2, r26	; 0x02
    2ad2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad4:	8e 01       	movw	r16, r28
    2ad6:	03 5b       	subi	r16, 0xB3	; 179
    2ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    2ada:	fe 01       	movw	r30, r28
    2adc:	ef 5a       	subi	r30, 0xAF	; 175
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	60 81       	ld	r22, Z
    2ae2:	71 81       	ldd	r23, Z+1	; 0x01
    2ae4:	82 81       	ldd	r24, Z+2	; 0x02
    2ae6:	93 81       	ldd	r25, Z+3	; 0x03
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	4a ef       	ldi	r20, 0xFA	; 250
    2aee:	54 e4       	ldi	r21, 0x44	; 68
    2af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	f8 01       	movw	r30, r16
    2afa:	80 83       	st	Z, r24
    2afc:	91 83       	std	Z+1, r25	; 0x01
    2afe:	a2 83       	std	Z+2, r26	; 0x02
    2b00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b02:	fe 01       	movw	r30, r28
    2b04:	e3 5b       	subi	r30, 0xB3	; 179
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	60 81       	ld	r22, Z
    2b0a:	71 81       	ldd	r23, Z+1	; 0x01
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e8       	ldi	r20, 0x80	; 128
    2b16:	5f e3       	ldi	r21, 0x3F	; 63
    2b18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b1c:	88 23       	and	r24, r24
    2b1e:	44 f4       	brge	.+16     	; 0x2b30 <supONE+0x10a>
		__ticks = 1;
    2b20:	fe 01       	movw	r30, r28
    2b22:	e5 5b       	subi	r30, 0xB5	; 181
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	91 83       	std	Z+1, r25	; 0x01
    2b2c:	80 83       	st	Z, r24
    2b2e:	64 c0       	rjmp	.+200    	; 0x2bf8 <supONE+0x1d2>
	else if (__tmp > 65535)
    2b30:	fe 01       	movw	r30, r28
    2b32:	e3 5b       	subi	r30, 0xB3	; 179
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	60 81       	ld	r22, Z
    2b38:	71 81       	ldd	r23, Z+1	; 0x01
    2b3a:	82 81       	ldd	r24, Z+2	; 0x02
    2b3c:	93 81       	ldd	r25, Z+3	; 0x03
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	3f ef       	ldi	r19, 0xFF	; 255
    2b42:	4f e7       	ldi	r20, 0x7F	; 127
    2b44:	57 e4       	ldi	r21, 0x47	; 71
    2b46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b4a:	18 16       	cp	r1, r24
    2b4c:	0c f0       	brlt	.+2      	; 0x2b50 <supONE+0x12a>
    2b4e:	43 c0       	rjmp	.+134    	; 0x2bd6 <supONE+0x1b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b50:	fe 01       	movw	r30, r28
    2b52:	ef 5a       	subi	r30, 0xAF	; 175
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	60 81       	ld	r22, Z
    2b58:	71 81       	ldd	r23, Z+1	; 0x01
    2b5a:	82 81       	ldd	r24, Z+2	; 0x02
    2b5c:	93 81       	ldd	r25, Z+3	; 0x03
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e2       	ldi	r20, 0x20	; 32
    2b64:	51 e4       	ldi	r21, 0x41	; 65
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	8e 01       	movw	r16, r28
    2b70:	05 5b       	subi	r16, 0xB5	; 181
    2b72:	1f 4f       	sbci	r17, 0xFF	; 255
    2b74:	bc 01       	movw	r22, r24
    2b76:	cd 01       	movw	r24, r26
    2b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	f8 01       	movw	r30, r16
    2b82:	91 83       	std	Z+1, r25	; 0x01
    2b84:	80 83       	st	Z, r24
    2b86:	1f c0       	rjmp	.+62     	; 0x2bc6 <supONE+0x1a0>
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e7 5b       	subi	r30, 0xB7	; 183
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	88 ec       	ldi	r24, 0xC8	; 200
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	80 83       	st	Z, r24
    2b96:	fe 01       	movw	r30, r28
    2b98:	e7 5b       	subi	r30, 0xB7	; 183
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	80 81       	ld	r24, Z
    2b9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <supONE+0x17a>
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e7 5b       	subi	r30, 0xB7	; 183
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	91 83       	std	Z+1, r25	; 0x01
    2bac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bae:	de 01       	movw	r26, r28
    2bb0:	a5 5b       	subi	r26, 0xB5	; 181
    2bb2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e5 5b       	subi	r30, 0xB5	; 181
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	11 96       	adiw	r26, 0x01	; 1
    2bc2:	9c 93       	st	X, r25
    2bc4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e5 5b       	subi	r30, 0xB5	; 181
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
    2bd0:	00 97       	sbiw	r24, 0x00	; 0
    2bd2:	d1 f6       	brne	.-76     	; 0x2b88 <supONE+0x162>
    2bd4:	27 c0       	rjmp	.+78     	; 0x2c24 <supONE+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd6:	8e 01       	movw	r16, r28
    2bd8:	05 5b       	subi	r16, 0xB5	; 181
    2bda:	1f 4f       	sbci	r17, 0xFF	; 255
    2bdc:	fe 01       	movw	r30, r28
    2bde:	e3 5b       	subi	r30, 0xB3	; 179
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	60 81       	ld	r22, Z
    2be4:	71 81       	ldd	r23, Z+1	; 0x01
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	93 81       	ldd	r25, Z+3	; 0x03
    2bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	f8 01       	movw	r30, r16
    2bf4:	91 83       	std	Z+1, r25	; 0x01
    2bf6:	80 83       	st	Z, r24
    2bf8:	de 01       	movw	r26, r28
    2bfa:	a9 5b       	subi	r26, 0xB9	; 185
    2bfc:	bf 4f       	sbci	r27, 0xFF	; 255
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e5 5b       	subi	r30, 0xB5	; 181
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	80 81       	ld	r24, Z
    2c06:	91 81       	ldd	r25, Z+1	; 0x01
    2c08:	8d 93       	st	X+, r24
    2c0a:	9c 93       	st	X, r25
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	e9 5b       	subi	r30, 0xB9	; 185
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	80 81       	ld	r24, Z
    2c14:	91 81       	ldd	r25, Z+1	; 0x01
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <supONE+0x1f0>
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e9 5b       	subi	r30, 0xB9	; 185
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	91 83       	std	Z+1, r25	; 0x01
    2c22:	80 83       	st	Z, r24
			{
				key[i]=KEYPAD_getPressedKey();
		    }
			_delay_ms(300);
			LCD_moveCursor(1,9+i);
    2c24:	fe 01       	movw	r30, r28
    2c26:	e9 5a       	subi	r30, 0xA9	; 169
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	80 81       	ld	r24, Z
    2c2c:	98 2f       	mov	r25, r24
    2c2e:	97 5f       	subi	r25, 0xF7	; 247
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	69 2f       	mov	r22, r25
    2c34:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_moveCursor>
			LCD_intgerToString(key[i]);
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e9 5a       	subi	r30, 0xA9	; 169
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	80 81       	ld	r24, Z
    2c40:	88 2f       	mov	r24, r24
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	fc 01       	movw	r30, r24
    2c46:	e0 52       	subi	r30, 0x20	; 32
    2c48:	fe 4f       	sbci	r31, 0xFE	; 254
    2c4a:	80 81       	ld	r24, Z
    2c4c:	88 2f       	mov	r24, r24
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_intgerToString>
    2c54:	fe 01       	movw	r30, r28
    2c56:	ed 5b       	subi	r30, 0xBD	; 189
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	a6 e9       	ldi	r26, 0x96	; 150
    2c60:	b3 e4       	ldi	r27, 0x43	; 67
    2c62:	80 83       	st	Z, r24
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	a2 83       	std	Z+2, r26	; 0x02
    2c68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6a:	8e 01       	movw	r16, r28
    2c6c:	01 5c       	subi	r16, 0xC1	; 193
    2c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c70:	fe 01       	movw	r30, r28
    2c72:	ed 5b       	subi	r30, 0xBD	; 189
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	60 81       	ld	r22, Z
    2c78:	71 81       	ldd	r23, Z+1	; 0x01
    2c7a:	82 81       	ldd	r24, Z+2	; 0x02
    2c7c:	93 81       	ldd	r25, Z+3	; 0x03
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	4a ef       	ldi	r20, 0xFA	; 250
    2c84:	54 e4       	ldi	r21, 0x44	; 68
    2c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	f8 01       	movw	r30, r16
    2c90:	80 83       	st	Z, r24
    2c92:	91 83       	std	Z+1, r25	; 0x01
    2c94:	a2 83       	std	Z+2, r26	; 0x02
    2c96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c98:	fe 01       	movw	r30, r28
    2c9a:	ff 96       	adiw	r30, 0x3f	; 63
    2c9c:	60 81       	ld	r22, Z
    2c9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ca0:	82 81       	ldd	r24, Z+2	; 0x02
    2ca2:	93 81       	ldd	r25, Z+3	; 0x03
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e8       	ldi	r20, 0x80	; 128
    2caa:	5f e3       	ldi	r21, 0x3F	; 63
    2cac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cb0:	88 23       	and	r24, r24
    2cb2:	2c f4       	brge	.+10     	; 0x2cbe <supONE+0x298>
		__ticks = 1;
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	9e af       	std	Y+62, r25	; 0x3e
    2cba:	8d af       	std	Y+61, r24	; 0x3d
    2cbc:	46 c0       	rjmp	.+140    	; 0x2d4a <supONE+0x324>
	else if (__tmp > 65535)
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ff 96       	adiw	r30, 0x3f	; 63
    2cc2:	60 81       	ld	r22, Z
    2cc4:	71 81       	ldd	r23, Z+1	; 0x01
    2cc6:	82 81       	ldd	r24, Z+2	; 0x02
    2cc8:	93 81       	ldd	r25, Z+3	; 0x03
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	3f ef       	ldi	r19, 0xFF	; 255
    2cce:	4f e7       	ldi	r20, 0x7F	; 127
    2cd0:	57 e4       	ldi	r21, 0x47	; 71
    2cd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cd6:	18 16       	cp	r1, r24
    2cd8:	64 f5       	brge	.+88     	; 0x2d32 <supONE+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cda:	fe 01       	movw	r30, r28
    2cdc:	ed 5b       	subi	r30, 0xBD	; 189
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	60 81       	ld	r22, Z
    2ce2:	71 81       	ldd	r23, Z+1	; 0x01
    2ce4:	82 81       	ldd	r24, Z+2	; 0x02
    2ce6:	93 81       	ldd	r25, Z+3	; 0x03
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	40 e2       	ldi	r20, 0x20	; 32
    2cee:	51 e4       	ldi	r21, 0x41	; 65
    2cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	bc 01       	movw	r22, r24
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	9e af       	std	Y+62, r25	; 0x3e
    2d06:	8d af       	std	Y+61, r24	; 0x3d
    2d08:	0f c0       	rjmp	.+30     	; 0x2d28 <supONE+0x302>
    2d0a:	88 ec       	ldi	r24, 0xC8	; 200
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	9c af       	std	Y+60, r25	; 0x3c
    2d10:	8b af       	std	Y+59, r24	; 0x3b
    2d12:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d14:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <supONE+0x2f0>
    2d1a:	9c af       	std	Y+60, r25	; 0x3c
    2d1c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d20:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	9e af       	std	Y+62, r25	; 0x3e
    2d26:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d28:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	69 f7       	brne	.-38     	; 0x2d0a <supONE+0x2e4>
    2d30:	16 c0       	rjmp	.+44     	; 0x2d5e <supONE+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d32:	fe 01       	movw	r30, r28
    2d34:	ff 96       	adiw	r30, 0x3f	; 63
    2d36:	60 81       	ld	r22, Z
    2d38:	71 81       	ldd	r23, Z+1	; 0x01
    2d3a:	82 81       	ldd	r24, Z+2	; 0x02
    2d3c:	93 81       	ldd	r25, Z+3	; 0x03
    2d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	9e af       	std	Y+62, r25	; 0x3e
    2d48:	8d af       	std	Y+61, r24	; 0x3d
    2d4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d4e:	9a af       	std	Y+58, r25	; 0x3a
    2d50:	89 af       	std	Y+57, r24	; 0x39
    2d52:	89 ad       	ldd	r24, Y+57	; 0x39
    2d54:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <supONE+0x330>
    2d5a:	9a af       	std	Y+58, r25	; 0x3a
    2d5c:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(300);
			LCD_moveCursor(1,9+i);
    2d5e:	fe 01       	movw	r30, r28
    2d60:	e9 5a       	subi	r30, 0xA9	; 169
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	80 81       	ld	r24, Z
    2d66:	98 2f       	mov	r25, r24
    2d68:	97 5f       	subi	r25, 0xF7	; 247
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	69 2f       	mov	r22, r25
    2d6e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_moveCursor>
			LCD_displayCharacter('*');
    2d72:	8a e2       	ldi	r24, 0x2A	; 42
    2d74:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayCharacter>

	if(0 == LDC_step1)
	{
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Enter New Pass:");
		for(uint8 i=0;i<4;i++)
    2d78:	de 01       	movw	r26, r28
    2d7a:	a9 5a       	subi	r26, 0xA9	; 169
    2d7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e9 5a       	subi	r30, 0xA9	; 169
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 81       	ld	r24, Z
    2d86:	8f 5f       	subi	r24, 0xFF	; 255
    2d88:	8c 93       	st	X, r24
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	e9 5a       	subi	r30, 0xA9	; 169
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	80 81       	ld	r24, Z
    2d92:	84 30       	cpi	r24, 0x04	; 4
    2d94:	08 f4       	brcc	.+2      	; 0x2d98 <supONE+0x372>
    2d96:	7d ce       	rjmp	.-774    	; 0x2a92 <supONE+0x6c>
			LCD_intgerToString(key[i]);
			_delay_ms(300);
			LCD_moveCursor(1,9+i);
			LCD_displayCharacter('*');
		}
		LCD_clearScreen();
    2d98:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Then Enter </>");
    2d9c:	26 e7       	ldi	r18, 0x76	; 118
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	60 e0       	ldi	r22, 0x00	; 0
    2da4:	a9 01       	movw	r20, r18
    2da6:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayStringRowColumn>
    2daa:	04 c0       	rjmp	.+8      	; 0x2db4 <supONE+0x38e>
		while(key[5] != 37)
		{
			key[5]=KEYPAD_getPressedKey();
    2dac:	0e 94 01 13 	call	0x2602	; 0x2602 <KEYPAD_getPressedKey>
    2db0:	80 93 e5 01 	sts	0x01E5, r24
			LCD_moveCursor(1,9+i);
			LCD_displayCharacter('*');
		}
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Then Enter </>");
		while(key[5] != 37)
    2db4:	80 91 e5 01 	lds	r24, 0x01E5
    2db8:	85 32       	cpi	r24, 0x25	; 37
    2dba:	c1 f7       	brne	.-16     	; 0x2dac <supONE+0x386>
		{
			key[5]=KEYPAD_getPressedKey();
		}
		key[5]=0;
    2dbc:	10 92 e5 01 	sts	0x01E5, r1
		LCD_clearScreen();
    2dc0:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_clearScreen>
	}

	if(1 == LDC_step1)
    2dc4:	80 91 fa 01 	lds	r24, 0x01FA
    2dc8:	81 30       	cpi	r24, 0x01	; 1
    2dca:	09 f0       	breq	.+2      	; 0x2dce <supONE+0x3a8>
    2dcc:	5f c1       	rjmp	.+702    	; 0x308c <supONE+0x666>
	{
		LCD_clearScreen();
    2dce:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"RE Enter Pass:");
    2dd2:	25 e8       	ldi	r18, 0x85	; 133
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	a9 01       	movw	r20, r18
    2ddc:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayStringRowColumn>
		for(uint8 i=0;i<4;i++)
    2de0:	fe 01       	movw	r30, r28
    2de2:	ea 5a       	subi	r30, 0xAA	; 170
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	10 82       	st	Z, r1
    2de8:	34 c1       	rjmp	.+616    	; 0x3052 <supONE+0x62c>
		{
			while((key[i] < 0) || (key[i] > 9))
			{
				key[i]=KEYPAD_getPressedKey();
    2dea:	fe 01       	movw	r30, r28
    2dec:	ea 5a       	subi	r30, 0xAA	; 170
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	80 81       	ld	r24, Z
    2df2:	08 2f       	mov	r16, r24
    2df4:	10 e0       	ldi	r17, 0x00	; 0
    2df6:	0e 94 01 13 	call	0x2602	; 0x2602 <KEYPAD_getPressedKey>
    2dfa:	f8 01       	movw	r30, r16
    2dfc:	e0 52       	subi	r30, 0x20	; 32
    2dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    2e00:	80 83       	st	Z, r24
	{
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"RE Enter Pass:");
		for(uint8 i=0;i<4;i++)
		{
			while((key[i] < 0) || (key[i] > 9))
    2e02:	fe 01       	movw	r30, r28
    2e04:	ea 5a       	subi	r30, 0xAA	; 170
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 81       	ld	r24, Z
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	fc 01       	movw	r30, r24
    2e10:	e0 52       	subi	r30, 0x20	; 32
    2e12:	fe 4f       	sbci	r31, 0xFE	; 254
    2e14:	80 81       	ld	r24, Z
    2e16:	fe 01       	movw	r30, r28
    2e18:	ea 5a       	subi	r30, 0xAA	; 170
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 81       	ld	r24, Z
    2e1e:	88 2f       	mov	r24, r24
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	fc 01       	movw	r30, r24
    2e24:	e0 52       	subi	r30, 0x20	; 32
    2e26:	fe 4f       	sbci	r31, 0xFE	; 254
    2e28:	80 81       	ld	r24, Z
    2e2a:	8a 30       	cpi	r24, 0x0A	; 10
    2e2c:	f0 f6       	brcc	.-68     	; 0x2dea <supONE+0x3c4>
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	a6 e9       	ldi	r26, 0x96	; 150
    2e34:	b3 e4       	ldi	r27, 0x43	; 67
    2e36:	8d ab       	std	Y+53, r24	; 0x35
    2e38:	9e ab       	std	Y+54, r25	; 0x36
    2e3a:	af ab       	std	Y+55, r26	; 0x37
    2e3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3e:	6d a9       	ldd	r22, Y+53	; 0x35
    2e40:	7e a9       	ldd	r23, Y+54	; 0x36
    2e42:	8f a9       	ldd	r24, Y+55	; 0x37
    2e44:	98 ad       	ldd	r25, Y+56	; 0x38
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	4a ef       	ldi	r20, 0xFA	; 250
    2e4c:	54 e4       	ldi	r21, 0x44	; 68
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	89 ab       	std	Y+49, r24	; 0x31
    2e58:	9a ab       	std	Y+50, r25	; 0x32
    2e5a:	ab ab       	std	Y+51, r26	; 0x33
    2e5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e60:	7a a9       	ldd	r23, Y+50	; 0x32
    2e62:	8b a9       	ldd	r24, Y+51	; 0x33
    2e64:	9c a9       	ldd	r25, Y+52	; 0x34
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e8       	ldi	r20, 0x80	; 128
    2e6c:	5f e3       	ldi	r21, 0x3F	; 63
    2e6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e72:	88 23       	and	r24, r24
    2e74:	2c f4       	brge	.+10     	; 0x2e80 <supONE+0x45a>
		__ticks = 1;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	98 ab       	std	Y+48, r25	; 0x30
    2e7c:	8f a7       	std	Y+47, r24	; 0x2f
    2e7e:	3f c0       	rjmp	.+126    	; 0x2efe <supONE+0x4d8>
	else if (__tmp > 65535)
    2e80:	69 a9       	ldd	r22, Y+49	; 0x31
    2e82:	7a a9       	ldd	r23, Y+50	; 0x32
    2e84:	8b a9       	ldd	r24, Y+51	; 0x33
    2e86:	9c a9       	ldd	r25, Y+52	; 0x34
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	3f ef       	ldi	r19, 0xFF	; 255
    2e8c:	4f e7       	ldi	r20, 0x7F	; 127
    2e8e:	57 e4       	ldi	r21, 0x47	; 71
    2e90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e94:	18 16       	cp	r1, r24
    2e96:	4c f5       	brge	.+82     	; 0x2eea <supONE+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e98:	6d a9       	ldd	r22, Y+53	; 0x35
    2e9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e2       	ldi	r20, 0x20	; 32
    2ea6:	51 e4       	ldi	r21, 0x41	; 65
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	98 ab       	std	Y+48, r25	; 0x30
    2ebe:	8f a7       	std	Y+47, r24	; 0x2f
    2ec0:	0f c0       	rjmp	.+30     	; 0x2ee0 <supONE+0x4ba>
    2ec2:	88 ec       	ldi	r24, 0xC8	; 200
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9e a7       	std	Y+46, r25	; 0x2e
    2ec8:	8d a7       	std	Y+45, r24	; 0x2d
    2eca:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ecc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <supONE+0x4a8>
    2ed2:	9e a7       	std	Y+46, r25	; 0x2e
    2ed4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	98 ab       	std	Y+48, r25	; 0x30
    2ede:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ee2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	69 f7       	brne	.-38     	; 0x2ec2 <supONE+0x49c>
    2ee8:	14 c0       	rjmp	.+40     	; 0x2f12 <supONE+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eea:	69 a9       	ldd	r22, Y+49	; 0x31
    2eec:	7a a9       	ldd	r23, Y+50	; 0x32
    2eee:	8b a9       	ldd	r24, Y+51	; 0x33
    2ef0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	98 ab       	std	Y+48, r25	; 0x30
    2efc:	8f a7       	std	Y+47, r24	; 0x2f
    2efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f00:	98 a9       	ldd	r25, Y+48	; 0x30
    2f02:	9c a7       	std	Y+44, r25	; 0x2c
    2f04:	8b a7       	std	Y+43, r24	; 0x2b
    2f06:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f08:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <supONE+0x4e4>
    2f0e:	9c a7       	std	Y+44, r25	; 0x2c
    2f10:	8b a7       	std	Y+43, r24	; 0x2b
			{
				key[i]=KEYPAD_getPressedKey();
		    }
			_delay_ms(300);
			LCD_moveCursor(1,9+i);
    2f12:	fe 01       	movw	r30, r28
    2f14:	ea 5a       	subi	r30, 0xAA	; 170
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	80 81       	ld	r24, Z
    2f1a:	98 2f       	mov	r25, r24
    2f1c:	97 5f       	subi	r25, 0xF7	; 247
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	69 2f       	mov	r22, r25
    2f22:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_moveCursor>
			LCD_intgerToString(key[i]);
    2f26:	fe 01       	movw	r30, r28
    2f28:	ea 5a       	subi	r30, 0xAA	; 170
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	88 2f       	mov	r24, r24
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	fc 01       	movw	r30, r24
    2f34:	e0 52       	subi	r30, 0x20	; 32
    2f36:	fe 4f       	sbci	r31, 0xFE	; 254
    2f38:	80 81       	ld	r24, Z
    2f3a:	88 2f       	mov	r24, r24
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_intgerToString>
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	a6 e9       	ldi	r26, 0x96	; 150
    2f48:	b3 e4       	ldi	r27, 0x43	; 67
    2f4a:	8f a3       	std	Y+39, r24	; 0x27
    2f4c:	98 a7       	std	Y+40, r25	; 0x28
    2f4e:	a9 a7       	std	Y+41, r26	; 0x29
    2f50:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f52:	6f a1       	ldd	r22, Y+39	; 0x27
    2f54:	78 a5       	ldd	r23, Y+40	; 0x28
    2f56:	89 a5       	ldd	r24, Y+41	; 0x29
    2f58:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	4a ef       	ldi	r20, 0xFA	; 250
    2f60:	54 e4       	ldi	r21, 0x44	; 68
    2f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	8b a3       	std	Y+35, r24	; 0x23
    2f6c:	9c a3       	std	Y+36, r25	; 0x24
    2f6e:	ad a3       	std	Y+37, r26	; 0x25
    2f70:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f72:	6b a1       	ldd	r22, Y+35	; 0x23
    2f74:	7c a1       	ldd	r23, Y+36	; 0x24
    2f76:	8d a1       	ldd	r24, Y+37	; 0x25
    2f78:	9e a1       	ldd	r25, Y+38	; 0x26
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e8       	ldi	r20, 0x80	; 128
    2f80:	5f e3       	ldi	r21, 0x3F	; 63
    2f82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f86:	88 23       	and	r24, r24
    2f88:	2c f4       	brge	.+10     	; 0x2f94 <supONE+0x56e>
		__ticks = 1;
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	9a a3       	std	Y+34, r25	; 0x22
    2f90:	89 a3       	std	Y+33, r24	; 0x21
    2f92:	3f c0       	rjmp	.+126    	; 0x3012 <supONE+0x5ec>
	else if (__tmp > 65535)
    2f94:	6b a1       	ldd	r22, Y+35	; 0x23
    2f96:	7c a1       	ldd	r23, Y+36	; 0x24
    2f98:	8d a1       	ldd	r24, Y+37	; 0x25
    2f9a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	3f ef       	ldi	r19, 0xFF	; 255
    2fa0:	4f e7       	ldi	r20, 0x7F	; 127
    2fa2:	57 e4       	ldi	r21, 0x47	; 71
    2fa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa8:	18 16       	cp	r1, r24
    2faa:	4c f5       	brge	.+82     	; 0x2ffe <supONE+0x5d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fac:	6f a1       	ldd	r22, Y+39	; 0x27
    2fae:	78 a5       	ldd	r23, Y+40	; 0x28
    2fb0:	89 a5       	ldd	r24, Y+41	; 0x29
    2fb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e2       	ldi	r20, 0x20	; 32
    2fba:	51 e4       	ldi	r21, 0x41	; 65
    2fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	bc 01       	movw	r22, r24
    2fc6:	cd 01       	movw	r24, r26
    2fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	9a a3       	std	Y+34, r25	; 0x22
    2fd2:	89 a3       	std	Y+33, r24	; 0x21
    2fd4:	0f c0       	rjmp	.+30     	; 0x2ff4 <supONE+0x5ce>
    2fd6:	88 ec       	ldi	r24, 0xC8	; 200
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	98 a3       	std	Y+32, r25	; 0x20
    2fdc:	8f 8f       	std	Y+31, r24	; 0x1f
    2fde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fe0:	98 a1       	ldd	r25, Y+32	; 0x20
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <supONE+0x5bc>
    2fe6:	98 a3       	std	Y+32, r25	; 0x20
    2fe8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fea:	89 a1       	ldd	r24, Y+33	; 0x21
    2fec:	9a a1       	ldd	r25, Y+34	; 0x22
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	9a a3       	std	Y+34, r25	; 0x22
    2ff2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ff6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ff8:	00 97       	sbiw	r24, 0x00	; 0
    2ffa:	69 f7       	brne	.-38     	; 0x2fd6 <supONE+0x5b0>
    2ffc:	14 c0       	rjmp	.+40     	; 0x3026 <supONE+0x600>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffe:	6b a1       	ldd	r22, Y+35	; 0x23
    3000:	7c a1       	ldd	r23, Y+36	; 0x24
    3002:	8d a1       	ldd	r24, Y+37	; 0x25
    3004:	9e a1       	ldd	r25, Y+38	; 0x26
    3006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	9a a3       	std	Y+34, r25	; 0x22
    3010:	89 a3       	std	Y+33, r24	; 0x21
    3012:	89 a1       	ldd	r24, Y+33	; 0x21
    3014:	9a a1       	ldd	r25, Y+34	; 0x22
    3016:	9e 8f       	std	Y+30, r25	; 0x1e
    3018:	8d 8f       	std	Y+29, r24	; 0x1d
    301a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    301c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	f1 f7       	brne	.-4      	; 0x301e <supONE+0x5f8>
    3022:	9e 8f       	std	Y+30, r25	; 0x1e
    3024:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300);
			LCD_moveCursor(1,9+i);
    3026:	fe 01       	movw	r30, r28
    3028:	ea 5a       	subi	r30, 0xAA	; 170
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 81       	ld	r24, Z
    302e:	98 2f       	mov	r25, r24
    3030:	97 5f       	subi	r25, 0xF7	; 247
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	69 2f       	mov	r22, r25
    3036:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_moveCursor>
			LCD_displayCharacter('*');
    303a:	8a e2       	ldi	r24, 0x2A	; 42
    303c:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayCharacter>

	if(1 == LDC_step1)
	{
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"RE Enter Pass:");
		for(uint8 i=0;i<4;i++)
    3040:	de 01       	movw	r26, r28
    3042:	aa 5a       	subi	r26, 0xAA	; 170
    3044:	bf 4f       	sbci	r27, 0xFF	; 255
    3046:	fe 01       	movw	r30, r28
    3048:	ea 5a       	subi	r30, 0xAA	; 170
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	80 81       	ld	r24, Z
    304e:	8f 5f       	subi	r24, 0xFF	; 255
    3050:	8c 93       	st	X, r24
    3052:	fe 01       	movw	r30, r28
    3054:	ea 5a       	subi	r30, 0xAA	; 170
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	80 81       	ld	r24, Z
    305a:	84 30       	cpi	r24, 0x04	; 4
    305c:	08 f4       	brcc	.+2      	; 0x3060 <supONE+0x63a>
    305e:	d1 ce       	rjmp	.-606    	; 0x2e02 <supONE+0x3dc>
			LCD_intgerToString(key[i]);
			_delay_ms(300);
			LCD_moveCursor(1,9+i);
			LCD_displayCharacter('*');
		}
		LCD_clearScreen();
    3060:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Then Enter </>");
    3064:	26 e7       	ldi	r18, 0x76	; 118
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	60 e0       	ldi	r22, 0x00	; 0
    306c:	a9 01       	movw	r20, r18
    306e:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayStringRowColumn>
    3072:	04 c0       	rjmp	.+8      	; 0x307c <supONE+0x656>
		while(key[5] != 37)
		{
			key[5]=KEYPAD_getPressedKey();
    3074:	0e 94 01 13 	call	0x2602	; 0x2602 <KEYPAD_getPressedKey>
    3078:	80 93 e5 01 	sts	0x01E5, r24
			LCD_moveCursor(1,9+i);
			LCD_displayCharacter('*');
		}
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Then Enter </>");
		while(key[5] != 37)
    307c:	80 91 e5 01 	lds	r24, 0x01E5
    3080:	85 32       	cpi	r24, 0x25	; 37
    3082:	c1 f7       	brne	.-16     	; 0x3074 <supONE+0x64e>
		{
			key[5]=KEYPAD_getPressedKey();
		}
		key[5]=0;
    3084:	10 92 e5 01 	sts	0x01E5, r1
		LCD_clearScreen();
    3088:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_clearScreen>
	}

	if(2 == LDC_step1)
    308c:	80 91 fa 01 	lds	r24, 0x01FA
    3090:	82 30       	cpi	r24, 0x02	; 2
    3092:	09 f0       	breq	.+2      	; 0x3096 <supONE+0x670>
    3094:	5f c1       	rjmp	.+702    	; 0x3354 <supONE+0x92e>
	{
		LCD_clearScreen();
    3096:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Enter Pass:");
    309a:	24 e9       	ldi	r18, 0x94	; 148
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	60 e0       	ldi	r22, 0x00	; 0
    30a2:	a9 01       	movw	r20, r18
    30a4:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayStringRowColumn>
		for(uint8 i=0;i<4;i++)
    30a8:	fe 01       	movw	r30, r28
    30aa:	eb 5a       	subi	r30, 0xAB	; 171
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	10 82       	st	Z, r1
    30b0:	34 c1       	rjmp	.+616    	; 0x331a <supONE+0x8f4>
		{
			while((key[i] < 0) || (key[i] > 9))
			{
				key[i]=KEYPAD_getPressedKey();
    30b2:	fe 01       	movw	r30, r28
    30b4:	eb 5a       	subi	r30, 0xAB	; 171
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	80 81       	ld	r24, Z
    30ba:	08 2f       	mov	r16, r24
    30bc:	10 e0       	ldi	r17, 0x00	; 0
    30be:	0e 94 01 13 	call	0x2602	; 0x2602 <KEYPAD_getPressedKey>
    30c2:	f8 01       	movw	r30, r16
    30c4:	e0 52       	subi	r30, 0x20	; 32
    30c6:	fe 4f       	sbci	r31, 0xFE	; 254
    30c8:	80 83       	st	Z, r24
	{
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Enter Pass:");
		for(uint8 i=0;i<4;i++)
		{
			while((key[i] < 0) || (key[i] > 9))
    30ca:	fe 01       	movw	r30, r28
    30cc:	eb 5a       	subi	r30, 0xAB	; 171
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	80 81       	ld	r24, Z
    30d2:	88 2f       	mov	r24, r24
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	fc 01       	movw	r30, r24
    30d8:	e0 52       	subi	r30, 0x20	; 32
    30da:	fe 4f       	sbci	r31, 0xFE	; 254
    30dc:	80 81       	ld	r24, Z
    30de:	fe 01       	movw	r30, r28
    30e0:	eb 5a       	subi	r30, 0xAB	; 171
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 81       	ld	r24, Z
    30e6:	88 2f       	mov	r24, r24
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	fc 01       	movw	r30, r24
    30ec:	e0 52       	subi	r30, 0x20	; 32
    30ee:	fe 4f       	sbci	r31, 0xFE	; 254
    30f0:	80 81       	ld	r24, Z
    30f2:	8a 30       	cpi	r24, 0x0A	; 10
    30f4:	f0 f6       	brcc	.-68     	; 0x30b2 <supONE+0x68c>
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	a6 e9       	ldi	r26, 0x96	; 150
    30fc:	b3 e4       	ldi	r27, 0x43	; 67
    30fe:	89 8f       	std	Y+25, r24	; 0x19
    3100:	9a 8f       	std	Y+26, r25	; 0x1a
    3102:	ab 8f       	std	Y+27, r26	; 0x1b
    3104:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3106:	69 8d       	ldd	r22, Y+25	; 0x19
    3108:	7a 8d       	ldd	r23, Y+26	; 0x1a
    310a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    310c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	4a ef       	ldi	r20, 0xFA	; 250
    3114:	54 e4       	ldi	r21, 0x44	; 68
    3116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	8d 8b       	std	Y+21, r24	; 0x15
    3120:	9e 8b       	std	Y+22, r25	; 0x16
    3122:	af 8b       	std	Y+23, r26	; 0x17
    3124:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3126:	6d 89       	ldd	r22, Y+21	; 0x15
    3128:	7e 89       	ldd	r23, Y+22	; 0x16
    312a:	8f 89       	ldd	r24, Y+23	; 0x17
    312c:	98 8d       	ldd	r25, Y+24	; 0x18
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	40 e8       	ldi	r20, 0x80	; 128
    3134:	5f e3       	ldi	r21, 0x3F	; 63
    3136:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    313a:	88 23       	and	r24, r24
    313c:	2c f4       	brge	.+10     	; 0x3148 <supONE+0x722>
		__ticks = 1;
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	9c 8b       	std	Y+20, r25	; 0x14
    3144:	8b 8b       	std	Y+19, r24	; 0x13
    3146:	3f c0       	rjmp	.+126    	; 0x31c6 <supONE+0x7a0>
	else if (__tmp > 65535)
    3148:	6d 89       	ldd	r22, Y+21	; 0x15
    314a:	7e 89       	ldd	r23, Y+22	; 0x16
    314c:	8f 89       	ldd	r24, Y+23	; 0x17
    314e:	98 8d       	ldd	r25, Y+24	; 0x18
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	3f ef       	ldi	r19, 0xFF	; 255
    3154:	4f e7       	ldi	r20, 0x7F	; 127
    3156:	57 e4       	ldi	r21, 0x47	; 71
    3158:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    315c:	18 16       	cp	r1, r24
    315e:	4c f5       	brge	.+82     	; 0x31b2 <supONE+0x78c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3160:	69 8d       	ldd	r22, Y+25	; 0x19
    3162:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3164:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3166:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e2       	ldi	r20, 0x20	; 32
    316e:	51 e4       	ldi	r21, 0x41	; 65
    3170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	bc 01       	movw	r22, r24
    317a:	cd 01       	movw	r24, r26
    317c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	9c 8b       	std	Y+20, r25	; 0x14
    3186:	8b 8b       	std	Y+19, r24	; 0x13
    3188:	0f c0       	rjmp	.+30     	; 0x31a8 <supONE+0x782>
    318a:	88 ec       	ldi	r24, 0xC8	; 200
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	9a 8b       	std	Y+18, r25	; 0x12
    3190:	89 8b       	std	Y+17, r24	; 0x11
    3192:	89 89       	ldd	r24, Y+17	; 0x11
    3194:	9a 89       	ldd	r25, Y+18	; 0x12
    3196:	01 97       	sbiw	r24, 0x01	; 1
    3198:	f1 f7       	brne	.-4      	; 0x3196 <supONE+0x770>
    319a:	9a 8b       	std	Y+18, r25	; 0x12
    319c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319e:	8b 89       	ldd	r24, Y+19	; 0x13
    31a0:	9c 89       	ldd	r25, Y+20	; 0x14
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	9c 8b       	std	Y+20, r25	; 0x14
    31a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a8:	8b 89       	ldd	r24, Y+19	; 0x13
    31aa:	9c 89       	ldd	r25, Y+20	; 0x14
    31ac:	00 97       	sbiw	r24, 0x00	; 0
    31ae:	69 f7       	brne	.-38     	; 0x318a <supONE+0x764>
    31b0:	14 c0       	rjmp	.+40     	; 0x31da <supONE+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b2:	6d 89       	ldd	r22, Y+21	; 0x15
    31b4:	7e 89       	ldd	r23, Y+22	; 0x16
    31b6:	8f 89       	ldd	r24, Y+23	; 0x17
    31b8:	98 8d       	ldd	r25, Y+24	; 0x18
    31ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	9c 8b       	std	Y+20, r25	; 0x14
    31c4:	8b 8b       	std	Y+19, r24	; 0x13
    31c6:	8b 89       	ldd	r24, Y+19	; 0x13
    31c8:	9c 89       	ldd	r25, Y+20	; 0x14
    31ca:	98 8b       	std	Y+16, r25	; 0x10
    31cc:	8f 87       	std	Y+15, r24	; 0x0f
    31ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    31d0:	98 89       	ldd	r25, Y+16	; 0x10
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <supONE+0x7ac>
    31d6:	98 8b       	std	Y+16, r25	; 0x10
    31d8:	8f 87       	std	Y+15, r24	; 0x0f
			{
				key[i]=KEYPAD_getPressedKey();
		    }
			_delay_ms(300);
			LCD_moveCursor(1,9+i);
    31da:	fe 01       	movw	r30, r28
    31dc:	eb 5a       	subi	r30, 0xAB	; 171
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	80 81       	ld	r24, Z
    31e2:	98 2f       	mov	r25, r24
    31e4:	97 5f       	subi	r25, 0xF7	; 247
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	69 2f       	mov	r22, r25
    31ea:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_moveCursor>
			LCD_intgerToString(key[i]);
    31ee:	fe 01       	movw	r30, r28
    31f0:	eb 5a       	subi	r30, 0xAB	; 171
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 81       	ld	r24, Z
    31f6:	88 2f       	mov	r24, r24
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	fc 01       	movw	r30, r24
    31fc:	e0 52       	subi	r30, 0x20	; 32
    31fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3200:	80 81       	ld	r24, Z
    3202:	88 2f       	mov	r24, r24
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_intgerToString>
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	a6 e9       	ldi	r26, 0x96	; 150
    3210:	b3 e4       	ldi	r27, 0x43	; 67
    3212:	8b 87       	std	Y+11, r24	; 0x0b
    3214:	9c 87       	std	Y+12, r25	; 0x0c
    3216:	ad 87       	std	Y+13, r26	; 0x0d
    3218:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321a:	6b 85       	ldd	r22, Y+11	; 0x0b
    321c:	7c 85       	ldd	r23, Y+12	; 0x0c
    321e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3220:	9e 85       	ldd	r25, Y+14	; 0x0e
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	4a ef       	ldi	r20, 0xFA	; 250
    3228:	54 e4       	ldi	r21, 0x44	; 68
    322a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	8f 83       	std	Y+7, r24	; 0x07
    3234:	98 87       	std	Y+8, r25	; 0x08
    3236:	a9 87       	std	Y+9, r26	; 0x09
    3238:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    323a:	6f 81       	ldd	r22, Y+7	; 0x07
    323c:	78 85       	ldd	r23, Y+8	; 0x08
    323e:	89 85       	ldd	r24, Y+9	; 0x09
    3240:	9a 85       	ldd	r25, Y+10	; 0x0a
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	40 e8       	ldi	r20, 0x80	; 128
    3248:	5f e3       	ldi	r21, 0x3F	; 63
    324a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    324e:	88 23       	and	r24, r24
    3250:	2c f4       	brge	.+10     	; 0x325c <supONE+0x836>
		__ticks = 1;
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	9e 83       	std	Y+6, r25	; 0x06
    3258:	8d 83       	std	Y+5, r24	; 0x05
    325a:	3f c0       	rjmp	.+126    	; 0x32da <supONE+0x8b4>
	else if (__tmp > 65535)
    325c:	6f 81       	ldd	r22, Y+7	; 0x07
    325e:	78 85       	ldd	r23, Y+8	; 0x08
    3260:	89 85       	ldd	r24, Y+9	; 0x09
    3262:	9a 85       	ldd	r25, Y+10	; 0x0a
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	3f ef       	ldi	r19, 0xFF	; 255
    3268:	4f e7       	ldi	r20, 0x7F	; 127
    326a:	57 e4       	ldi	r21, 0x47	; 71
    326c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3270:	18 16       	cp	r1, r24
    3272:	4c f5       	brge	.+82     	; 0x32c6 <supONE+0x8a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3274:	6b 85       	ldd	r22, Y+11	; 0x0b
    3276:	7c 85       	ldd	r23, Y+12	; 0x0c
    3278:	8d 85       	ldd	r24, Y+13	; 0x0d
    327a:	9e 85       	ldd	r25, Y+14	; 0x0e
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	40 e2       	ldi	r20, 0x20	; 32
    3282:	51 e4       	ldi	r21, 0x41	; 65
    3284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	bc 01       	movw	r22, r24
    328e:	cd 01       	movw	r24, r26
    3290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	9e 83       	std	Y+6, r25	; 0x06
    329a:	8d 83       	std	Y+5, r24	; 0x05
    329c:	0f c0       	rjmp	.+30     	; 0x32bc <supONE+0x896>
    329e:	88 ec       	ldi	r24, 0xC8	; 200
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	9c 83       	std	Y+4, r25	; 0x04
    32a4:	8b 83       	std	Y+3, r24	; 0x03
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	9c 81       	ldd	r25, Y+4	; 0x04
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	f1 f7       	brne	.-4      	; 0x32aa <supONE+0x884>
    32ae:	9c 83       	std	Y+4, r25	; 0x04
    32b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b2:	8d 81       	ldd	r24, Y+5	; 0x05
    32b4:	9e 81       	ldd	r25, Y+6	; 0x06
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	9e 83       	std	Y+6, r25	; 0x06
    32ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32bc:	8d 81       	ldd	r24, Y+5	; 0x05
    32be:	9e 81       	ldd	r25, Y+6	; 0x06
    32c0:	00 97       	sbiw	r24, 0x00	; 0
    32c2:	69 f7       	brne	.-38     	; 0x329e <supONE+0x878>
    32c4:	14 c0       	rjmp	.+40     	; 0x32ee <supONE+0x8c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c6:	6f 81       	ldd	r22, Y+7	; 0x07
    32c8:	78 85       	ldd	r23, Y+8	; 0x08
    32ca:	89 85       	ldd	r24, Y+9	; 0x09
    32cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	9e 83       	std	Y+6, r25	; 0x06
    32d8:	8d 83       	std	Y+5, r24	; 0x05
    32da:	8d 81       	ldd	r24, Y+5	; 0x05
    32dc:	9e 81       	ldd	r25, Y+6	; 0x06
    32de:	9a 83       	std	Y+2, r25	; 0x02
    32e0:	89 83       	std	Y+1, r24	; 0x01
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	9a 81       	ldd	r25, Y+2	; 0x02
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	f1 f7       	brne	.-4      	; 0x32e6 <supONE+0x8c0>
    32ea:	9a 83       	std	Y+2, r25	; 0x02
    32ec:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			LCD_moveCursor(1,9+i);
    32ee:	fe 01       	movw	r30, r28
    32f0:	eb 5a       	subi	r30, 0xAB	; 171
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	80 81       	ld	r24, Z
    32f6:	98 2f       	mov	r25, r24
    32f8:	97 5f       	subi	r25, 0xF7	; 247
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	69 2f       	mov	r22, r25
    32fe:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_moveCursor>
			LCD_displayCharacter('*');
    3302:	8a e2       	ldi	r24, 0x2A	; 42
    3304:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_displayCharacter>

	if(2 == LDC_step1)
	{
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Enter Pass:");
		for(uint8 i=0;i<4;i++)
    3308:	de 01       	movw	r26, r28
    330a:	ab 5a       	subi	r26, 0xAB	; 171
    330c:	bf 4f       	sbci	r27, 0xFF	; 255
    330e:	fe 01       	movw	r30, r28
    3310:	eb 5a       	subi	r30, 0xAB	; 171
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	80 81       	ld	r24, Z
    3316:	8f 5f       	subi	r24, 0xFF	; 255
    3318:	8c 93       	st	X, r24
    331a:	fe 01       	movw	r30, r28
    331c:	eb 5a       	subi	r30, 0xAB	; 171
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	80 81       	ld	r24, Z
    3322:	84 30       	cpi	r24, 0x04	; 4
    3324:	08 f4       	brcc	.+2      	; 0x3328 <supONE+0x902>
    3326:	d1 ce       	rjmp	.-606    	; 0x30ca <supONE+0x6a4>
			LCD_intgerToString(key[i]);
			_delay_ms(300);
			LCD_moveCursor(1,9+i);
			LCD_displayCharacter('*');
		}
		LCD_clearScreen();
    3328:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Then Enter </>");
    332c:	26 e7       	ldi	r18, 0x76	; 118
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	60 e0       	ldi	r22, 0x00	; 0
    3334:	a9 01       	movw	r20, r18
    3336:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayStringRowColumn>
    333a:	04 c0       	rjmp	.+8      	; 0x3344 <supONE+0x91e>
		while(key[5] != 37)
		{
			key[5]=KEYPAD_getPressedKey();
    333c:	0e 94 01 13 	call	0x2602	; 0x2602 <KEYPAD_getPressedKey>
    3340:	80 93 e5 01 	sts	0x01E5, r24
			LCD_moveCursor(1,9+i);
			LCD_displayCharacter('*');
		}
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Then Enter </>");
		while(key[5] != 37)
    3344:	80 91 e5 01 	lds	r24, 0x01E5
    3348:	85 32       	cpi	r24, 0x25	; 37
    334a:	c1 f7       	brne	.-16     	; 0x333c <supONE+0x916>
		{
			key[5]=KEYPAD_getPressedKey();
		}
		key[5]=0;
    334c:	10 92 e5 01 	sts	0x01E5, r1
		LCD_clearScreen();
    3350:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_clearScreen>
	}
}
    3354:	c5 5a       	subi	r28, 0xA5	; 165
    3356:	df 4f       	sbci	r29, 0xFF	; 255
    3358:	0f b6       	in	r0, 0x3f	; 63
    335a:	f8 94       	cli
    335c:	de bf       	out	0x3e, r29	; 62
    335e:	0f be       	out	0x3f, r0	; 63
    3360:	cd bf       	out	0x3d, r28	; 61
    3362:	cf 91       	pop	r28
    3364:	df 91       	pop	r29
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	08 95       	ret

0000336c <stepONE>:
 * Description:
 *             this function responsible for match the new password
 *             if correct then save it in eeprom if not re enter
 */
void stepONE(void)
{
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	00 d0       	rcall	.+0      	; 0x3372 <stepONE+0x6>
    3372:	00 d0       	rcall	.+0      	; 0x3374 <stepONE+0x8>
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	65 c0       	rjmp	.+202    	; 0x3444 <stepONE+0xd8>
	while(0 == stepONE_ack1)
	{
		supONE(0);
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	0e 94 13 15 	call	0x2a26	; 0x2a26 <supONE>
		UART_sendByte(MC1_READY);
    3380:	80 ef       	ldi	r24, 0xF0	; 240
    3382:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>

		for(uint8 i=0;i<5;i++)
    3386:	1c 82       	std	Y+4, r1	; 0x04
    3388:	0c c0       	rjmp	.+24     	; 0x33a2 <stepONE+0x36>
		{
			UART_sendByte(key[i]);
    338a:	8c 81       	ldd	r24, Y+4	; 0x04
    338c:	88 2f       	mov	r24, r24
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	fc 01       	movw	r30, r24
    3392:	e0 52       	subi	r30, 0x20	; 32
    3394:	fe 4f       	sbci	r31, 0xFE	; 254
    3396:	80 81       	ld	r24, Z
    3398:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>
	while(0 == stepONE_ack1)
	{
		supONE(0);
		UART_sendByte(MC1_READY);

		for(uint8 i=0;i<5;i++)
    339c:	8c 81       	ldd	r24, Y+4	; 0x04
    339e:	8f 5f       	subi	r24, 0xFF	; 255
    33a0:	8c 83       	std	Y+4, r24	; 0x04
    33a2:	8c 81       	ldd	r24, Y+4	; 0x04
    33a4:	85 30       	cpi	r24, 0x05	; 5
    33a6:	88 f3       	brcs	.-30     	; 0x338a <stepONE+0x1e>
		{
			UART_sendByte(key[i]);
		}
		for(uint8 i=0;i<5;i++)
    33a8:	1b 82       	std	Y+3, r1	; 0x03
    33aa:	0b c0       	rjmp	.+22     	; 0x33c2 <stepONE+0x56>
		{
			key[i]=20;
    33ac:	8b 81       	ldd	r24, Y+3	; 0x03
    33ae:	88 2f       	mov	r24, r24
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	fc 01       	movw	r30, r24
    33b4:	e0 52       	subi	r30, 0x20	; 32
    33b6:	fe 4f       	sbci	r31, 0xFE	; 254
    33b8:	84 e1       	ldi	r24, 0x14	; 20
    33ba:	80 83       	st	Z, r24

		for(uint8 i=0;i<5;i++)
		{
			UART_sendByte(key[i]);
		}
		for(uint8 i=0;i<5;i++)
    33bc:	8b 81       	ldd	r24, Y+3	; 0x03
    33be:	8f 5f       	subi	r24, 0xFF	; 255
    33c0:	8b 83       	std	Y+3, r24	; 0x03
    33c2:	8b 81       	ldd	r24, Y+3	; 0x03
    33c4:	85 30       	cpi	r24, 0x05	; 5
    33c6:	90 f3       	brcs	.-28     	; 0x33ac <stepONE+0x40>
		{
			key[i]=20;
		}

		supONE(1);
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	0e 94 13 15 	call	0x2a26	; 0x2a26 <supONE>
		UART_sendByte(MC1_READY);
    33ce:	80 ef       	ldi	r24, 0xF0	; 240
    33d0:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>

		for(uint8 i=0;i<5;i++)
    33d4:	1a 82       	std	Y+2, r1	; 0x02
    33d6:	0c c0       	rjmp	.+24     	; 0x33f0 <stepONE+0x84>
		{
			UART_sendByte(key[i]);
    33d8:	8a 81       	ldd	r24, Y+2	; 0x02
    33da:	88 2f       	mov	r24, r24
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	fc 01       	movw	r30, r24
    33e0:	e0 52       	subi	r30, 0x20	; 32
    33e2:	fe 4f       	sbci	r31, 0xFE	; 254
    33e4:	80 81       	ld	r24, Z
    33e6:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>
		}

		supONE(1);
		UART_sendByte(MC1_READY);

		for(uint8 i=0;i<5;i++)
    33ea:	8a 81       	ldd	r24, Y+2	; 0x02
    33ec:	8f 5f       	subi	r24, 0xFF	; 255
    33ee:	8a 83       	std	Y+2, r24	; 0x02
    33f0:	8a 81       	ldd	r24, Y+2	; 0x02
    33f2:	85 30       	cpi	r24, 0x05	; 5
    33f4:	88 f3       	brcs	.-30     	; 0x33d8 <stepONE+0x6c>
		{
			UART_sendByte(key[i]);
		}
		for(uint8 i=0;i<5;i++)
    33f6:	19 82       	std	Y+1, r1	; 0x01
    33f8:	0b c0       	rjmp	.+22     	; 0x3410 <stepONE+0xa4>
		{
			key[i]=20;
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	88 2f       	mov	r24, r24
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	fc 01       	movw	r30, r24
    3402:	e0 52       	subi	r30, 0x20	; 32
    3404:	fe 4f       	sbci	r31, 0xFE	; 254
    3406:	84 e1       	ldi	r24, 0x14	; 20
    3408:	80 83       	st	Z, r24

		for(uint8 i=0;i<5;i++)
		{
			UART_sendByte(key[i]);
		}
		for(uint8 i=0;i<5;i++)
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	8f 5f       	subi	r24, 0xFF	; 255
    340e:	89 83       	std	Y+1, r24	; 0x01
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	85 30       	cpi	r24, 0x05	; 5
    3414:	90 f3       	brcs	.-28     	; 0x33fa <stepONE+0x8e>
		{
			key[i]=20;
		}

		while(UART_recieveByte() != MC2_READY){}
    3416:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_recieveByte>
    341a:	8f 3f       	cpi	r24, 0xFF	; 255
    341c:	e1 f7       	brne	.-8      	; 0x3416 <stepONE+0xaa>
		stepONE_ack1 = UART_recieveByte();
    341e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_recieveByte>
    3422:	80 93 f7 01 	sts	0x01F7, r24

		if(stepONE_ack1 == 1)
    3426:	80 91 f7 01 	lds	r24, 0x01F7
    342a:	81 30       	cpi	r24, 0x01	; 1
    342c:	21 f4       	brne	.+8      	; 0x3436 <stepONE+0xca>
		{
			UART_sendByte(1);
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>
    3434:	07 c0       	rjmp	.+14     	; 0x3444 <stepONE+0xd8>

		}

		else if (stepONE_ack1 == 0)
    3436:	80 91 f7 01 	lds	r24, 0x01F7
    343a:	88 23       	and	r24, r24
    343c:	19 f4       	brne	.+6      	; 0x3444 <stepONE+0xd8>
		{
			UART_sendByte(0);
    343e:	80 e0       	ldi	r24, 0x00	; 0
    3440:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>
 *             this function responsible for match the new password
 *             if correct then save it in eeprom if not re enter
 */
void stepONE(void)
{
	while(0 == stepONE_ack1)
    3444:	80 91 f7 01 	lds	r24, 0x01F7
    3448:	88 23       	and	r24, r24
    344a:	09 f4       	brne	.+2      	; 0x344e <stepONE+0xe2>
    344c:	96 cf       	rjmp	.-212    	; 0x337a <stepONE+0xe>
			UART_sendByte(0);

		}
	}

}
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	cf 91       	pop	r28
    3458:	df 91       	pop	r29
    345a:	08 95       	ret

0000345c <stepONETWO>:
 * Description:
 *             this function responsible for check password
 *             if correct then login if not try 2 other time
 */
void stepONETWO(void)
{
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	00 d0       	rcall	.+0      	; 0x3462 <stepONETWO+0x6>
    3462:	0f 92       	push	r0
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
	uint8 save = 0;
    3468:	1b 82       	std	Y+3, r1	; 0x03
    346a:	43 c0       	rjmp	.+134    	; 0x34f2 <stepONETWO+0x96>

	while(2 >= save)
	{

		supONE(2);
    346c:	82 e0       	ldi	r24, 0x02	; 2
    346e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <supONE>
		UART_sendByte(MC1_READY);
    3472:	80 ef       	ldi	r24, 0xF0	; 240
    3474:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>

		for(uint8 i=0;i<5;i++)
    3478:	1a 82       	std	Y+2, r1	; 0x02
    347a:	0c c0       	rjmp	.+24     	; 0x3494 <stepONETWO+0x38>
		{
			UART_sendByte(key[i]);
    347c:	8a 81       	ldd	r24, Y+2	; 0x02
    347e:	88 2f       	mov	r24, r24
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	fc 01       	movw	r30, r24
    3484:	e0 52       	subi	r30, 0x20	; 32
    3486:	fe 4f       	sbci	r31, 0xFE	; 254
    3488:	80 81       	ld	r24, Z
    348a:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>
	{

		supONE(2);
		UART_sendByte(MC1_READY);

		for(uint8 i=0;i<5;i++)
    348e:	8a 81       	ldd	r24, Y+2	; 0x02
    3490:	8f 5f       	subi	r24, 0xFF	; 255
    3492:	8a 83       	std	Y+2, r24	; 0x02
    3494:	8a 81       	ldd	r24, Y+2	; 0x02
    3496:	85 30       	cpi	r24, 0x05	; 5
    3498:	88 f3       	brcs	.-30     	; 0x347c <stepONETWO+0x20>
		{
			UART_sendByte(key[i]);
		}

		for(uint8 i=0;i<5;i++)
    349a:	19 82       	std	Y+1, r1	; 0x01
    349c:	0b c0       	rjmp	.+22     	; 0x34b4 <stepONETWO+0x58>
		{
			key[i]=20;
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	88 2f       	mov	r24, r24
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	fc 01       	movw	r30, r24
    34a6:	e0 52       	subi	r30, 0x20	; 32
    34a8:	fe 4f       	sbci	r31, 0xFE	; 254
    34aa:	84 e1       	ldi	r24, 0x14	; 20
    34ac:	80 83       	st	Z, r24
		for(uint8 i=0;i<5;i++)
		{
			UART_sendByte(key[i]);
		}

		for(uint8 i=0;i<5;i++)
    34ae:	89 81       	ldd	r24, Y+1	; 0x01
    34b0:	8f 5f       	subi	r24, 0xFF	; 255
    34b2:	89 83       	std	Y+1, r24	; 0x01
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	85 30       	cpi	r24, 0x05	; 5
    34b8:	90 f3       	brcs	.-28     	; 0x349e <stepONETWO+0x42>
		{
			key[i]=20;
		}

		while(UART_recieveByte() != MC2_READY){}
    34ba:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_recieveByte>
    34be:	8f 3f       	cpi	r24, 0xFF	; 255
    34c0:	e1 f7       	brne	.-8      	; 0x34ba <stepONETWO+0x5e>
		stepONE_ack2 = UART_recieveByte();
    34c2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_recieveByte>
    34c6:	80 93 f8 01 	sts	0x01F8, r24

		if(1 == stepONE_ack2)
    34ca:	80 91 f8 01 	lds	r24, 0x01F8
    34ce:	81 30       	cpi	r24, 0x01	; 1
    34d0:	21 f4       	brne	.+8      	; 0x34da <stepONETWO+0x7e>
		{
			UART_sendByte(1);
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>
    34d8:	10 c0       	rjmp	.+32     	; 0x34fa <stepONETWO+0x9e>
			break;
		}
		UART_sendByte(0);
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>
		save++;
    34e0:	8b 81       	ldd	r24, Y+3	; 0x03
    34e2:	8f 5f       	subi	r24, 0xFF	; 255
    34e4:	8b 83       	std	Y+3, r24	; 0x03
		if(save >= 3 )
    34e6:	8b 81       	ldd	r24, Y+3	; 0x03
    34e8:	83 30       	cpi	r24, 0x03	; 3
    34ea:	18 f0       	brcs	.+6      	; 0x34f2 <stepONETWO+0x96>
		{
			stepONE_ack2 = 2;
    34ec:	82 e0       	ldi	r24, 0x02	; 2
    34ee:	80 93 f8 01 	sts	0x01F8, r24
 */
void stepONETWO(void)
{
	uint8 save = 0;

	while(2 >= save)
    34f2:	8b 81       	ldd	r24, Y+3	; 0x03
    34f4:	83 30       	cpi	r24, 0x03	; 3
    34f6:	08 f4       	brcc	.+2      	; 0x34fa <stepONETWO+0x9e>
    34f8:	b9 cf       	rjmp	.-142    	; 0x346c <stepONETWO+0x10>
		if(save >= 3 )
		{
			stepONE_ack2 = 2;
		}
	}
}
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	08 95       	ret

00003506 <TWO>:
 * Description:
 *             this function responsible for change password or
 *             open and close the door
 */
void TWO(void)
{
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	6e 97       	sbiw	r28, 0x1e	; 30
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
	char state='\0';
    351a:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 st=0;
    351c:	1d 8e       	std	Y+29, r1	; 0x1d
    351e:	48 c1       	rjmp	.+656    	; 0x37b0 <TWO+0x2aa>

	while(state =='\0')
	{
		LCD_clearScreen();
    3520:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"+ :Open Door");
    3524:	20 ea       	ldi	r18, 0xA0	; 160
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	60 e0       	ldi	r22, 0x00	; 0
    352c:	a9 01       	movw	r20, r18
    352e:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"- :changing Pass");
    3532:	2d ea       	ldi	r18, 0xAD	; 173
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	a9 01       	movw	r20, r18
    353c:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayStringRowColumn>
		state = KEYPAD_getPressedKey();
    3540:	0e 94 01 13 	call	0x2602	; 0x2602 <KEYPAD_getPressedKey>
    3544:	8e 8f       	std	Y+30, r24	; 0x1e
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	a6 e9       	ldi	r26, 0x96	; 150
    354c:	b3 e4       	ldi	r27, 0x43	; 67
    354e:	89 8f       	std	Y+25, r24	; 0x19
    3550:	9a 8f       	std	Y+26, r25	; 0x1a
    3552:	ab 8f       	std	Y+27, r26	; 0x1b
    3554:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3556:	69 8d       	ldd	r22, Y+25	; 0x19
    3558:	7a 8d       	ldd	r23, Y+26	; 0x1a
    355a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    355c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	4a ef       	ldi	r20, 0xFA	; 250
    3564:	54 e4       	ldi	r21, 0x44	; 68
    3566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	8d 8b       	std	Y+21, r24	; 0x15
    3570:	9e 8b       	std	Y+22, r25	; 0x16
    3572:	af 8b       	std	Y+23, r26	; 0x17
    3574:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3576:	6d 89       	ldd	r22, Y+21	; 0x15
    3578:	7e 89       	ldd	r23, Y+22	; 0x16
    357a:	8f 89       	ldd	r24, Y+23	; 0x17
    357c:	98 8d       	ldd	r25, Y+24	; 0x18
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	40 e8       	ldi	r20, 0x80	; 128
    3584:	5f e3       	ldi	r21, 0x3F	; 63
    3586:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358a:	88 23       	and	r24, r24
    358c:	2c f4       	brge	.+10     	; 0x3598 <TWO+0x92>
		__ticks = 1;
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	9c 8b       	std	Y+20, r25	; 0x14
    3594:	8b 8b       	std	Y+19, r24	; 0x13
    3596:	3f c0       	rjmp	.+126    	; 0x3616 <TWO+0x110>
	else if (__tmp > 65535)
    3598:	6d 89       	ldd	r22, Y+21	; 0x15
    359a:	7e 89       	ldd	r23, Y+22	; 0x16
    359c:	8f 89       	ldd	r24, Y+23	; 0x17
    359e:	98 8d       	ldd	r25, Y+24	; 0x18
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	3f ef       	ldi	r19, 0xFF	; 255
    35a4:	4f e7       	ldi	r20, 0x7F	; 127
    35a6:	57 e4       	ldi	r21, 0x47	; 71
    35a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ac:	18 16       	cp	r1, r24
    35ae:	4c f5       	brge	.+82     	; 0x3602 <TWO+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b0:	69 8d       	ldd	r22, Y+25	; 0x19
    35b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	40 e2       	ldi	r20, 0x20	; 32
    35be:	51 e4       	ldi	r21, 0x41	; 65
    35c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	bc 01       	movw	r22, r24
    35ca:	cd 01       	movw	r24, r26
    35cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	9c 8b       	std	Y+20, r25	; 0x14
    35d6:	8b 8b       	std	Y+19, r24	; 0x13
    35d8:	0f c0       	rjmp	.+30     	; 0x35f8 <TWO+0xf2>
    35da:	88 ec       	ldi	r24, 0xC8	; 200
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	9a 8b       	std	Y+18, r25	; 0x12
    35e0:	89 8b       	std	Y+17, r24	; 0x11
    35e2:	89 89       	ldd	r24, Y+17	; 0x11
    35e4:	9a 89       	ldd	r25, Y+18	; 0x12
    35e6:	01 97       	sbiw	r24, 0x01	; 1
    35e8:	f1 f7       	brne	.-4      	; 0x35e6 <TWO+0xe0>
    35ea:	9a 8b       	std	Y+18, r25	; 0x12
    35ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ee:	8b 89       	ldd	r24, Y+19	; 0x13
    35f0:	9c 89       	ldd	r25, Y+20	; 0x14
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	9c 8b       	std	Y+20, r25	; 0x14
    35f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f8:	8b 89       	ldd	r24, Y+19	; 0x13
    35fa:	9c 89       	ldd	r25, Y+20	; 0x14
    35fc:	00 97       	sbiw	r24, 0x00	; 0
    35fe:	69 f7       	brne	.-38     	; 0x35da <TWO+0xd4>
    3600:	14 c0       	rjmp	.+40     	; 0x362a <TWO+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3602:	6d 89       	ldd	r22, Y+21	; 0x15
    3604:	7e 89       	ldd	r23, Y+22	; 0x16
    3606:	8f 89       	ldd	r24, Y+23	; 0x17
    3608:	98 8d       	ldd	r25, Y+24	; 0x18
    360a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	9c 8b       	std	Y+20, r25	; 0x14
    3614:	8b 8b       	std	Y+19, r24	; 0x13
    3616:	8b 89       	ldd	r24, Y+19	; 0x13
    3618:	9c 89       	ldd	r25, Y+20	; 0x14
    361a:	98 8b       	std	Y+16, r25	; 0x10
    361c:	8f 87       	std	Y+15, r24	; 0x0f
    361e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3620:	98 89       	ldd	r25, Y+16	; 0x10
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	f1 f7       	brne	.-4      	; 0x3622 <TWO+0x11c>
    3626:	98 8b       	std	Y+16, r25	; 0x10
    3628:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		if(state != '+' &&  state !='-')
    362a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    362c:	8b 32       	cpi	r24, 0x2B	; 43
    362e:	29 f0       	breq	.+10     	; 0x363a <TWO+0x134>
    3630:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3632:	8d 32       	cpi	r24, 0x2D	; 45
    3634:	11 f0       	breq	.+4      	; 0x363a <TWO+0x134>
		{
			state='\0';
    3636:	1e 8e       	std	Y+30, r1	; 0x1e
    3638:	bb c0       	rjmp	.+374    	; 0x37b0 <TWO+0x2aa>
			continue;
		}

		stepONETWO();
    363a:	0e 94 2e 1a 	call	0x345c	; 0x345c <stepONETWO>
		if(stepONE_ack2 == 2)
    363e:	80 91 f8 01 	lds	r24, 0x01F8
    3642:	82 30       	cpi	r24, 0x02	; 2
    3644:	81 f4       	brne	.+32     	; 0x3666 <TWO+0x160>
		{
			LCD_displayStringRowColumn(0,6,"Fault");
    3646:	20 e6       	ldi	r18, 0x60	; 96
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	66 e0       	ldi	r22, 0x06	; 6
    364e:	a9 01       	movw	r20, r18
    3650:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayStringRowColumn>
			g_count_value=0;
    3654:	10 92 f6 01 	sts	0x01F6, r1
			while(g_count_value <= 10){}
    3658:	80 91 f6 01 	lds	r24, 0x01F6
    365c:	8b 30       	cpi	r24, 0x0B	; 11
    365e:	e0 f3       	brcs	.-8      	; 0x3658 <TWO+0x152>
			stepONE_ack2 = 0;
    3660:	10 92 f8 01 	sts	0x01F8, r1
    3664:	a9 c0       	rjmp	.+338    	; 0x37b8 <TWO+0x2b2>
			break;
		}

		UART_sendByte(MC1_READY);
    3666:	80 ef       	ldi	r24, 0xF0	; 240
    3668:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>
		UART_sendByte(state);
    366c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    366e:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendByte>
		st = UART_recieveByte();
    3672:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_recieveByte>
    3676:	8d 8f       	std	Y+29, r24	; 0x1d
		if(st == 1)
    3678:	8d 8d       	ldd	r24, Y+29	; 0x1d
    367a:	81 30       	cpi	r24, 0x01	; 1
    367c:	f9 f4       	brne	.+62     	; 0x36bc <TWO+0x1b6>
		{
			LCD_clearScreen();
    367e:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_clearScreen>
			LCD_displayStringRowColumn(0,2,"Door Opening");
    3682:	2e eb       	ldi	r18, 0xBE	; 190
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	62 e0       	ldi	r22, 0x02	; 2
    368a:	a9 01       	movw	r20, r18
    368c:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayStringRowColumn>
			g_count_value=0;
    3690:	10 92 f6 01 	sts	0x01F6, r1
			while(g_count_value <= 15){}
    3694:	80 91 f6 01 	lds	r24, 0x01F6
    3698:	80 31       	cpi	r24, 0x10	; 16
    369a:	e0 f3       	brcs	.-8      	; 0x3694 <TWO+0x18e>

			LCD_clearScreen();
    369c:	0e 94 f7 12 	call	0x25ee	; 0x25ee <LCD_clearScreen>
			LCD_displayStringRowColumn(0,2,"Door Closing");
    36a0:	2b ec       	ldi	r18, 0xCB	; 203
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	62 e0       	ldi	r22, 0x02	; 2
    36a8:	a9 01       	movw	r20, r18
    36aa:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayStringRowColumn>
			g_count_value=0;
    36ae:	10 92 f6 01 	sts	0x01F6, r1
			while(g_count_value <= 15){}
    36b2:	80 91 f6 01 	lds	r24, 0x01F6
    36b6:	80 31       	cpi	r24, 0x10	; 16
    36b8:	e0 f3       	brcs	.-8      	; 0x36b2 <TWO+0x1ac>
    36ba:	7a c0       	rjmp	.+244    	; 0x37b0 <TWO+0x2aa>

		}

		else if(st == 0)
    36bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36be:	88 23       	and	r24, r24
    36c0:	09 f0       	breq	.+2      	; 0x36c4 <TWO+0x1be>
    36c2:	76 c0       	rjmp	.+236    	; 0x37b0 <TWO+0x2aa>
		{
			stepONE_ack1 =0;
    36c4:	10 92 f7 01 	sts	0x01F7, r1
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	a6 e9       	ldi	r26, 0x96	; 150
    36ce:	b3 e4       	ldi	r27, 0x43	; 67
    36d0:	8b 87       	std	Y+11, r24	; 0x0b
    36d2:	9c 87       	std	Y+12, r25	; 0x0c
    36d4:	ad 87       	std	Y+13, r26	; 0x0d
    36d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36da:	7c 85       	ldd	r23, Y+12	; 0x0c
    36dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36de:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	4a ef       	ldi	r20, 0xFA	; 250
    36e6:	54 e4       	ldi	r21, 0x44	; 68
    36e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	8f 83       	std	Y+7, r24	; 0x07
    36f2:	98 87       	std	Y+8, r25	; 0x08
    36f4:	a9 87       	std	Y+9, r26	; 0x09
    36f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36f8:	6f 81       	ldd	r22, Y+7	; 0x07
    36fa:	78 85       	ldd	r23, Y+8	; 0x08
    36fc:	89 85       	ldd	r24, Y+9	; 0x09
    36fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e8       	ldi	r20, 0x80	; 128
    3706:	5f e3       	ldi	r21, 0x3F	; 63
    3708:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    370c:	88 23       	and	r24, r24
    370e:	2c f4       	brge	.+10     	; 0x371a <TWO+0x214>
		__ticks = 1;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	9e 83       	std	Y+6, r25	; 0x06
    3716:	8d 83       	std	Y+5, r24	; 0x05
    3718:	3f c0       	rjmp	.+126    	; 0x3798 <TWO+0x292>
	else if (__tmp > 65535)
    371a:	6f 81       	ldd	r22, Y+7	; 0x07
    371c:	78 85       	ldd	r23, Y+8	; 0x08
    371e:	89 85       	ldd	r24, Y+9	; 0x09
    3720:	9a 85       	ldd	r25, Y+10	; 0x0a
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	3f ef       	ldi	r19, 0xFF	; 255
    3726:	4f e7       	ldi	r20, 0x7F	; 127
    3728:	57 e4       	ldi	r21, 0x47	; 71
    372a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    372e:	18 16       	cp	r1, r24
    3730:	4c f5       	brge	.+82     	; 0x3784 <TWO+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3732:	6b 85       	ldd	r22, Y+11	; 0x0b
    3734:	7c 85       	ldd	r23, Y+12	; 0x0c
    3736:	8d 85       	ldd	r24, Y+13	; 0x0d
    3738:	9e 85       	ldd	r25, Y+14	; 0x0e
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e2       	ldi	r20, 0x20	; 32
    3740:	51 e4       	ldi	r21, 0x41	; 65
    3742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	bc 01       	movw	r22, r24
    374c:	cd 01       	movw	r24, r26
    374e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	9e 83       	std	Y+6, r25	; 0x06
    3758:	8d 83       	std	Y+5, r24	; 0x05
    375a:	0f c0       	rjmp	.+30     	; 0x377a <TWO+0x274>
    375c:	88 ec       	ldi	r24, 0xC8	; 200
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	9c 83       	std	Y+4, r25	; 0x04
    3762:	8b 83       	std	Y+3, r24	; 0x03
    3764:	8b 81       	ldd	r24, Y+3	; 0x03
    3766:	9c 81       	ldd	r25, Y+4	; 0x04
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	f1 f7       	brne	.-4      	; 0x3768 <TWO+0x262>
    376c:	9c 83       	std	Y+4, r25	; 0x04
    376e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3770:	8d 81       	ldd	r24, Y+5	; 0x05
    3772:	9e 81       	ldd	r25, Y+6	; 0x06
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	9e 83       	std	Y+6, r25	; 0x06
    3778:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377a:	8d 81       	ldd	r24, Y+5	; 0x05
    377c:	9e 81       	ldd	r25, Y+6	; 0x06
    377e:	00 97       	sbiw	r24, 0x00	; 0
    3780:	69 f7       	brne	.-38     	; 0x375c <TWO+0x256>
    3782:	14 c0       	rjmp	.+40     	; 0x37ac <TWO+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3784:	6f 81       	ldd	r22, Y+7	; 0x07
    3786:	78 85       	ldd	r23, Y+8	; 0x08
    3788:	89 85       	ldd	r24, Y+9	; 0x09
    378a:	9a 85       	ldd	r25, Y+10	; 0x0a
    378c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	9e 83       	std	Y+6, r25	; 0x06
    3796:	8d 83       	std	Y+5, r24	; 0x05
    3798:	8d 81       	ldd	r24, Y+5	; 0x05
    379a:	9e 81       	ldd	r25, Y+6	; 0x06
    379c:	9a 83       	std	Y+2, r25	; 0x02
    379e:	89 83       	std	Y+1, r24	; 0x01
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	f1 f7       	brne	.-4      	; 0x37a4 <TWO+0x29e>
    37a8:	9a 83       	std	Y+2, r25	; 0x02
    37aa:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			stepONE();
    37ac:	0e 94 b6 19 	call	0x336c	; 0x336c <stepONE>
void TWO(void)
{
	char state='\0';
	uint8 st=0;

	while(state =='\0')
    37b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37b2:	88 23       	and	r24, r24
    37b4:	09 f4       	brne	.+2      	; 0x37b8 <TWO+0x2b2>
    37b6:	b4 ce       	rjmp	.-664    	; 0x3520 <TWO+0x1a>
			_delay_ms(300);
			stepONE();
		}
	}

}
    37b8:	6e 96       	adiw	r28, 0x1e	; 30
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	f8 94       	cli
    37be:	de bf       	out	0x3e, r29	; 62
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	cd bf       	out	0x3d, r28	; 61
    37c4:	cf 91       	pop	r28
    37c6:	df 91       	pop	r29
    37c8:	08 95       	ret

000037ca <TIME_delay>:
/*
 * Description:
 *             this function is a call back for timer 0
 */
void TIME_delay(void)
{
    37ca:	df 93       	push	r29
    37cc:	cf 93       	push	r28
    37ce:	cd b7       	in	r28, 0x3d	; 61
    37d0:	de b7       	in	r29, 0x3e	; 62

	/* over flow every 2ms*/
	static volatile uint16 count_value = 0;
	count_value++;
    37d2:	80 91 fb 01 	lds	r24, 0x01FB
    37d6:	90 91 fc 01 	lds	r25, 0x01FC
    37da:	01 96       	adiw	r24, 0x01	; 1
    37dc:	90 93 fc 01 	sts	0x01FC, r25
    37e0:	80 93 fb 01 	sts	0x01FB, r24
	if(count_value >= 4000)
    37e4:	80 91 fb 01 	lds	r24, 0x01FB
    37e8:	90 91 fc 01 	lds	r25, 0x01FC
    37ec:	2f e0       	ldi	r18, 0x0F	; 15
    37ee:	80 3a       	cpi	r24, 0xA0	; 160
    37f0:	92 07       	cpc	r25, r18
    37f2:	48 f0       	brcs	.+18     	; 0x3806 <TIME_delay+0x3c>
	{
		g_count_value++;
    37f4:	80 91 f6 01 	lds	r24, 0x01F6
    37f8:	8f 5f       	subi	r24, 0xFF	; 255
    37fa:	80 93 f6 01 	sts	0x01F6, r24
		count_value = 0;
    37fe:	10 92 fc 01 	sts	0x01FC, r1
    3802:	10 92 fb 01 	sts	0x01FB, r1
	}

}
    3806:	cf 91       	pop	r28
    3808:	df 91       	pop	r29
    380a:	08 95       	ret

0000380c <__udivmodsi4>:
    380c:	a1 e2       	ldi	r26, 0x21	; 33
    380e:	1a 2e       	mov	r1, r26
    3810:	aa 1b       	sub	r26, r26
    3812:	bb 1b       	sub	r27, r27
    3814:	fd 01       	movw	r30, r26
    3816:	0d c0       	rjmp	.+26     	; 0x3832 <__udivmodsi4_ep>

00003818 <__udivmodsi4_loop>:
    3818:	aa 1f       	adc	r26, r26
    381a:	bb 1f       	adc	r27, r27
    381c:	ee 1f       	adc	r30, r30
    381e:	ff 1f       	adc	r31, r31
    3820:	a2 17       	cp	r26, r18
    3822:	b3 07       	cpc	r27, r19
    3824:	e4 07       	cpc	r30, r20
    3826:	f5 07       	cpc	r31, r21
    3828:	20 f0       	brcs	.+8      	; 0x3832 <__udivmodsi4_ep>
    382a:	a2 1b       	sub	r26, r18
    382c:	b3 0b       	sbc	r27, r19
    382e:	e4 0b       	sbc	r30, r20
    3830:	f5 0b       	sbc	r31, r21

00003832 <__udivmodsi4_ep>:
    3832:	66 1f       	adc	r22, r22
    3834:	77 1f       	adc	r23, r23
    3836:	88 1f       	adc	r24, r24
    3838:	99 1f       	adc	r25, r25
    383a:	1a 94       	dec	r1
    383c:	69 f7       	brne	.-38     	; 0x3818 <__udivmodsi4_loop>
    383e:	60 95       	com	r22
    3840:	70 95       	com	r23
    3842:	80 95       	com	r24
    3844:	90 95       	com	r25
    3846:	9b 01       	movw	r18, r22
    3848:	ac 01       	movw	r20, r24
    384a:	bd 01       	movw	r22, r26
    384c:	cf 01       	movw	r24, r30
    384e:	08 95       	ret

00003850 <__prologue_saves__>:
    3850:	2f 92       	push	r2
    3852:	3f 92       	push	r3
    3854:	4f 92       	push	r4
    3856:	5f 92       	push	r5
    3858:	6f 92       	push	r6
    385a:	7f 92       	push	r7
    385c:	8f 92       	push	r8
    385e:	9f 92       	push	r9
    3860:	af 92       	push	r10
    3862:	bf 92       	push	r11
    3864:	cf 92       	push	r12
    3866:	df 92       	push	r13
    3868:	ef 92       	push	r14
    386a:	ff 92       	push	r15
    386c:	0f 93       	push	r16
    386e:	1f 93       	push	r17
    3870:	cf 93       	push	r28
    3872:	df 93       	push	r29
    3874:	cd b7       	in	r28, 0x3d	; 61
    3876:	de b7       	in	r29, 0x3e	; 62
    3878:	ca 1b       	sub	r28, r26
    387a:	db 0b       	sbc	r29, r27
    387c:	0f b6       	in	r0, 0x3f	; 63
    387e:	f8 94       	cli
    3880:	de bf       	out	0x3e, r29	; 62
    3882:	0f be       	out	0x3f, r0	; 63
    3884:	cd bf       	out	0x3d, r28	; 61
    3886:	09 94       	ijmp

00003888 <__epilogue_restores__>:
    3888:	2a 88       	ldd	r2, Y+18	; 0x12
    388a:	39 88       	ldd	r3, Y+17	; 0x11
    388c:	48 88       	ldd	r4, Y+16	; 0x10
    388e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3890:	6e 84       	ldd	r6, Y+14	; 0x0e
    3892:	7d 84       	ldd	r7, Y+13	; 0x0d
    3894:	8c 84       	ldd	r8, Y+12	; 0x0c
    3896:	9b 84       	ldd	r9, Y+11	; 0x0b
    3898:	aa 84       	ldd	r10, Y+10	; 0x0a
    389a:	b9 84       	ldd	r11, Y+9	; 0x09
    389c:	c8 84       	ldd	r12, Y+8	; 0x08
    389e:	df 80       	ldd	r13, Y+7	; 0x07
    38a0:	ee 80       	ldd	r14, Y+6	; 0x06
    38a2:	fd 80       	ldd	r15, Y+5	; 0x05
    38a4:	0c 81       	ldd	r16, Y+4	; 0x04
    38a6:	1b 81       	ldd	r17, Y+3	; 0x03
    38a8:	aa 81       	ldd	r26, Y+2	; 0x02
    38aa:	b9 81       	ldd	r27, Y+1	; 0x01
    38ac:	ce 0f       	add	r28, r30
    38ae:	d1 1d       	adc	r29, r1
    38b0:	0f b6       	in	r0, 0x3f	; 63
    38b2:	f8 94       	cli
    38b4:	de bf       	out	0x3e, r29	; 62
    38b6:	0f be       	out	0x3f, r0	; 63
    38b8:	cd bf       	out	0x3d, r28	; 61
    38ba:	ed 01       	movw	r28, r26
    38bc:	08 95       	ret

000038be <itoa>:
    38be:	fb 01       	movw	r30, r22
    38c0:	9f 01       	movw	r18, r30
    38c2:	e8 94       	clt
    38c4:	42 30       	cpi	r20, 0x02	; 2
    38c6:	c4 f0       	brlt	.+48     	; 0x38f8 <itoa+0x3a>
    38c8:	45 32       	cpi	r20, 0x25	; 37
    38ca:	b4 f4       	brge	.+44     	; 0x38f8 <itoa+0x3a>
    38cc:	4a 30       	cpi	r20, 0x0A	; 10
    38ce:	29 f4       	brne	.+10     	; 0x38da <itoa+0x1c>
    38d0:	97 fb       	bst	r25, 7
    38d2:	1e f4       	brtc	.+6      	; 0x38da <itoa+0x1c>
    38d4:	90 95       	com	r25
    38d6:	81 95       	neg	r24
    38d8:	9f 4f       	sbci	r25, 0xFF	; 255
    38da:	64 2f       	mov	r22, r20
    38dc:	77 27       	eor	r23, r23
    38de:	0e 94 90 1c 	call	0x3920	; 0x3920 <__udivmodhi4>
    38e2:	80 5d       	subi	r24, 0xD0	; 208
    38e4:	8a 33       	cpi	r24, 0x3A	; 58
    38e6:	0c f0       	brlt	.+2      	; 0x38ea <itoa+0x2c>
    38e8:	89 5d       	subi	r24, 0xD9	; 217
    38ea:	81 93       	st	Z+, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	a1 f7       	brne	.-24     	; 0x38da <itoa+0x1c>
    38f2:	16 f4       	brtc	.+4      	; 0x38f8 <itoa+0x3a>
    38f4:	5d e2       	ldi	r21, 0x2D	; 45
    38f6:	51 93       	st	Z+, r21
    38f8:	10 82       	st	Z, r1
    38fa:	c9 01       	movw	r24, r18
    38fc:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <strrev>

00003900 <strrev>:
    3900:	dc 01       	movw	r26, r24
    3902:	fc 01       	movw	r30, r24
    3904:	67 2f       	mov	r22, r23
    3906:	71 91       	ld	r23, Z+
    3908:	77 23       	and	r23, r23
    390a:	e1 f7       	brne	.-8      	; 0x3904 <strrev+0x4>
    390c:	32 97       	sbiw	r30, 0x02	; 2
    390e:	04 c0       	rjmp	.+8      	; 0x3918 <strrev+0x18>
    3910:	7c 91       	ld	r23, X
    3912:	6d 93       	st	X+, r22
    3914:	70 83       	st	Z, r23
    3916:	62 91       	ld	r22, -Z
    3918:	ae 17       	cp	r26, r30
    391a:	bf 07       	cpc	r27, r31
    391c:	c8 f3       	brcs	.-14     	; 0x3910 <strrev+0x10>
    391e:	08 95       	ret

00003920 <__udivmodhi4>:
    3920:	aa 1b       	sub	r26, r26
    3922:	bb 1b       	sub	r27, r27
    3924:	51 e1       	ldi	r21, 0x11	; 17
    3926:	07 c0       	rjmp	.+14     	; 0x3936 <__udivmodhi4_ep>

00003928 <__udivmodhi4_loop>:
    3928:	aa 1f       	adc	r26, r26
    392a:	bb 1f       	adc	r27, r27
    392c:	a6 17       	cp	r26, r22
    392e:	b7 07       	cpc	r27, r23
    3930:	10 f0       	brcs	.+4      	; 0x3936 <__udivmodhi4_ep>
    3932:	a6 1b       	sub	r26, r22
    3934:	b7 0b       	sbc	r27, r23

00003936 <__udivmodhi4_ep>:
    3936:	88 1f       	adc	r24, r24
    3938:	99 1f       	adc	r25, r25
    393a:	5a 95       	dec	r21
    393c:	a9 f7       	brne	.-22     	; 0x3928 <__udivmodhi4_loop>
    393e:	80 95       	com	r24
    3940:	90 95       	com	r25
    3942:	bc 01       	movw	r22, r24
    3944:	cd 01       	movw	r24, r26
    3946:	08 95       	ret

00003948 <_exit>:
    3948:	f8 94       	cli

0000394a <__stop_program>:
    394a:	ff cf       	rjmp	.-2      	; 0x394a <__stop_program>
