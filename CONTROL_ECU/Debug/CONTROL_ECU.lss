
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000038d0  00003964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800178  00800178  00003a7c  2**0
                  ALLOC
  3 .stab         00003a80  00000000  00000000  00003a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002268  00000000  00000000  000074fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00009764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00009924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00009b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000c14a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000d618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000e924  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000eb04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000ee0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f825  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__vector_3>
      10:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_6>
      1c:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__vector_7>
      20:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__vector_8>
      24:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 18 	call	0x3002	; 0x3002 <main>
      8a:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 53 1c 	jmp	0x38a6	; 0x38a6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 53 1c 	jmp	0x38a6	; 0x38a6 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <__vector_11>:
/*******************************************************************************
*                      ISR Definitions                                  *
*******************************************************************************/
#if(UART_INT_RX == 1)
ISR(USART_RXC_vect)
{
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	8f 93       	push	r24
     ef6:	ef 93       	push	r30
     ef8:	ff 93       	push	r31
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
	Rx = 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	80 93 79 01 	sts	0x0179, r24
	g_valueRx = UDR ;
     f08:	ec e2       	ldi	r30, 0x2C	; 44
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	80 93 78 01 	sts	0x0178, r24
}
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	ff 91       	pop	r31
     f18:	ef 91       	pop	r30
     f1a:	8f 91       	pop	r24
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	0f 90       	pop	r0
     f22:	1f 90       	pop	r1
     f24:	18 95       	reti

00000f26 <UART_init>:
* 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
* 2. Enable the UART.
* 3. Setup the UART baud rate.
*/
void UART_init(const UART_Init *s_confg_ptr)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <UART_init+0x6>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <UART_init+0x8>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	9c 83       	std	Y+4, r25	; 0x04
     f34:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     f36:	1a 82       	std	Y+2, r1	; 0x02
     f38:	19 82       	std	Y+1, r1	; 0x01

	/************************** UCSRA Description ***************************/
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     f3a:	eb e2       	ldi	r30, 0x2B	; 43
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
     f42:	ea e2       	ldi	r30, 0x2A	; 42
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	88 e1       	ldi	r24, 0x18	; 24
     f48:	80 83       	st	Z, r24
	/************************** *s_baudRate_ptr Description **************************
	* udrie : Disable/Enable USART Data Register Empty Interrupt
	* rxcie : USART RX Complete Interrupt Enable/Disable
	*********************************************************************************/
	UCSRB= (UCSRB & 0x7f)|((s_confg_ptr->rxcie)<<RXCIE);
     f4a:	aa e2       	ldi	r26, 0x2A	; 42
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	ea e2       	ldi	r30, 0x2A	; 42
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	28 2f       	mov	r18, r24
     f56:	2f 77       	andi	r18, 0x7F	; 127
     f58:	eb 81       	ldd	r30, Y+3	; 0x03
     f5a:	fc 81       	ldd	r31, Y+4	; 0x04
     f5c:	84 81       	ldd	r24, Z+4	; 0x04
     f5e:	82 95       	swap	r24
     f60:	8f 70       	andi	r24, 0x0F	; 15
     f62:	81 70       	andi	r24, 0x01	; 1
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	96 95       	lsr	r25
     f6a:	98 2f       	mov	r25, r24
     f6c:	88 27       	eor	r24, r24
     f6e:	97 95       	ror	r25
     f70:	87 95       	ror	r24
     f72:	82 2b       	or	r24, r18
     f74:	8c 93       	st	X, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
     f76:	e0 e4       	ldi	r30, 0x40	; 64
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 e8       	ldi	r24, 0x80	; 128
     f7c:	80 83       	st	Z, r24
	* baud_rate  : baud_rate Value
	* usbs       : number of stop bit
	* upm        : parity bit
	* UCSZ1:0    : For 8/7/6/5 -bit data mode
	*********************************************************************************/
	UCSRC = (UCSRC & 0xc1) | ((s_confg_ptr->upm)<<UPM0)\
     f7e:	a0 e4       	ldi	r26, 0x40	; 64
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e0 e4       	ldi	r30, 0x40	; 64
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	28 2f       	mov	r18, r24
     f8a:	21 7c       	andi	r18, 0xC1	; 193
     f8c:	eb 81       	ldd	r30, Y+3	; 0x03
     f8e:	fc 81       	ldd	r31, Y+4	; 0x04
     f90:	84 81       	ldd	r24, Z+4	; 0x04
     f92:	83 70       	andi	r24, 0x03	; 3
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	82 95       	swap	r24
     f9a:	92 95       	swap	r25
     f9c:	90 7f       	andi	r25, 0xF0	; 240
     f9e:	98 27       	eor	r25, r24
     fa0:	80 7f       	andi	r24, 0xF0	; 240
     fa2:	98 27       	eor	r25, r24
     fa4:	28 2b       	or	r18, r24
     fa6:	eb 81       	ldd	r30, Y+3	; 0x03
     fa8:	fc 81       	ldd	r31, Y+4	; 0x04
     faa:	84 81       	ldd	r24, Z+4	; 0x04
     fac:	82 95       	swap	r24
     fae:	86 95       	lsr	r24
     fb0:	87 70       	andi	r24, 0x07	; 7
     fb2:	81 70       	andi	r24, 0x01	; 1
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	28 2b       	or	r18, r24
     fc6:	eb 81       	ldd	r30, Y+3	; 0x03
     fc8:	fc 81       	ldd	r31, Y+4	; 0x04
     fca:	84 81       	ldd	r24, Z+4	; 0x04
     fcc:	86 95       	lsr	r24
     fce:	86 95       	lsr	r24
     fd0:	83 70       	andi	r24, 0x03	; 3
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	82 2b       	or	r24, r18
     fdc:	8c 93       	st	X, r24
			| ((s_confg_ptr->usbs)<<USBS) | ((s_confg_ptr->ucsz)<<UCSZ0);
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((s_confg_ptr->baud_rate) * 8UL))) - 1);
     fde:	eb 81       	ldd	r30, Y+3	; 0x03
     fe0:	fc 81       	ldd	r31, Y+4	; 0x04
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	a2 81       	ldd	r26, Z+2	; 0x02
     fe8:	b3 81       	ldd	r27, Z+3	; 0x03
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	aa 1f       	adc	r26, r26
     ff0:	bb 1f       	adc	r27, r27
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	aa 1f       	adc	r26, r26
     ff8:	bb 1f       	adc	r27, r27
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	aa 1f       	adc	r26, r26
    1000:	bb 1f       	adc	r27, r27
    1002:	9c 01       	movw	r18, r24
    1004:	ad 01       	movw	r20, r26
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	92 e1       	ldi	r25, 0x12	; 18
    100a:	aa e7       	ldi	r26, 0x7A	; 122
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	0e 94 0d 1c 	call	0x381a	; 0x381a <__udivmodsi4>
    1016:	da 01       	movw	r26, r20
    1018:	c9 01       	movw	r24, r18
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1020:	e0 e4       	ldi	r30, 0x40	; 64
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	89 2f       	mov	r24, r25
    102a:	99 27       	eor	r25, r25
    102c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    102e:	e9 e2       	ldi	r30, 0x29	; 41
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	80 83       	st	Z, r24
}
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <UART_sendByte>:
/*
* Description :
* Functional responsible for send byte to another UART device.
*/
void UART_sendByte(const uint8 data)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	0f 92       	push	r0
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1050:	eb e2       	ldi	r30, 0x2B	; 43
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	80 72       	andi	r24, 0x20	; 32
    105c:	90 70       	andi	r25, 0x00	; 0
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	b9 f3       	breq	.-18     	; 0x1050 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1062:	ec e2       	ldi	r30, 0x2C	; 44
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <UART_recieveByte>:
/*
* Description :
* Functional responsible for receive byte from another UART device by interrupt.
*/
uint8 UART_recieveByte(void)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	while(Rx == 0){}
    107a:	80 91 79 01 	lds	r24, 0x0179
    107e:	88 23       	and	r24, r24
    1080:	e1 f3       	breq	.-8      	; 0x107a <UART_recieveByte+0x8>
	Rx=0;
    1082:	10 92 79 01 	sts	0x0179, r1
	return g_valueRx;
    1086:	80 91 78 01 	lds	r24, 0x0178
}
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <UART_sendString>:
/*
* Description :
* Send the required string through UART to the other UART device.
*/
void UART_sendString(const uint8 *Str)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <UART_sendString+0x6>
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	9b 83       	std	Y+3, r25	; 0x03
    109e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    10a0:	19 82       	std	Y+1, r1	; 0x01
    10a2:	0e c0       	rjmp	.+28     	; 0x10c0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	9b 81       	ldd	r25, Y+3	; 0x03
    10ae:	fc 01       	movw	r30, r24
    10b0:	e2 0f       	add	r30, r18
    10b2:	f3 1f       	adc	r31, r19
    10b4:	80 81       	ld	r24, Z
    10b6:	0e 94 22 08 	call	0x1044	; 0x1044 <UART_sendByte>
		i++;
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	8f 5f       	subi	r24, 0xFF	; 255
    10be:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	fc 01       	movw	r30, r24
    10cc:	e2 0f       	add	r30, r18
    10ce:	f3 1f       	adc	r31, r19
    10d0:	80 81       	ld	r24, Z
    10d2:	88 23       	and	r24, r24
    10d4:	39 f7       	brne	.-50     	; 0x10a4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <UART_receiveString>:
/*
* Description :
* Receive the required string until the '#' symbol through UART from the other UART device.
*/
void UART_receiveString(uint8 *Str)
{
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <UART_receiveString+0xa>
    10ec:	0f 92       	push	r0
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	9b 83       	std	Y+3, r25	; 0x03
    10f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    10f6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	9b 81       	ldd	r25, Y+3	; 0x03
    1102:	8c 01       	movw	r16, r24
    1104:	02 0f       	add	r16, r18
    1106:	13 1f       	adc	r17, r19
    1108:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    110c:	f8 01       	movw	r30, r16
    110e:	80 83       	st	Z, r24
    1110:	0f c0       	rjmp	.+30     	; 0x1130 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	8f 5f       	subi	r24, 0xFF	; 255
    1116:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	9b 81       	ldd	r25, Y+3	; 0x03
    1122:	8c 01       	movw	r16, r24
    1124:	02 0f       	add	r16, r18
    1126:	13 1f       	adc	r17, r19
    1128:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    112c:	f8 01       	movw	r30, r16
    112e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	9b 81       	ldd	r25, Y+3	; 0x03
    113a:	fc 01       	movw	r30, r24
    113c:	e2 0f       	add	r30, r18
    113e:	f3 1f       	adc	r31, r19
    1140:	80 81       	ld	r24, Z
    1142:	83 32       	cpi	r24, 0x23	; 35
    1144:	31 f7       	brne	.-52     	; 0x1112 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	9b 81       	ldd	r25, Y+3	; 0x03
    1150:	fc 01       	movw	r30, r24
    1152:	e2 0f       	add	r30, r18
    1154:	f3 1f       	adc	r31, r19
    1156:	10 82       	st	Z, r1
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	08 95       	ret

00001168 <TWI_init>:

/*******************************************************************************
 *                      Function Definition                                    *
 *******************************************************************************/
void TWI_init(I2C_Config *s_config_ptr)
{
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <TWI_init+0x12>
    117a:	00 d0       	rcall	.+0      	; 0x117c <TWI_init+0x14>
    117c:	0f 92       	push	r0
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	9b 83       	std	Y+3, r25	; 0x03
    1184:	8a 83       	std	Y+2, r24	; 0x02
    /* Choose Bit Rate : ?? kbps */
	uint8 pre =1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	89 83       	std	Y+1, r24	; 0x01
	TWSR = ((s_config_ptr->I2C_pre)<<TWPS0);
    118a:	a1 e2       	ldi	r26, 0x21	; 33
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	ea 81       	ldd	r30, Y+2	; 0x02
    1190:	fb 81       	ldd	r31, Y+3	; 0x03
    1192:	83 81       	ldd	r24, Z+3	; 0x03
    1194:	82 95       	swap	r24
    1196:	8f 70       	andi	r24, 0x0F	; 15
    1198:	83 70       	andi	r24, 0x03	; 3
    119a:	8c 93       	st	X, r24

	switch(s_config_ptr->I2C_pre)
    119c:	ea 81       	ldd	r30, Y+2	; 0x02
    119e:	fb 81       	ldd	r31, Y+3	; 0x03
    11a0:	83 81       	ldd	r24, Z+3	; 0x03
    11a2:	82 95       	swap	r24
    11a4:	8f 70       	andi	r24, 0x0F	; 15
    11a6:	83 70       	andi	r24, 0x03	; 3
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3d 83       	std	Y+5, r19	; 0x05
    11ae:	2c 83       	std	Y+4, r18	; 0x04
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	91 05       	cpc	r25, r1
    11b8:	c9 f0       	breq	.+50     	; 0x11ec <TWI_init+0x84>
    11ba:	ec 81       	ldd	r30, Y+4	; 0x04
    11bc:	fd 81       	ldd	r31, Y+5	; 0x05
    11be:	e2 30       	cpi	r30, 0x02	; 2
    11c0:	f1 05       	cpc	r31, r1
    11c2:	34 f4       	brge	.+12     	; 0x11d0 <TWI_init+0x68>
    11c4:	2c 81       	ldd	r18, Y+4	; 0x04
    11c6:	3d 81       	ldd	r19, Y+5	; 0x05
    11c8:	21 15       	cp	r18, r1
    11ca:	31 05       	cpc	r19, r1
    11cc:	61 f0       	breq	.+24     	; 0x11e6 <TWI_init+0x7e>
    11ce:	17 c0       	rjmp	.+46     	; 0x11fe <TWI_init+0x96>
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	9d 81       	ldd	r25, Y+5	; 0x05
    11d4:	82 30       	cpi	r24, 0x02	; 2
    11d6:	91 05       	cpc	r25, r1
    11d8:	61 f0       	breq	.+24     	; 0x11f2 <TWI_init+0x8a>
    11da:	ec 81       	ldd	r30, Y+4	; 0x04
    11dc:	fd 81       	ldd	r31, Y+5	; 0x05
    11de:	e3 30       	cpi	r30, 0x03	; 3
    11e0:	f1 05       	cpc	r31, r1
    11e2:	51 f0       	breq	.+20     	; 0x11f8 <TWI_init+0x90>
    11e4:	0c c0       	rjmp	.+24     	; 0x11fe <TWI_init+0x96>
	{
	case 0: pre=1;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	0b c0       	rjmp	.+22     	; 0x1202 <TWI_init+0x9a>
		break;
	case 1: pre=4;
    11ec:	84 e0       	ldi	r24, 0x04	; 4
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	08 c0       	rjmp	.+16     	; 0x1202 <TWI_init+0x9a>
	    break;
	case 2: pre=16;
    11f2:	80 e1       	ldi	r24, 0x10	; 16
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	05 c0       	rjmp	.+10     	; 0x1202 <TWI_init+0x9a>
	    break;
	case 3: pre=64;
    11f8:	80 e4       	ldi	r24, 0x40	; 64
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <TWI_init+0x9a>
	    break;
	default : pre=1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	89 83       	std	Y+1, r24	; 0x01
	}

	TWBR = (uint8)((( (float)F_CPU/(s_config_ptr->I2C_scl))-16)/(2* pre));
    1202:	cc 24       	eor	r12, r12
    1204:	dd 24       	eor	r13, r13
    1206:	68 94       	set
    1208:	c5 f8       	bld	r12, 5
    120a:	ea 81       	ldd	r30, Y+2	; 0x02
    120c:	fb 81       	ldd	r31, Y+3	; 0x03
    120e:	80 81       	ld	r24, Z
    1210:	91 81       	ldd	r25, Z+1	; 0x01
    1212:	22 81       	ldd	r18, Z+2	; 0x02
    1214:	a2 2f       	mov	r26, r18
    1216:	af 71       	andi	r26, 0x1F	; 31
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1222:	9b 01       	movw	r18, r22
    1224:	ac 01       	movw	r20, r24
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	74 e2       	ldi	r23, 0x24	; 36
    122a:	84 ef       	ldi	r24, 0xF4	; 244
    122c:	9a e4       	ldi	r25, 0x4A	; 74
    122e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e8       	ldi	r20, 0x80	; 128
    1240:	51 e4       	ldi	r21, 0x41	; 65
    1242:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	7c 01       	movw	r14, r24
    124c:	8d 01       	movw	r16, r26
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	aa 27       	eor	r26, r26
    125a:	97 fd       	sbrc	r25, 7
    125c:	a0 95       	com	r26
    125e:	ba 2f       	mov	r27, r26
    1260:	bc 01       	movw	r22, r24
    1262:	cd 01       	movw	r24, r26
    1264:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1268:	9b 01       	movw	r18, r22
    126a:	ac 01       	movw	r20, r24
    126c:	c8 01       	movw	r24, r16
    126e:	b7 01       	movw	r22, r14
    1270:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	f6 01       	movw	r30, r12
    1286:	80 83       	st	Z, r24
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = ((s_config_ptr->I2C_address)<<1) ;   // my address
    1288:	a2 e2       	ldi	r26, 0x22	; 34
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ea 81       	ldd	r30, Y+2	; 0x02
    128e:	fb 81       	ldd	r31, Y+3	; 0x03
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	98 2f       	mov	r25, r24
    1294:	92 95       	swap	r25
    1296:	96 95       	lsr	r25
    1298:	97 70       	andi	r25, 0x07	; 7
    129a:	83 81       	ldd	r24, Z+3	; 0x03
    129c:	8f 70       	andi	r24, 0x0F	; 15
    129e:	88 0f       	add	r24, r24
    12a0:	88 0f       	add	r24, r24
    12a2:	88 0f       	add	r24, r24
    12a4:	89 2b       	or	r24, r25
    12a6:	88 0f       	add	r24, r24
    12a8:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN) ;                          /* enable TWI  */
    12aa:	e6 e5       	ldi	r30, 0x56	; 86
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	84 e0       	ldi	r24, 0x04	; 4
    12b0:	80 83       	st	Z, r24
}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	08 95       	ret

000012ce <TWI_start>:

void TWI_start(void)
{
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (TWCR & 0x01) | (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    12d6:	a6 e5       	ldi	r26, 0x56	; 86
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e6 e5       	ldi	r30, 0x56	; 86
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	81 70       	andi	r24, 0x01	; 1
    12e2:	84 6a       	ori	r24, 0xA4	; 164
    12e4:	8c 93       	st	X, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    12e6:	e6 e5       	ldi	r30, 0x56	; 86
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	88 23       	and	r24, r24
    12ee:	dc f7       	brge	.-10     	; 0x12e6 <TWI_start+0x18>
}
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <TWI_stop>:

void TWI_stop(void)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */

    TWCR = (TWCR & 0x01) | (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    12fe:	a6 e5       	ldi	r26, 0x56	; 86
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e6 e5       	ldi	r30, 0x56	; 86
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	81 70       	andi	r24, 0x01	; 1
    130a:	84 69       	ori	r24, 0x94	; 148
    130c:	8c 93       	st	X, r24
}
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	0f 92       	push	r0
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1320:	e3 e2       	ldi	r30, 0x23	; 35
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (TWCR & 0x01) | (1 << TWINT) | (1 << TWEN);
    1328:	a6 e5       	ldi	r26, 0x56	; 86
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e6 e5       	ldi	r30, 0x56	; 86
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	81 70       	andi	r24, 0x01	; 1
    1334:	84 68       	ori	r24, 0x84	; 132
    1336:	8c 93       	st	X, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1338:	e6 e5       	ldi	r30, 0x56	; 86
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	88 23       	and	r24, r24
    1340:	dc f7       	brge	.-10     	; 0x1338 <TWI_writeByte+0x24>
}
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (TWCR & 0x01) | (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1352:	a6 e5       	ldi	r26, 0x56	; 86
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e6 e5       	ldi	r30, 0x56	; 86
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	81 70       	andi	r24, 0x01	; 1
    135e:	84 6c       	ori	r24, 0xC4	; 196
    1360:	8c 93       	st	X, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1362:	e6 e5       	ldi	r30, 0x56	; 86
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	88 23       	and	r24, r24
    136a:	dc f7       	brge	.-10     	; 0x1362 <TWI_readByteWithACK+0x18>
    /* Read Data */
    return TWDR;
    136c:	e3 e2       	ldi	r30, 0x23	; 35
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (TWCR & 0x01) | (1 << TWINT) | (1 << TWEN);
    1380:	a6 e5       	ldi	r26, 0x56	; 86
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e6 e5       	ldi	r30, 0x56	; 86
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	81 70       	andi	r24, 0x01	; 1
    138c:	84 68       	ori	r24, 0x84	; 132
    138e:	8c 93       	st	X, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1390:	e6 e5       	ldi	r30, 0x56	; 86
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	88 23       	and	r24, r24
    1398:	dc f7       	brge	.-10     	; 0x1390 <TWI_readByteWithNACK+0x18>
    /* Read Data */
    return TWDR;
    139a:	e3 e2       	ldi	r30, 0x23	; 35
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z

}
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	0f 92       	push	r0
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    13b0:	e1 e2       	ldi	r30, 0x21	; 33
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	88 7f       	andi	r24, 0xF8	; 248
    13b8:	89 83       	std	Y+1, r24	; 0x01
    return status;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    13bc:	0f 90       	pop	r0
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <__vector_19>:
 *                      ISR Definition                                         *
 *******************************************************************************/

/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	11 24       	eor	r1, r1
    13ce:	2f 93       	push	r18
    13d0:	3f 93       	push	r19
    13d2:	4f 93       	push	r20
    13d4:	5f 93       	push	r21
    13d6:	6f 93       	push	r22
    13d8:	7f 93       	push	r23
    13da:	8f 93       	push	r24
    13dc:	9f 93       	push	r25
    13de:	af 93       	push	r26
    13e0:	bf 93       	push	r27
    13e2:	ef 93       	push	r30
    13e4:	ff 93       	push	r31
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_callBack != NULL_PTR)
    13ee:	80 91 80 01 	lds	r24, 0x0180
    13f2:	90 91 81 01 	lds	r25, 0x0181
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	41 f0       	breq	.+16     	; 0x140a <__vector_19+0x46>
	{
		TCNT0 = 0;
    13fa:	e2 e5       	ldi	r30, 0x52	; 82
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	10 82       	st	Z, r1
		(*TIMER0_callBack)();
    1400:	e0 91 80 01 	lds	r30, 0x0180
    1404:	f0 91 81 01 	lds	r31, 0x0181
    1408:	09 95       	icall
	}
}
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	ff 91       	pop	r31
    1410:	ef 91       	pop	r30
    1412:	bf 91       	pop	r27
    1414:	af 91       	pop	r26
    1416:	9f 91       	pop	r25
    1418:	8f 91       	pop	r24
    141a:	7f 91       	pop	r23
    141c:	6f 91       	pop	r22
    141e:	5f 91       	pop	r21
    1420:	4f 91       	pop	r20
    1422:	3f 91       	pop	r19
    1424:	2f 91       	pop	r18
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	0f 90       	pop	r0
    142c:	1f 90       	pop	r1
    142e:	18 95       	reti

00001430 <__vector_6>:



/* Interrupt Service Routine for timer1A compare mode ***************************************/
ISR(TIMER1_COMPA_vect)
{
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1A_callBack != NULL_PTR)
    145a:	80 91 84 01 	lds	r24, 0x0184
    145e:	90 91 85 01 	lds	r25, 0x0185
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	49 f0       	breq	.+18     	; 0x1478 <__vector_6+0x48>
	{
		TCNT1 = 0;
    1466:	ec e4       	ldi	r30, 0x4C	; 76
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	11 82       	std	Z+1, r1	; 0x01
    146c:	10 82       	st	Z, r1
		(*TIMER1A_callBack)();
    146e:	e0 91 84 01 	lds	r30, 0x0184
    1472:	f0 91 85 01 	lds	r31, 0x0185
    1476:	09 95       	icall
	}
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	ff 91       	pop	r31
    147e:	ef 91       	pop	r30
    1480:	bf 91       	pop	r27
    1482:	af 91       	pop	r26
    1484:	9f 91       	pop	r25
    1486:	8f 91       	pop	r24
    1488:	7f 91       	pop	r23
    148a:	6f 91       	pop	r22
    148c:	5f 91       	pop	r21
    148e:	4f 91       	pop	r20
    1490:	3f 91       	pop	r19
    1492:	2f 91       	pop	r18
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0
    149a:	1f 90       	pop	r1
    149c:	18 95       	reti

0000149e <__vector_7>:

/* Interrupt Service Routine for timer1B compare mode */
ISR(TIMER1_COMPB_vect)
{
    149e:	1f 92       	push	r1
    14a0:	0f 92       	push	r0
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	0f 92       	push	r0
    14a6:	11 24       	eor	r1, r1
    14a8:	2f 93       	push	r18
    14aa:	3f 93       	push	r19
    14ac:	4f 93       	push	r20
    14ae:	5f 93       	push	r21
    14b0:	6f 93       	push	r22
    14b2:	7f 93       	push	r23
    14b4:	8f 93       	push	r24
    14b6:	9f 93       	push	r25
    14b8:	af 93       	push	r26
    14ba:	bf 93       	push	r27
    14bc:	ef 93       	push	r30
    14be:	ff 93       	push	r31
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1B_callBack != NULL_PTR)
    14c8:	80 91 86 01 	lds	r24, 0x0186
    14cc:	90 91 87 01 	lds	r25, 0x0187
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	49 f0       	breq	.+18     	; 0x14e6 <__vector_7+0x48>
	{
		TCNT1 = 0;
    14d4:	ec e4       	ldi	r30, 0x4C	; 76
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	11 82       	std	Z+1, r1	; 0x01
    14da:	10 82       	st	Z, r1
		(*TIMER1B_callBack)();
    14dc:	e0 91 86 01 	lds	r30, 0x0186
    14e0:	f0 91 87 01 	lds	r31, 0x0187
    14e4:	09 95       	icall
	}
}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	ff 91       	pop	r31
    14ec:	ef 91       	pop	r30
    14ee:	bf 91       	pop	r27
    14f0:	af 91       	pop	r26
    14f2:	9f 91       	pop	r25
    14f4:	8f 91       	pop	r24
    14f6:	7f 91       	pop	r23
    14f8:	6f 91       	pop	r22
    14fa:	5f 91       	pop	r21
    14fc:	4f 91       	pop	r20
    14fe:	3f 91       	pop	r19
    1500:	2f 91       	pop	r18
    1502:	0f 90       	pop	r0
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	0f 90       	pop	r0
    1508:	1f 90       	pop	r1
    150a:	18 95       	reti

0000150c <__vector_3>:



/* Interrupt Service Routine for timer2 compare mode */
ISR(TIMER2_COMP_vect)
{
    150c:	1f 92       	push	r1
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	2f 93       	push	r18
    1518:	3f 93       	push	r19
    151a:	4f 93       	push	r20
    151c:	5f 93       	push	r21
    151e:	6f 93       	push	r22
    1520:	7f 93       	push	r23
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	af 93       	push	r26
    1528:	bf 93       	push	r27
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_callBack != NULL_PTR)
    1536:	80 91 88 01 	lds	r24, 0x0188
    153a:	90 91 89 01 	lds	r25, 0x0189
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	41 f0       	breq	.+16     	; 0x1552 <__vector_3+0x46>
	{
		TCNT2 = 0;
    1542:	e4 e4       	ldi	r30, 0x44	; 68
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	10 82       	st	Z, r1
		(*TIMER2_callBack)();
    1548:	e0 91 88 01 	lds	r30, 0x0188
    154c:	f0 91 89 01 	lds	r31, 0x0189
    1550:	09 95       	icall
	}
}
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	ff 91       	pop	r31
    1558:	ef 91       	pop	r30
    155a:	bf 91       	pop	r27
    155c:	af 91       	pop	r26
    155e:	9f 91       	pop	r25
    1560:	8f 91       	pop	r24
    1562:	7f 91       	pop	r23
    1564:	6f 91       	pop	r22
    1566:	5f 91       	pop	r21
    1568:	4f 91       	pop	r20
    156a:	3f 91       	pop	r19
    156c:	2f 91       	pop	r18
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	0f 90       	pop	r0
    1574:	1f 90       	pop	r1
    1576:	18 95       	reti

00001578 <__vector_9>:



/* Interrupt Service Routine for timer0 Normal mode */
ISR(TIMER0_OVF_vect)
{
    1578:	1f 92       	push	r1
    157a:	0f 92       	push	r0
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	0f 92       	push	r0
    1580:	11 24       	eor	r1, r1
    1582:	2f 93       	push	r18
    1584:	3f 93       	push	r19
    1586:	4f 93       	push	r20
    1588:	5f 93       	push	r21
    158a:	6f 93       	push	r22
    158c:	7f 93       	push	r23
    158e:	8f 93       	push	r24
    1590:	9f 93       	push	r25
    1592:	af 93       	push	r26
    1594:	bf 93       	push	r27
    1596:	ef 93       	push	r30
    1598:	ff 93       	push	r31
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_callBack != NULL_PTR)
    15a2:	80 91 80 01 	lds	r24, 0x0180
    15a6:	90 91 81 01 	lds	r25, 0x0181
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	61 f0       	breq	.+24     	; 0x15c6 <__vector_9+0x4e>
	{
		TCNT0 = (uint8)timer0_re_count;
    15ae:	e2 e5       	ldi	r30, 0x52	; 82
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 91 7a 01 	lds	r24, 0x017A
    15b6:	90 91 7b 01 	lds	r25, 0x017B
    15ba:	80 83       	st	Z, r24
		(*TIMER0_callBack)();
    15bc:	e0 91 80 01 	lds	r30, 0x0180
    15c0:	f0 91 81 01 	lds	r31, 0x0181
    15c4:	09 95       	icall
	}
}
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	ff 91       	pop	r31
    15cc:	ef 91       	pop	r30
    15ce:	bf 91       	pop	r27
    15d0:	af 91       	pop	r26
    15d2:	9f 91       	pop	r25
    15d4:	8f 91       	pop	r24
    15d6:	7f 91       	pop	r23
    15d8:	6f 91       	pop	r22
    15da:	5f 91       	pop	r21
    15dc:	4f 91       	pop	r20
    15de:	3f 91       	pop	r19
    15e0:	2f 91       	pop	r18
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	0f 90       	pop	r0
    15e8:	1f 90       	pop	r1
    15ea:	18 95       	reti

000015ec <__vector_8>:

/* Interrupt Service Routine for timer1 Normal mode */
ISR(TIMER1_OVF_vect)
{
    15ec:	1f 92       	push	r1
    15ee:	0f 92       	push	r0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	0f 92       	push	r0
    15f4:	11 24       	eor	r1, r1
    15f6:	2f 93       	push	r18
    15f8:	3f 93       	push	r19
    15fa:	4f 93       	push	r20
    15fc:	5f 93       	push	r21
    15fe:	6f 93       	push	r22
    1600:	7f 93       	push	r23
    1602:	8f 93       	push	r24
    1604:	9f 93       	push	r25
    1606:	af 93       	push	r26
    1608:	bf 93       	push	r27
    160a:	ef 93       	push	r30
    160c:	ff 93       	push	r31
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_callBack != NULL_PTR)
    1616:	80 91 82 01 	lds	r24, 0x0182
    161a:	90 91 83 01 	lds	r25, 0x0183
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	79 f0       	breq	.+30     	; 0x1640 <__vector_8+0x54>
	{
		TCNT1 = (uint8)timer1_re_count;
    1622:	ec e4       	ldi	r30, 0x4C	; 76
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 91 7c 01 	lds	r24, 0x017C
    162a:	90 91 7d 01 	lds	r25, 0x017D
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
		(*TIMER1_callBack)();
    1636:	e0 91 82 01 	lds	r30, 0x0182
    163a:	f0 91 83 01 	lds	r31, 0x0183
    163e:	09 95       	icall
	}
}
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	ff 91       	pop	r31
    1646:	ef 91       	pop	r30
    1648:	bf 91       	pop	r27
    164a:	af 91       	pop	r26
    164c:	9f 91       	pop	r25
    164e:	8f 91       	pop	r24
    1650:	7f 91       	pop	r23
    1652:	6f 91       	pop	r22
    1654:	5f 91       	pop	r21
    1656:	4f 91       	pop	r20
    1658:	3f 91       	pop	r19
    165a:	2f 91       	pop	r18
    165c:	0f 90       	pop	r0
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	0f 90       	pop	r0
    1662:	1f 90       	pop	r1
    1664:	18 95       	reti

00001666 <__vector_4>:

/* Interrupt Service Routine for timer2 Normal mode */
ISR(TIMER2_OVF_vect)
{
    1666:	1f 92       	push	r1
    1668:	0f 92       	push	r0
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	0f 92       	push	r0
    166e:	11 24       	eor	r1, r1
    1670:	2f 93       	push	r18
    1672:	3f 93       	push	r19
    1674:	4f 93       	push	r20
    1676:	5f 93       	push	r21
    1678:	6f 93       	push	r22
    167a:	7f 93       	push	r23
    167c:	8f 93       	push	r24
    167e:	9f 93       	push	r25
    1680:	af 93       	push	r26
    1682:	bf 93       	push	r27
    1684:	ef 93       	push	r30
    1686:	ff 93       	push	r31
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_callBack != NULL_PTR)
    1690:	80 91 88 01 	lds	r24, 0x0188
    1694:	90 91 89 01 	lds	r25, 0x0189
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	61 f0       	breq	.+24     	; 0x16b4 <__vector_4+0x4e>
	{
		TCNT2 = (uint8)timer2_re_count;
    169c:	e4 e4       	ldi	r30, 0x44	; 68
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 91 7e 01 	lds	r24, 0x017E
    16a4:	90 91 7f 01 	lds	r25, 0x017F
    16a8:	80 83       	st	Z, r24
		(*TIMER2_callBack)();
    16aa:	e0 91 88 01 	lds	r30, 0x0188
    16ae:	f0 91 89 01 	lds	r31, 0x0189
    16b2:	09 95       	icall
	}
}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	ff 91       	pop	r31
    16ba:	ef 91       	pop	r30
    16bc:	bf 91       	pop	r27
    16be:	af 91       	pop	r26
    16c0:	9f 91       	pop	r25
    16c2:	8f 91       	pop	r24
    16c4:	7f 91       	pop	r23
    16c6:	6f 91       	pop	r22
    16c8:	5f 91       	pop	r21
    16ca:	4f 91       	pop	r20
    16cc:	3f 91       	pop	r19
    16ce:	2f 91       	pop	r18
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	0f 90       	pop	r0
    16d6:	1f 90       	pop	r1
    16d8:	18 95       	reti

000016da <TIMER_comparInit>:

/*******************************************************************************
 *                      Functions Definition                                   *
 *******************************************************************************/
void TIMER_comparInit(TIMER_Config *s_config_ptr,void (*callBack)(void))
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <TIMER_comparInit+0x6>
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <TIMER_comparInit+0x8>
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	7c 83       	std	Y+4, r23	; 0x04
    16ec:	6b 83       	std	Y+3, r22	; 0x03
	if((s_config_ptr->timer_x)==T0)
    16ee:	e9 81       	ldd	r30, Y+1	; 0x01
    16f0:	fa 81       	ldd	r31, Y+2	; 0x02
    16f2:	84 81       	ldd	r24, Z+4	; 0x04
    16f4:	88 73       	andi	r24, 0x38	; 56
    16f6:	88 23       	and	r24, r24
    16f8:	09 f0       	breq	.+2      	; 0x16fc <TIMER_comparInit+0x22>
    16fa:	41 c0       	rjmp	.+130    	; 0x177e <TIMER_comparInit+0xa4>
	{
		TCNT0 = 0;                                   /* Set Timer initial value to 0*/
    16fc:	e2 e5       	ldi	r30, 0x52	; 82
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	10 82       	st	Z, r1
		OCR0  = (uint8)s_config_ptr->timer_compare;  /* Set Compare Value*/
    1702:	ac e5       	ldi	r26, 0x5C	; 92
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e9 81       	ldd	r30, Y+1	; 0x01
    1708:	fa 81       	ldd	r31, Y+2	; 0x02
    170a:	82 81       	ldd	r24, Z+2	; 0x02
    170c:	93 81       	ldd	r25, Z+3	; 0x03
    170e:	8c 93       	st	X, r24
		TIMSK = (TIMSK & 0xfc) | (1<<OCIE0);         /* Enable Timer0 Compare Interrupt*/
    1710:	a9 e5       	ldi	r26, 0x59	; 89
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e9 e5       	ldi	r30, 0x59	; 89
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	8c 7f       	andi	r24, 0xFC	; 252
    171c:	82 60       	ori	r24, 0x02	; 2
    171e:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. s_config_ptr->ocx     : status of OC0
		 * 4. s_config_ptr->pre     : clock = F_CPU / prescaler
		 */
		TCCR0 = (1<<FOC0) | (1<<WGM01) | ((s_config_ptr->ocx)<<COM00) | ((s_config_ptr->pre_timer)<<CS00);
    1720:	a3 e5       	ldi	r26, 0x53	; 83
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e9 81       	ldd	r30, Y+1	; 0x01
    1726:	fa 81       	ldd	r31, Y+2	; 0x02
    1728:	84 81       	ldd	r24, Z+4	; 0x04
    172a:	82 95       	swap	r24
    172c:	86 95       	lsr	r24
    172e:	86 95       	lsr	r24
    1730:	83 70       	andi	r24, 0x03	; 3
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	82 95       	swap	r24
    1738:	92 95       	swap	r25
    173a:	90 7f       	andi	r25, 0xF0	; 240
    173c:	98 27       	eor	r25, r24
    173e:	80 7f       	andi	r24, 0xF0	; 240
    1740:	98 27       	eor	r25, r24
    1742:	98 2f       	mov	r25, r24
    1744:	98 68       	ori	r25, 0x88	; 136
    1746:	e9 81       	ldd	r30, Y+1	; 0x01
    1748:	fa 81       	ldd	r31, Y+2	; 0x02
    174a:	84 81       	ldd	r24, Z+4	; 0x04
    174c:	87 70       	andi	r24, 0x07	; 7
    174e:	89 2b       	or	r24, r25
    1750:	8c 93       	st	X, r24
		TIMER0_callBack= callBack;
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	9c 81       	ldd	r25, Y+4	; 0x04
    1756:	90 93 81 01 	sts	0x0181, r25
    175a:	80 93 80 01 	sts	0x0180, r24

		if((s_config_ptr->ocx) != DISCONECT)
    175e:	e9 81       	ldd	r30, Y+1	; 0x01
    1760:	fa 81       	ldd	r31, Y+2	; 0x02
    1762:	84 81       	ldd	r24, Z+4	; 0x04
    1764:	80 7c       	andi	r24, 0xC0	; 192
    1766:	88 23       	and	r24, r24
    1768:	51 f0       	breq	.+20     	; 0x177e <TIMER_comparInit+0xa4>
		{
			GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	63 e0       	ldi	r22, 0x03	; 3
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
			GPIO_writePin(PORTB_ID,PIN3_ID,LOGIC_LOW);
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	63 e0       	ldi	r22, 0x03	; 3
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		}
	}

	if( ((s_config_ptr->timer_x) == T1) || ((s_config_ptr->timer_x) == TA1)  )
    177e:	e9 81       	ldd	r30, Y+1	; 0x01
    1780:	fa 81       	ldd	r31, Y+2	; 0x02
    1782:	84 81       	ldd	r24, Z+4	; 0x04
    1784:	88 73       	andi	r24, 0x38	; 56
    1786:	88 30       	cpi	r24, 0x08	; 8
    1788:	39 f0       	breq	.+14     	; 0x1798 <TIMER_comparInit+0xbe>
    178a:	e9 81       	ldd	r30, Y+1	; 0x01
    178c:	fa 81       	ldd	r31, Y+2	; 0x02
    178e:	84 81       	ldd	r24, Z+4	; 0x04
    1790:	88 73       	andi	r24, 0x38	; 56
    1792:	80 32       	cpi	r24, 0x20	; 32
    1794:	09 f0       	breq	.+2      	; 0x1798 <TIMER_comparInit+0xbe>
    1796:	49 c0       	rjmp	.+146    	; 0x182a <TIMER_comparInit+0x150>
	{
		TCNT1 = 0;                                   /* Set Timer initial value to 0*/
    1798:	ec e4       	ldi	r30, 0x4C	; 76
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	11 82       	std	Z+1, r1	; 0x01
    179e:	10 82       	st	Z, r1
		OCR1A = s_config_ptr->timer_compare;         /* Set Compare Value*/
    17a0:	aa e4       	ldi	r26, 0x4A	; 74
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e9 81       	ldd	r30, Y+1	; 0x01
    17a6:	fa 81       	ldd	r31, Y+2	; 0x02
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	11 96       	adiw	r26, 0x01	; 1
    17ae:	9c 93       	st	X, r25
    17b0:	8e 93       	st	-X, r24
		TIMSK = (TIMSK & 0xc3) | (1<<OCIE1A);        /* Enable Timer1A Compare Interrupt*/
    17b2:	a9 e5       	ldi	r26, 0x59	; 89
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e9 e5       	ldi	r30, 0x59	; 89
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	83 7c       	andi	r24, 0xC3	; 195
    17be:	80 61       	ori	r24, 0x10	; 16
    17c0:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC1A=1 FOC1B=1
		 * 2. CTC Mode WGM13=0 WGM12=1 WGM11=0 & WGM10=0
		 * 3. s_config_ptr->ocx     : status of OC1A
		 * 4. s_config_ptr->pre     : clock = F_CPU / prescaler
		 */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B) | ((s_config_ptr->ocx)<<COM1A0);
    17c2:	af e4       	ldi	r26, 0x4F	; 79
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e9 81       	ldd	r30, Y+1	; 0x01
    17c8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ca:	84 81       	ldd	r24, Z+4	; 0x04
    17cc:	82 95       	swap	r24
    17ce:	86 95       	lsr	r24
    17d0:	86 95       	lsr	r24
    17d2:	83 70       	andi	r24, 0x03	; 3
    17d4:	88 2f       	mov	r24, r24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	00 24       	eor	r0, r0
    17da:	96 95       	lsr	r25
    17dc:	87 95       	ror	r24
    17de:	07 94       	ror	r0
    17e0:	96 95       	lsr	r25
    17e2:	87 95       	ror	r24
    17e4:	07 94       	ror	r0
    17e6:	98 2f       	mov	r25, r24
    17e8:	80 2d       	mov	r24, r0
    17ea:	8c 60       	ori	r24, 0x0C	; 12
    17ec:	8c 93       	st	X, r24

		TCCR1B = (1<<WGM12) | ((s_config_ptr->pre_timer)<<CS10);
    17ee:	ae e4       	ldi	r26, 0x4E	; 78
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e9 81       	ldd	r30, Y+1	; 0x01
    17f4:	fa 81       	ldd	r31, Y+2	; 0x02
    17f6:	84 81       	ldd	r24, Z+4	; 0x04
    17f8:	87 70       	andi	r24, 0x07	; 7
    17fa:	88 60       	ori	r24, 0x08	; 8
    17fc:	8c 93       	st	X, r24
		TIMER1A_callBack= callBack;
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	90 93 85 01 	sts	0x0185, r25
    1806:	80 93 84 01 	sts	0x0184, r24

		if((s_config_ptr->ocx) != DISCONECT)
    180a:	e9 81       	ldd	r30, Y+1	; 0x01
    180c:	fa 81       	ldd	r31, Y+2	; 0x02
    180e:	84 81       	ldd	r24, Z+4	; 0x04
    1810:	80 7c       	andi	r24, 0xC0	; 192
    1812:	88 23       	and	r24, r24
    1814:	51 f0       	breq	.+20     	; 0x182a <TIMER_comparInit+0x150>
		{
			GPIO_setupPinDirection(PORTD_ID,PIN5_ID,PIN_OUTPUT);
    1816:	83 e0       	ldi	r24, 0x03	; 3
    1818:	65 e0       	ldi	r22, 0x05	; 5
    181a:	41 e0       	ldi	r20, 0x01	; 1
    181c:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
			GPIO_writePin(PORTD_ID,PIN5_ID,LOGIC_LOW);
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	65 e0       	ldi	r22, 0x05	; 5
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		}
	}

	if((s_config_ptr->timer_x) == TB1 )
    182a:	e9 81       	ldd	r30, Y+1	; 0x01
    182c:	fa 81       	ldd	r31, Y+2	; 0x02
    182e:	84 81       	ldd	r24, Z+4	; 0x04
    1830:	88 73       	andi	r24, 0x38	; 56
    1832:	80 33       	cpi	r24, 0x30	; 48
    1834:	09 f0       	breq	.+2      	; 0x1838 <TIMER_comparInit+0x15e>
    1836:	46 c0       	rjmp	.+140    	; 0x18c4 <TIMER_comparInit+0x1ea>
	{
		TCNT1 = 0;                                   /* Set Timer initial value to 0*/
    1838:	ec e4       	ldi	r30, 0x4C	; 76
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	11 82       	std	Z+1, r1	; 0x01
    183e:	10 82       	st	Z, r1
		OCR1A = s_config_ptr->timer_compare;         /* Set Compare Value*/
    1840:	aa e4       	ldi	r26, 0x4A	; 74
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e9 81       	ldd	r30, Y+1	; 0x01
    1846:	fa 81       	ldd	r31, Y+2	; 0x02
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	93 81       	ldd	r25, Z+3	; 0x03
    184c:	11 96       	adiw	r26, 0x01	; 1
    184e:	9c 93       	st	X, r25
    1850:	8e 93       	st	-X, r24
		TIMSK = (TIMSK & 0xc3) | (1<<OCIE1B);        /* Enable Timer1A Compare Interrupt*/
    1852:	a9 e5       	ldi	r26, 0x59	; 89
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e9 e5       	ldi	r30, 0x59	; 89
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	83 7c       	andi	r24, 0xC3	; 195
    185e:	88 60       	ori	r24, 0x08	; 8
    1860:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC1A=1 FOC1B=1
		 * 2. CTC Mode WGM13=0 WGM12=1 WGM11=0 & WGM10=0
		 * 3. s_config_ptr->ocx     : status of OC1A
		 * 4. s_config_ptr->pre     : clock = F_CPU / prescaler
		 */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B) | ((s_config_ptr->ocx)<<COM1B0);
    1862:	af e4       	ldi	r26, 0x4F	; 79
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e9 81       	ldd	r30, Y+1	; 0x01
    1868:	fa 81       	ldd	r31, Y+2	; 0x02
    186a:	84 81       	ldd	r24, Z+4	; 0x04
    186c:	82 95       	swap	r24
    186e:	86 95       	lsr	r24
    1870:	86 95       	lsr	r24
    1872:	83 70       	andi	r24, 0x03	; 3
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	82 95       	swap	r24
    187a:	92 95       	swap	r25
    187c:	90 7f       	andi	r25, 0xF0	; 240
    187e:	98 27       	eor	r25, r24
    1880:	80 7f       	andi	r24, 0xF0	; 240
    1882:	98 27       	eor	r25, r24
    1884:	8c 60       	ori	r24, 0x0C	; 12
    1886:	8c 93       	st	X, r24

		TCCR1B = (1<<WGM12) | ((s_config_ptr->pre_timer)<<CS10);
    1888:	ae e4       	ldi	r26, 0x4E	; 78
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e9 81       	ldd	r30, Y+1	; 0x01
    188e:	fa 81       	ldd	r31, Y+2	; 0x02
    1890:	84 81       	ldd	r24, Z+4	; 0x04
    1892:	87 70       	andi	r24, 0x07	; 7
    1894:	88 60       	ori	r24, 0x08	; 8
    1896:	8c 93       	st	X, r24
		TIMER1B_callBack= callBack;
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	90 93 87 01 	sts	0x0187, r25
    18a0:	80 93 86 01 	sts	0x0186, r24

		if((s_config_ptr->ocx) != DISCONECT)
    18a4:	e9 81       	ldd	r30, Y+1	; 0x01
    18a6:	fa 81       	ldd	r31, Y+2	; 0x02
    18a8:	84 81       	ldd	r24, Z+4	; 0x04
    18aa:	80 7c       	andi	r24, 0xC0	; 192
    18ac:	88 23       	and	r24, r24
    18ae:	51 f0       	breq	.+20     	; 0x18c4 <TIMER_comparInit+0x1ea>
		{
			GPIO_setupPinDirection(PORTD_ID,PIN4_ID,PIN_OUTPUT);
    18b0:	83 e0       	ldi	r24, 0x03	; 3
    18b2:	64 e0       	ldi	r22, 0x04	; 4
    18b4:	41 e0       	ldi	r20, 0x01	; 1
    18b6:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
			GPIO_writePin(PORTD_ID,PIN4_ID,LOGIC_LOW);
    18ba:	83 e0       	ldi	r24, 0x03	; 3
    18bc:	64 e0       	ldi	r22, 0x04	; 4
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		}
	}

	if((s_config_ptr->timer_x)==T2)
    18c4:	e9 81       	ldd	r30, Y+1	; 0x01
    18c6:	fa 81       	ldd	r31, Y+2	; 0x02
    18c8:	84 81       	ldd	r24, Z+4	; 0x04
    18ca:	88 73       	andi	r24, 0x38	; 56
    18cc:	80 31       	cpi	r24, 0x10	; 16
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <TIMER_comparInit+0x1f8>
    18d0:	45 c0       	rjmp	.+138    	; 0x195c <TIMER_comparInit+0x282>
	{
		ASSR = (1<<AS2);                             /* Timer/Counter2 is clocked from a Crystal Oscillator*/
    18d2:	e2 e4       	ldi	r30, 0x42	; 66
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	88 e0       	ldi	r24, 0x08	; 8
    18d8:	80 83       	st	Z, r24
		TCNT2 = 0;                                   /* Set Timer initial value to 0*/
    18da:	e4 e4       	ldi	r30, 0x44	; 68
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	10 82       	st	Z, r1
		OCR2  = (uint8)s_config_ptr->timer_compare;  /* Set Compare Value*/
    18e0:	a3 e4       	ldi	r26, 0x43	; 67
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e9 81       	ldd	r30, Y+1	; 0x01
    18e6:	fa 81       	ldd	r31, Y+2	; 0x02
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	8c 93       	st	X, r24
		TIMSK = (TIMSK & 0x3f) | (1<<OCIE2);         /* Enable Timer2 Compare Interrupt*/
    18ee:	a9 e5       	ldi	r26, 0x59	; 89
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e9 e5       	ldi	r30, 0x59	; 89
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	8f 73       	andi	r24, 0x3F	; 63
    18fa:	80 68       	ori	r24, 0x80	; 128
    18fc:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC2=1
		 * 2. CTC Mode WGM21=1 & WGM20=0
		 * 3. s_config_ptr->ocx     : status of OC0
		 * 4. s_config_ptr->pre     : clock = F_CPU / prescaler
		 */
		TCCR2 = (1<<FOC2) | (1<<WGM21) | ((s_config_ptr->ocx)<<COM20) | ((s_config_ptr->pre_timer)<<CS20);
    18fe:	a5 e4       	ldi	r26, 0x45	; 69
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e9 81       	ldd	r30, Y+1	; 0x01
    1904:	fa 81       	ldd	r31, Y+2	; 0x02
    1906:	84 81       	ldd	r24, Z+4	; 0x04
    1908:	82 95       	swap	r24
    190a:	86 95       	lsr	r24
    190c:	86 95       	lsr	r24
    190e:	83 70       	andi	r24, 0x03	; 3
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	82 95       	swap	r24
    1916:	92 95       	swap	r25
    1918:	90 7f       	andi	r25, 0xF0	; 240
    191a:	98 27       	eor	r25, r24
    191c:	80 7f       	andi	r24, 0xF0	; 240
    191e:	98 27       	eor	r25, r24
    1920:	98 2f       	mov	r25, r24
    1922:	98 68       	ori	r25, 0x88	; 136
    1924:	e9 81       	ldd	r30, Y+1	; 0x01
    1926:	fa 81       	ldd	r31, Y+2	; 0x02
    1928:	84 81       	ldd	r24, Z+4	; 0x04
    192a:	87 70       	andi	r24, 0x07	; 7
    192c:	89 2b       	or	r24, r25
    192e:	8c 93       	st	X, r24
		TIMER2_callBack= callBack;
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	90 93 89 01 	sts	0x0189, r25
    1938:	80 93 88 01 	sts	0x0188, r24

		if((s_config_ptr->ocx) != DISCONECT)
    193c:	e9 81       	ldd	r30, Y+1	; 0x01
    193e:	fa 81       	ldd	r31, Y+2	; 0x02
    1940:	84 81       	ldd	r24, Z+4	; 0x04
    1942:	80 7c       	andi	r24, 0xC0	; 192
    1944:	88 23       	and	r24, r24
    1946:	51 f0       	breq	.+20     	; 0x195c <TIMER_comparInit+0x282>
		{
			GPIO_setupPinDirection(PORTD_ID,PIN7_ID,PIN_OUTPUT);
    1948:	83 e0       	ldi	r24, 0x03	; 3
    194a:	67 e0       	ldi	r22, 0x07	; 7
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
			GPIO_writePin(PORTD_ID,PIN7_ID,LOGIC_LOW);
    1952:	83 e0       	ldi	r24, 0x03	; 3
    1954:	67 e0       	ldi	r22, 0x07	; 7
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		}
	}
}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <TIMER_NormalInit>:



void TIMER_NormalInit(TIMER_Config *s_config_ptr,void (*callBack)(void))
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	00 d0       	rcall	.+0      	; 0x1970 <TIMER_NormalInit+0x6>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <TIMER_NormalInit+0x8>
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	7c 83       	std	Y+4, r23	; 0x04
    197c:	6b 83       	std	Y+3, r22	; 0x03
	if((s_config_ptr->timer_x)==T0)
    197e:	e9 81       	ldd	r30, Y+1	; 0x01
    1980:	fa 81       	ldd	r31, Y+2	; 0x02
    1982:	84 81       	ldd	r24, Z+4	; 0x04
    1984:	88 73       	andi	r24, 0x38	; 56
    1986:	88 23       	and	r24, r24
    1988:	39 f5       	brne	.+78     	; 0x19d8 <TIMER_NormalInit+0x6e>
	{
		timer0_re_count=(uint8)s_config_ptr->timer_init;
    198a:	e9 81       	ldd	r30, Y+1	; 0x01
    198c:	fa 81       	ldd	r31, Y+2	; 0x02
    198e:	80 81       	ld	r24, Z
    1990:	91 81       	ldd	r25, Z+1	; 0x01
    1992:	88 2f       	mov	r24, r24
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	90 93 7b 01 	sts	0x017B, r25
    199a:	80 93 7a 01 	sts	0x017A, r24
		TCNT0 = (uint8)timer0_re_count;              /* Set Timer initial value */
    199e:	e2 e5       	ldi	r30, 0x52	; 82
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 91 7a 01 	lds	r24, 0x017A
    19a6:	90 91 7b 01 	lds	r25, 0x017B
    19aa:	80 83       	st	Z, r24
		TIMSK = (TIMSK & 0xfc) | (1<<TOIE0);         /* Enable Timer0 Overflow Interrupt*/
    19ac:	a9 e5       	ldi	r26, 0x59	; 89
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e9 e5       	ldi	r30, 0x59	; 89
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	8c 7f       	andi	r24, 0xFC	; 252
    19b8:	81 60       	ori	r24, 0x01	; 1
    19ba:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. s_config_ptr->ocx     : status of OC0
		 * 4. s_config_ptr->pre     : clock = F_CPU / prescaler
		 */
		TCCR0 = (1<<FOC0) | ((s_config_ptr->pre_timer)<<CS00);
    19bc:	a3 e5       	ldi	r26, 0x53	; 83
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e9 81       	ldd	r30, Y+1	; 0x01
    19c2:	fa 81       	ldd	r31, Y+2	; 0x02
    19c4:	84 81       	ldd	r24, Z+4	; 0x04
    19c6:	87 70       	andi	r24, 0x07	; 7
    19c8:	80 68       	ori	r24, 0x80	; 128
    19ca:	8c 93       	st	X, r24
		TIMER0_callBack= callBack;
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	90 93 81 01 	sts	0x0181, r25
    19d4:	80 93 80 01 	sts	0x0180, r24
	}

	if((s_config_ptr->timer_x)==T1)
    19d8:	e9 81       	ldd	r30, Y+1	; 0x01
    19da:	fa 81       	ldd	r31, Y+2	; 0x02
    19dc:	84 81       	ldd	r24, Z+4	; 0x04
    19de:	88 73       	andi	r24, 0x38	; 56
    19e0:	88 30       	cpi	r24, 0x08	; 8
    19e2:	49 f5       	brne	.+82     	; 0x1a36 <TIMER_NormalInit+0xcc>
	{
		timer1_re_count= s_config_ptr->timer_init;
    19e4:	e9 81       	ldd	r30, Y+1	; 0x01
    19e6:	fa 81       	ldd	r31, Y+2	; 0x02
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	90 93 7d 01 	sts	0x017D, r25
    19f0:	80 93 7c 01 	sts	0x017C, r24
		TCNT1 = timer1_re_count;                     /* Set Timer initial value */
    19f4:	ec e4       	ldi	r30, 0x4C	; 76
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 91 7c 01 	lds	r24, 0x017C
    19fc:	90 91 7d 01 	lds	r25, 0x017D
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
		TIMSK = (TIMSK & 0xc3) | (1<<TOIE1);         /* Enable Timer1 Overflow Interrupt*/
    1a04:	a9 e5       	ldi	r26, 0x59	; 89
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e9 e5       	ldi	r30, 0x59	; 89
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	83 7c       	andi	r24, 0xC3	; 195
    1a10:	84 60       	ori	r24, 0x04	; 4
    1a12:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC1A=1  FOC1B=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. s_config_ptr->ocx     : status of OC0
		 * 4. s_config_ptr->pre     : clock = F_CPU / prescaler
		 */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1a14:	ef e4       	ldi	r30, 0x4F	; 79
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	8c e0       	ldi	r24, 0x0C	; 12
    1a1a:	80 83       	st	Z, r24
		TCCR1B = ((s_config_ptr->pre_timer)<<CS10);
    1a1c:	ae e4       	ldi	r26, 0x4E	; 78
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e9 81       	ldd	r30, Y+1	; 0x01
    1a22:	fa 81       	ldd	r31, Y+2	; 0x02
    1a24:	84 81       	ldd	r24, Z+4	; 0x04
    1a26:	87 70       	andi	r24, 0x07	; 7
    1a28:	8c 93       	st	X, r24

		TIMER1_callBack= callBack;
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2e:	90 93 83 01 	sts	0x0183, r25
    1a32:	80 93 82 01 	sts	0x0182, r24
	}

	if((s_config_ptr->timer_x)==T2)
    1a36:	e9 81       	ldd	r30, Y+1	; 0x01
    1a38:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3a:	84 81       	ldd	r24, Z+4	; 0x04
    1a3c:	88 73       	andi	r24, 0x38	; 56
    1a3e:	80 31       	cpi	r24, 0x10	; 16
    1a40:	39 f5       	brne	.+78     	; 0x1a90 <TIMER_NormalInit+0x126>
	{
		//ASSR = (1<<AS2);                             /* Timer/Counter2 is clocked from a Crystal Oscillator*/
		timer2_re_count=(uint8)s_config_ptr->timer_init;
    1a42:	e9 81       	ldd	r30, Y+1	; 0x01
    1a44:	fa 81       	ldd	r31, Y+2	; 0x02
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	88 2f       	mov	r24, r24
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	90 93 7f 01 	sts	0x017F, r25
    1a52:	80 93 7e 01 	sts	0x017E, r24
		TCNT2 = (uint8)timer2_re_count;              /* Set Timer initial value */
    1a56:	e4 e4       	ldi	r30, 0x44	; 68
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 91 7e 01 	lds	r24, 0x017E
    1a5e:	90 91 7f 01 	lds	r25, 0x017F
    1a62:	80 83       	st	Z, r24
		TIMSK = (TIMSK & 0x3f) | (1<<TOIE2);         /* Enable Timer2 Overflow Interrupt*/
    1a64:	a9 e5       	ldi	r26, 0x59	; 89
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e9 e5       	ldi	r30, 0x59	; 89
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8f 73       	andi	r24, 0x3F	; 63
    1a70:	80 64       	ori	r24, 0x40	; 64
    1a72:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC2=1
		 * 2. Normal Mode WGM21=0 & WGM20=0
		 * 3. s_config_ptr->ocx     : status of OC0
		 * 4. s_config_ptr->pre     : clock = F_CPU / prescaler
		 */
		TCCR2 = (1<<FOC2) | ((s_config_ptr->pre_timer)<<CS20);
    1a74:	a5 e4       	ldi	r26, 0x45	; 69
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7c:	84 81       	ldd	r24, Z+4	; 0x04
    1a7e:	87 70       	andi	r24, 0x07	; 7
    1a80:	80 68       	ori	r24, 0x80	; 128
    1a82:	8c 93       	st	X, r24
		TIMER2_callBack= callBack;
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	90 93 89 01 	sts	0x0189, r25
    1a8c:	80 93 88 01 	sts	0x0188, r24
	}
}
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <COUNTER_comparInit>:




void COUNTER_comparInit(COUNTER_Config *s_config_ptr,void (*callBack)(void))
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <COUNTER_comparInit+0x6>
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <COUNTER_comparInit+0x8>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	7c 83       	std	Y+4, r23	; 0x04
    1ab0:	6b 83       	std	Y+3, r22	; 0x03
	if((s_config_ptr->counter_x)==C0)
    1ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab6:	84 81       	ldd	r24, Z+4	; 0x04
    1ab8:	88 73       	andi	r24, 0x38	; 56
    1aba:	88 23       	and	r24, r24
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <COUNTER_comparInit+0x22>
    1abe:	41 c0       	rjmp	.+130    	; 0x1b42 <COUNTER_comparInit+0xa4>
	{
		TCNT0 = 0;                                   /* Set Timer initial value to 0*/
    1ac0:	e2 e5       	ldi	r30, 0x52	; 82
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	10 82       	st	Z, r1
		OCR0  = s_config_ptr->counter_compare;       /* Set Compare Value*/
    1ac6:	ac e5       	ldi	r26, 0x5C	; 92
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e9 81       	ldd	r30, Y+1	; 0x01
    1acc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	8c 93       	st	X, r24
		TIMSK = (TIMSK & 0xfc) | (1<<OCIE0);         /* Enable Timer0 Compare Interrupt*/
    1ad4:	a9 e5       	ldi	r26, 0x59	; 89
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e9 e5       	ldi	r30, 0x59	; 89
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	8c 7f       	andi	r24, 0xFC	; 252
    1ae0:	82 60       	ori	r24, 0x02	; 2
    1ae2:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. s_config_ptr->ocx        : status of OC0
		 * 4. s_config_ptr->edge_state : External clock
		 */
		TCCR0 = (1<<FOC0) | (1<<WGM01) | ((s_config_ptr->ocx)<<COM00) | ((s_config_ptr->edge_state)<<CS00);
    1ae4:	a3 e5       	ldi	r26, 0x53	; 83
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aea:	fa 81       	ldd	r31, Y+2	; 0x02
    1aec:	84 81       	ldd	r24, Z+4	; 0x04
    1aee:	82 95       	swap	r24
    1af0:	86 95       	lsr	r24
    1af2:	86 95       	lsr	r24
    1af4:	83 70       	andi	r24, 0x03	; 3
    1af6:	88 2f       	mov	r24, r24
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	82 95       	swap	r24
    1afc:	92 95       	swap	r25
    1afe:	90 7f       	andi	r25, 0xF0	; 240
    1b00:	98 27       	eor	r25, r24
    1b02:	80 7f       	andi	r24, 0xF0	; 240
    1b04:	98 27       	eor	r25, r24
    1b06:	98 2f       	mov	r25, r24
    1b08:	98 68       	ori	r25, 0x88	; 136
    1b0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0e:	84 81       	ldd	r24, Z+4	; 0x04
    1b10:	87 70       	andi	r24, 0x07	; 7
    1b12:	89 2b       	or	r24, r25
    1b14:	8c 93       	st	X, r24
		TIMER0_callBack= callBack;
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	90 93 81 01 	sts	0x0181, r25
    1b1e:	80 93 80 01 	sts	0x0180, r24

		if((s_config_ptr->ocx) != DISCONECT)
    1b22:	e9 81       	ldd	r30, Y+1	; 0x01
    1b24:	fa 81       	ldd	r31, Y+2	; 0x02
    1b26:	84 81       	ldd	r24, Z+4	; 0x04
    1b28:	80 7c       	andi	r24, 0xC0	; 192
    1b2a:	88 23       	and	r24, r24
    1b2c:	51 f0       	breq	.+20     	; 0x1b42 <COUNTER_comparInit+0xa4>
		{
			GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	63 e0       	ldi	r22, 0x03	; 3
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
			GPIO_writePin(PORTB_ID,PIN3_ID,LOGIC_LOW);
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	63 e0       	ldi	r22, 0x03	; 3
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		}
	}

	if( ((s_config_ptr->counter_x)==C1) || ((s_config_ptr->counter_x)==CA1))
    1b42:	e9 81       	ldd	r30, Y+1	; 0x01
    1b44:	fa 81       	ldd	r31, Y+2	; 0x02
    1b46:	84 81       	ldd	r24, Z+4	; 0x04
    1b48:	88 73       	andi	r24, 0x38	; 56
    1b4a:	88 30       	cpi	r24, 0x08	; 8
    1b4c:	39 f0       	breq	.+14     	; 0x1b5c <COUNTER_comparInit+0xbe>
    1b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b50:	fa 81       	ldd	r31, Y+2	; 0x02
    1b52:	84 81       	ldd	r24, Z+4	; 0x04
    1b54:	88 73       	andi	r24, 0x38	; 56
    1b56:	80 32       	cpi	r24, 0x20	; 32
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <COUNTER_comparInit+0xbe>
    1b5a:	49 c0       	rjmp	.+146    	; 0x1bee <COUNTER_comparInit+0x150>
	{
		TCNT1 = 0;                                    /* Set Timer initial value to 0*/
    1b5c:	ec e4       	ldi	r30, 0x4C	; 76
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	11 82       	std	Z+1, r1	; 0x01
    1b62:	10 82       	st	Z, r1
		OCR1A  = s_config_ptr->counter_compare;       /* Set Compare Value*/
    1b64:	aa e4       	ldi	r26, 0x4A	; 74
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6c:	82 81       	ldd	r24, Z+2	; 0x02
    1b6e:	93 81       	ldd	r25, Z+3	; 0x03
    1b70:	11 96       	adiw	r26, 0x01	; 1
    1b72:	9c 93       	st	X, r25
    1b74:	8e 93       	st	-X, r24
		TIMSK = (TIMSK & 0xc3) | (1<<OCIE1A);         /* Enable Timer1 Compare Interrupt*/
    1b76:	a9 e5       	ldi	r26, 0x59	; 89
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e9 e5       	ldi	r30, 0x59	; 89
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	83 7c       	andi	r24, 0xC3	; 195
    1b82:	80 61       	ori	r24, 0x10	; 16
    1b84:	8c 93       	st	X, r24
		 * 2. CTC Mode WGM13=0 WGM12=1 WGM11=0 & WGM10=0
		 * 3. s_config_ptr->ocx     : status of OC1A
		 * 4. s_config_ptr->edge_state     : clock external
		 */

		TCCR1A = (1<<FOC1A) | (1<<FOC1B) | ((s_config_ptr->ocx)<<COM1A0);
    1b86:	af e4       	ldi	r26, 0x4F	; 79
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8e:	84 81       	ldd	r24, Z+4	; 0x04
    1b90:	82 95       	swap	r24
    1b92:	86 95       	lsr	r24
    1b94:	86 95       	lsr	r24
    1b96:	83 70       	andi	r24, 0x03	; 3
    1b98:	88 2f       	mov	r24, r24
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	00 24       	eor	r0, r0
    1b9e:	96 95       	lsr	r25
    1ba0:	87 95       	ror	r24
    1ba2:	07 94       	ror	r0
    1ba4:	96 95       	lsr	r25
    1ba6:	87 95       	ror	r24
    1ba8:	07 94       	ror	r0
    1baa:	98 2f       	mov	r25, r24
    1bac:	80 2d       	mov	r24, r0
    1bae:	8c 60       	ori	r24, 0x0C	; 12
    1bb0:	8c 93       	st	X, r24
		TCCR1B = (1<<WGM12) | ((s_config_ptr->edge_state)<<CS10);
    1bb2:	ae e4       	ldi	r26, 0x4E	; 78
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bba:	84 81       	ldd	r24, Z+4	; 0x04
    1bbc:	87 70       	andi	r24, 0x07	; 7
    1bbe:	88 60       	ori	r24, 0x08	; 8
    1bc0:	8c 93       	st	X, r24
		TIMER1A_callBack= callBack;
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	90 93 85 01 	sts	0x0185, r25
    1bca:	80 93 84 01 	sts	0x0184, r24
		if((s_config_ptr->ocx) != DISCONECT)
    1bce:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd2:	84 81       	ldd	r24, Z+4	; 0x04
    1bd4:	80 7c       	andi	r24, 0xC0	; 192
    1bd6:	88 23       	and	r24, r24
    1bd8:	51 f0       	breq	.+20     	; 0x1bee <COUNTER_comparInit+0x150>
		{
			GPIO_setupPinDirection(PORTD_ID,PIN5_ID,PIN_OUTPUT);
    1bda:	83 e0       	ldi	r24, 0x03	; 3
    1bdc:	65 e0       	ldi	r22, 0x05	; 5
    1bde:	41 e0       	ldi	r20, 0x01	; 1
    1be0:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
			GPIO_writePin(PORTD_ID,PIN5_ID,LOGIC_LOW);
    1be4:	83 e0       	ldi	r24, 0x03	; 3
    1be6:	65 e0       	ldi	r22, 0x05	; 5
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		}
	}

	if((s_config_ptr->counter_x)== CB1)
    1bee:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf2:	84 81       	ldd	r24, Z+4	; 0x04
    1bf4:	88 73       	andi	r24, 0x38	; 56
    1bf6:	80 33       	cpi	r24, 0x30	; 48
    1bf8:	09 f0       	breq	.+2      	; 0x1bfc <COUNTER_comparInit+0x15e>
    1bfa:	46 c0       	rjmp	.+140    	; 0x1c88 <COUNTER_comparInit+0x1ea>
	{
		TCNT1  = 0;                                    /* Set Timer initial value to 0*/
    1bfc:	ec e4       	ldi	r30, 0x4C	; 76
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	11 82       	std	Z+1, r1	; 0x01
    1c02:	10 82       	st	Z, r1
		OCR1A  = s_config_ptr->counter_compare;        /* Set Compare Value*/
    1c04:	aa e4       	ldi	r26, 0x4A	; 74
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0c:	82 81       	ldd	r24, Z+2	; 0x02
    1c0e:	93 81       	ldd	r25, Z+3	; 0x03
    1c10:	11 96       	adiw	r26, 0x01	; 1
    1c12:	9c 93       	st	X, r25
    1c14:	8e 93       	st	-X, r24
		TIMSK  = (TIMSK & 0xc3) | (1<<OCIE1B);         /* Enable Timer1 Compare Interrupt*/
    1c16:	a9 e5       	ldi	r26, 0x59	; 89
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e9 e5       	ldi	r30, 0x59	; 89
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	83 7c       	andi	r24, 0xC3	; 195
    1c22:	88 60       	ori	r24, 0x08	; 8
    1c24:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC1A=1 FOC1B=1
		 * 2. CTC Mode WGM13=0 WGM12=1 WGM11=0 & WGM10=0
		 * 3. s_config_ptr->ocx            : status of OC1A
		 * 4. s_config_ptr->edge_state     : clock external
		 */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B) | ((s_config_ptr->ocx)<<COM1B0);
    1c26:	af e4       	ldi	r26, 0x4F	; 79
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2e:	84 81       	ldd	r24, Z+4	; 0x04
    1c30:	82 95       	swap	r24
    1c32:	86 95       	lsr	r24
    1c34:	86 95       	lsr	r24
    1c36:	83 70       	andi	r24, 0x03	; 3
    1c38:	88 2f       	mov	r24, r24
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	82 95       	swap	r24
    1c3e:	92 95       	swap	r25
    1c40:	90 7f       	andi	r25, 0xF0	; 240
    1c42:	98 27       	eor	r25, r24
    1c44:	80 7f       	andi	r24, 0xF0	; 240
    1c46:	98 27       	eor	r25, r24
    1c48:	8c 60       	ori	r24, 0x0C	; 12
    1c4a:	8c 93       	st	X, r24
		TCCR1B = (1<<WGM12) | ((s_config_ptr->edge_state)<<CS10);
    1c4c:	ae e4       	ldi	r26, 0x4E	; 78
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e9 81       	ldd	r30, Y+1	; 0x01
    1c52:	fa 81       	ldd	r31, Y+2	; 0x02
    1c54:	84 81       	ldd	r24, Z+4	; 0x04
    1c56:	87 70       	andi	r24, 0x07	; 7
    1c58:	88 60       	ori	r24, 0x08	; 8
    1c5a:	8c 93       	st	X, r24
		TIMER1A_callBack= callBack;
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	90 93 85 01 	sts	0x0185, r25
    1c64:	80 93 84 01 	sts	0x0184, r24
		if((s_config_ptr->ocx) != DISCONECT)
    1c68:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6c:	84 81       	ldd	r24, Z+4	; 0x04
    1c6e:	80 7c       	andi	r24, 0xC0	; 192
    1c70:	88 23       	and	r24, r24
    1c72:	51 f0       	breq	.+20     	; 0x1c88 <COUNTER_comparInit+0x1ea>
		{
			GPIO_setupPinDirection(PORTD_ID,PIN4_ID,PIN_OUTPUT);
    1c74:	83 e0       	ldi	r24, 0x03	; 3
    1c76:	64 e0       	ldi	r22, 0x04	; 4
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
			GPIO_writePin(PORTD_ID,PIN4_ID,LOGIC_LOW);
    1c7e:	83 e0       	ldi	r24, 0x03	; 3
    1c80:	64 e0       	ldi	r22, 0x04	; 4
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		}
	}
}
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <COUNTER_NormalInit>:


void COUNTER_NormalInit(COUNTER_Config *s_config_ptr,void (*callBack)(void))
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <COUNTER_NormalInit+0x6>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <COUNTER_NormalInit+0x8>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	9a 83       	std	Y+2, r25	; 0x02
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	7c 83       	std	Y+4, r23	; 0x04
    1ca8:	6b 83       	std	Y+3, r22	; 0x03
/*********************************************************************************************************/
	if((s_config_ptr->counter_x)==C0)
    1caa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cac:	fa 81       	ldd	r31, Y+2	; 0x02
    1cae:	84 81       	ldd	r24, Z+4	; 0x04
    1cb0:	88 73       	andi	r24, 0x38	; 56
    1cb2:	88 23       	and	r24, r24
    1cb4:	39 f5       	brne	.+78     	; 0x1d04 <COUNTER_NormalInit+0x6e>
	{
		TCNT0 = (uint8)s_config_ptr->counter_init;   /* Set Timer initial value to 0*/
    1cb6:	a2 e5       	ldi	r26, 0x52	; 82
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e9 81       	ldd	r30, Y+1	; 0x01
    1cbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbe:	80 81       	ld	r24, Z
    1cc0:	91 81       	ldd	r25, Z+1	; 0x01
    1cc2:	8c 93       	st	X, r24
		TIMSK = (TIMSK & 0xfc) | (1<<TOIE0);         /* Enable Timer0 Compare Interrupt*/
    1cc4:	a9 e5       	ldi	r26, 0x59	; 89
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	e9 e5       	ldi	r30, 0x59	; 89
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	8c 7f       	andi	r24, 0xFC	; 252
    1cd0:	81 60       	ori	r24, 0x01	; 1
    1cd2:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=0 & WGM00=0
		 * 3. s_config_ptr->ocx        : status of OC0
		 * 4. s_config_ptr->edge_state : External clock
		 */
		TCCR0 = (1<<FOC0) | ((s_config_ptr->edge_state)<<CS00);
    1cd4:	a3 e5       	ldi	r26, 0x53	; 83
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cda:	fa 81       	ldd	r31, Y+2	; 0x02
    1cdc:	84 81       	ldd	r24, Z+4	; 0x04
    1cde:	87 70       	andi	r24, 0x07	; 7
    1ce0:	80 68       	ori	r24, 0x80	; 128
    1ce2:	8c 93       	st	X, r24
		timer0_re_count=(uint8)s_config_ptr->counter_init;
    1ce4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	88 2f       	mov	r24, r24
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	90 93 7b 01 	sts	0x017B, r25
    1cf4:	80 93 7a 01 	sts	0x017A, r24
		TIMER0_callBack= callBack;
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	90 93 81 01 	sts	0x0181, r25
    1d00:	80 93 80 01 	sts	0x0180, r24
	}
/*********************************************************************************************************/
	if((s_config_ptr->counter_x)==C1)
    1d04:	e9 81       	ldd	r30, Y+1	; 0x01
    1d06:	fa 81       	ldd	r31, Y+2	; 0x02
    1d08:	84 81       	ldd	r24, Z+4	; 0x04
    1d0a:	88 73       	andi	r24, 0x38	; 56
    1d0c:	88 30       	cpi	r24, 0x08	; 8
    1d0e:	49 f5       	brne	.+82     	; 0x1d62 <COUNTER_NormalInit+0xcc>
	{
		TCNT1 = timer1_re_count;                     /* Set Timer initial value */
    1d10:	ec e4       	ldi	r30, 0x4C	; 76
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 91 7c 01 	lds	r24, 0x017C
    1d18:	90 91 7d 01 	lds	r25, 0x017D
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	80 83       	st	Z, r24
		TIMSK = (TIMSK & 0xc3) | (1<<TOIE1);         /* Enable Timer1 Overflow Interrupt*/
    1d20:	a9 e5       	ldi	r26, 0x59	; 89
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e9 e5       	ldi	r30, 0x59	; 89
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	83 7c       	andi	r24, 0xC3	; 195
    1d2c:	84 60       	ori	r24, 0x04	; 4
    1d2e:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC1A=1  FOC1B=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. s_config_ptr->ocx     : status of OC0
		 * 4. s_config_ptr->pre     : clock = F_CPU / prescaler
		 */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1d30:	ef e4       	ldi	r30, 0x4F	; 79
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	8c e0       	ldi	r24, 0x0C	; 12
    1d36:	80 83       	st	Z, r24
		TCCR1B = ((s_config_ptr->edge_state)<<CS10);
    1d38:	ae e4       	ldi	r26, 0x4E	; 78
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d40:	84 81       	ldd	r24, Z+4	; 0x04
    1d42:	87 70       	andi	r24, 0x07	; 7
    1d44:	8c 93       	st	X, r24

		timer1_re_count= s_config_ptr->counter_init;
    1d46:	e9 81       	ldd	r30, Y+1	; 0x01
    1d48:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4a:	80 81       	ld	r24, Z
    1d4c:	91 81       	ldd	r25, Z+1	; 0x01
    1d4e:	90 93 7d 01 	sts	0x017D, r25
    1d52:	80 93 7c 01 	sts	0x017C, r24
		TIMER1_callBack= callBack;
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	90 93 83 01 	sts	0x0183, r25
    1d5e:	80 93 82 01 	sts	0x0182, r24
	}
/*********************************************************************************************************/
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <PWM_init>:


void PWM_init(PWM_Config *s_config_ptr)
{
    1d70:	ef 92       	push	r14
    1d72:	ff 92       	push	r15
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	60 97       	sbiw	r28, 0x10	; 16
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	98 8b       	std	Y+16, r25	; 0x10
    1d8e:	8f 87       	std	Y+15, r24	; 0x0f
/*********************************************************************************************************/
	if((s_config_ptr->pwm_x)==PWM0)
    1d90:	ef 85       	ldd	r30, Y+15	; 0x0f
    1d92:	f8 89       	ldd	r31, Y+16	; 0x10
    1d94:	85 81       	ldd	r24, Z+5	; 0x05
    1d96:	83 70       	andi	r24, 0x03	; 3
    1d98:	88 23       	and	r24, r24
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <PWM_init+0x2e>
    1d9c:	fb c0       	rjmp	.+502    	; 0x1f94 <PWM_init+0x224>
	{
		TCNT0 = 0;                                        /* Set Timer initial value to 0*/
    1d9e:	e2 e5       	ldi	r30, 0x52	; 82
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	10 82       	st	Z, r1
		uint8 com = 50;
    1da4:	82 e3       	ldi	r24, 0x32	; 50
    1da6:	8e 87       	std	Y+14, r24	; 0x0e
		if((s_config_ptr->pwm_duty) >= 100)
    1da8:	ef 85       	ldd	r30, Y+15	; 0x0f
    1daa:	f8 89       	ldd	r31, Y+16	; 0x10
    1dac:	84 81       	ldd	r24, Z+4	; 0x04
    1dae:	84 36       	cpi	r24, 0x64	; 100
    1db0:	68 f1       	brcs	.+90     	; 0x1e0c <PWM_init+0x9c>
		{
			s_config_ptr->pwm_duty=100;
    1db2:	ef 85       	ldd	r30, Y+15	; 0x0f
    1db4:	f8 89       	ldd	r31, Y+16	; 0x10
    1db6:	84 e6       	ldi	r24, 0x64	; 100
    1db8:	84 83       	std	Z+4, r24	; 0x04
			com= (uint8)(((float)(s_config_ptr->pwm_duty)/100)*255);
    1dba:	ef 85       	ldd	r30, Y+15	; 0x0f
    1dbc:	f8 89       	ldd	r31, Y+16	; 0x10
    1dbe:	84 81       	ldd	r24, Z+4	; 0x04
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	a0 e0       	ldi	r26, 0x00	; 0
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	48 ec       	ldi	r20, 0xC8	; 200
    1dde:	52 e4       	ldi	r21, 0x42	; 66
    1de0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	bc 01       	movw	r22, r24
    1dea:	cd 01       	movw	r24, r26
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	4f e7       	ldi	r20, 0x7F	; 127
    1df2:	53 e4       	ldi	r21, 0x43	; 67
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	8e 87       	std	Y+14, r24	; 0x0e
    1e0a:	28 c0       	rjmp	.+80     	; 0x1e5c <PWM_init+0xec>
		}
		else
		{
			com= (uint8)(((float)(s_config_ptr->pwm_duty)/100)*256);
    1e0c:	ef 85       	ldd	r30, Y+15	; 0x0f
    1e0e:	f8 89       	ldd	r31, Y+16	; 0x10
    1e10:	84 81       	ldd	r24, Z+4	; 0x04
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	a0 e0       	ldi	r26, 0x00	; 0
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	48 ec       	ldi	r20, 0xC8	; 200
    1e30:	52 e4       	ldi	r21, 0x42	; 66
    1e32:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	cd 01       	movw	r24, r26
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e8       	ldi	r20, 0x80	; 128
    1e44:	53 e4       	ldi	r21, 0x43	; 67
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	8e 87       	std	Y+14, r24	; 0x0e
		}
		OCR0  = com ;                                     /* Set Compare Value*/
    1e5c:	ec e5       	ldi	r30, 0x5C	; 92
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e62:	80 83       	st	Z, r24
		TIMSK = (TIMSK & 0xfc) ;                          /*disable Timer0 Interrupt*/
    1e64:	a9 e5       	ldi	r26, 0x59	; 89
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e9 e5       	ldi	r30, 0x59	; 89
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	8c 7f       	andi	r24, 0xFC	; 252
    1e70:	8c 93       	st	X, r24

		GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	63 e0       	ldi	r22, 0x03	; 3
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
		GPIO_writePin(PORTB_ID,PIN3_ID,LOGIC_LOW);
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	63 e0       	ldi	r22, 0x03	; 3
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		 * 2. PWM Mode WGM01=1 & WGM00=1
		 * 3. s_config_ptr->pwm_state :  inverting or non inverting
		 * 4. s_config_ptr->pwm_clk   :  timer frequancy
		 */

		uint16 pre = (uint16)((F_CPU)/((float)(s_config_ptr->pwm_clk)*256));
    1e86:	ef 85       	ldd	r30, Y+15	; 0x0f
    1e88:	f8 89       	ldd	r31, Y+16	; 0x10
    1e8a:	80 81       	ld	r24, Z
    1e8c:	91 81       	ldd	r25, Z+1	; 0x01
    1e8e:	cc 01       	movw	r24, r24
    1e90:	a0 e0       	ldi	r26, 0x00	; 0
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e8       	ldi	r20, 0x80	; 128
    1eaa:	53 e4       	ldi	r21, 0x43	; 67
    1eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9c 01       	movw	r18, r24
    1eb6:	ad 01       	movw	r20, r26
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	74 e2       	ldi	r23, 0x24	; 36
    1ebc:	84 ef       	ldi	r24, 0xF4	; 244
    1ebe:	9a e4       	ldi	r25, 0x4A	; 74
    1ec0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	9d 87       	std	Y+13, r25	; 0x0d
    1ed6:	8c 87       	std	Y+12, r24	; 0x0c
		if((pre > 0) && (pre <= 4))
    1ed8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1eda:	9d 85       	ldd	r25, Y+13	; 0x0d
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	51 f0       	breq	.+20     	; 0x1ef4 <PWM_init+0x184>
    1ee0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ee2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ee4:	85 30       	cpi	r24, 0x05	; 5
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	28 f4       	brcc	.+10     	; 0x1ef4 <PWM_init+0x184>
		{
			pre =1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9d 87       	std	Y+13, r25	; 0x0d
    1ef0:	8c 87       	std	Y+12, r24	; 0x0c
    1ef2:	41 c0       	rjmp	.+130    	; 0x1f76 <PWM_init+0x206>
		}
		else if((pre > 4) && (pre <= 10))
    1ef4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ef6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ef8:	85 30       	cpi	r24, 0x05	; 5
    1efa:	91 05       	cpc	r25, r1
    1efc:	50 f0       	brcs	.+20     	; 0x1f12 <PWM_init+0x1a2>
    1efe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f00:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f02:	8b 30       	cpi	r24, 0x0B	; 11
    1f04:	91 05       	cpc	r25, r1
    1f06:	28 f4       	brcc	.+10     	; 0x1f12 <PWM_init+0x1a2>
		{
			pre =2;
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9d 87       	std	Y+13, r25	; 0x0d
    1f0e:	8c 87       	std	Y+12, r24	; 0x0c
    1f10:	32 c0       	rjmp	.+100    	; 0x1f76 <PWM_init+0x206>
		}
		else if((pre > 10) && (pre <= 70))
    1f12:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f14:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f16:	8b 30       	cpi	r24, 0x0B	; 11
    1f18:	91 05       	cpc	r25, r1
    1f1a:	50 f0       	brcs	.+20     	; 0x1f30 <PWM_init+0x1c0>
    1f1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f1e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f20:	87 34       	cpi	r24, 0x47	; 71
    1f22:	91 05       	cpc	r25, r1
    1f24:	28 f4       	brcc	.+10     	; 0x1f30 <PWM_init+0x1c0>
		{
			pre =3;
    1f26:	83 e0       	ldi	r24, 0x03	; 3
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9d 87       	std	Y+13, r25	; 0x0d
    1f2c:	8c 87       	std	Y+12, r24	; 0x0c
    1f2e:	23 c0       	rjmp	.+70     	; 0x1f76 <PWM_init+0x206>
		}
		else if((pre > 70) && (pre <= 300))
    1f30:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f32:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f34:	87 34       	cpi	r24, 0x47	; 71
    1f36:	91 05       	cpc	r25, r1
    1f38:	58 f0       	brcs	.+22     	; 0x1f50 <PWM_init+0x1e0>
    1f3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f3e:	21 e0       	ldi	r18, 0x01	; 1
    1f40:	8d 32       	cpi	r24, 0x2D	; 45
    1f42:	92 07       	cpc	r25, r18
    1f44:	28 f4       	brcc	.+10     	; 0x1f50 <PWM_init+0x1e0>
		{
			pre =4;
    1f46:	84 e0       	ldi	r24, 0x04	; 4
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9d 87       	std	Y+13, r25	; 0x0d
    1f4c:	8c 87       	std	Y+12, r24	; 0x0c
    1f4e:	13 c0       	rjmp	.+38     	; 0x1f76 <PWM_init+0x206>
		}
		else if((pre > 300) && (pre <= 1024))
    1f50:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f52:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f54:	21 e0       	ldi	r18, 0x01	; 1
    1f56:	8d 32       	cpi	r24, 0x2D	; 45
    1f58:	92 07       	cpc	r25, r18
    1f5a:	58 f0       	brcs	.+22     	; 0x1f72 <PWM_init+0x202>
    1f5c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f5e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f60:	24 e0       	ldi	r18, 0x04	; 4
    1f62:	81 30       	cpi	r24, 0x01	; 1
    1f64:	92 07       	cpc	r25, r18
    1f66:	28 f4       	brcc	.+10     	; 0x1f72 <PWM_init+0x202>
		{
			pre =5;
    1f68:	85 e0       	ldi	r24, 0x05	; 5
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9d 87       	std	Y+13, r25	; 0x0d
    1f6e:	8c 87       	std	Y+12, r24	; 0x0c
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <PWM_init+0x206>
		}
		else
		{
			pre = 0;
    1f72:	1d 86       	std	Y+13, r1	; 0x0d
    1f74:	1c 86       	std	Y+12, r1	; 0x0c
		}

		TCCR0 = (1<<WGM00) | (1<<WGM01) | ((s_config_ptr->pwm_state)<<COM00) | ((pre)<<CS00);
    1f76:	a3 e5       	ldi	r26, 0x53	; 83
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	ef 85       	ldd	r30, Y+15	; 0x0f
    1f7c:	f8 89       	ldd	r31, Y+16	; 0x10
    1f7e:	85 81       	ldd	r24, Z+5	; 0x05
    1f80:	86 95       	lsr	r24
    1f82:	86 95       	lsr	r24
    1f84:	83 70       	andi	r24, 0x03	; 3
    1f86:	98 2f       	mov	r25, r24
    1f88:	92 95       	swap	r25
    1f8a:	90 7f       	andi	r25, 0xF0	; 240
    1f8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f8e:	89 2b       	or	r24, r25
    1f90:	88 64       	ori	r24, 0x48	; 72
    1f92:	8c 93       	st	X, r24


	}
/*********************************************************************************************************/
	if((s_config_ptr->pwm_x)==PWM1A)
    1f94:	ef 85       	ldd	r30, Y+15	; 0x0f
    1f96:	f8 89       	ldd	r31, Y+16	; 0x10
    1f98:	85 81       	ldd	r24, Z+5	; 0x05
    1f9a:	83 70       	andi	r24, 0x03	; 3
    1f9c:	81 30       	cpi	r24, 0x01	; 1
    1f9e:	09 f0       	breq	.+2      	; 0x1fa2 <PWM_init+0x232>
    1fa0:	37 c1       	rjmp	.+622    	; 0x2210 <PWM_init+0x4a0>
	{
		TCNT1 = 0;                                        /* Set Timer initial value to 0*/
    1fa2:	ec e4       	ldi	r30, 0x4C	; 76
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	11 82       	std	Z+1, r1	; 0x01
    1fa8:	10 82       	st	Z, r1
		uint16 com = 100;
    1faa:	84 e6       	ldi	r24, 0x64	; 100
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9b 87       	std	Y+11, r25	; 0x0b
    1fb0:	8a 87       	std	Y+10, r24	; 0x0a
		if((s_config_ptr->pwm_duty) >= 100)
    1fb2:	ef 85       	ldd	r30, Y+15	; 0x0f
    1fb4:	f8 89       	ldd	r31, Y+16	; 0x10
    1fb6:	84 81       	ldd	r24, Z+4	; 0x04
    1fb8:	84 36       	cpi	r24, 0x64	; 100
    1fba:	c8 f1       	brcs	.+114    	; 0x202e <PWM_init+0x2be>
		{
			s_config_ptr->pwm_duty=100;
    1fbc:	ef 85       	ldd	r30, Y+15	; 0x0f
    1fbe:	f8 89       	ldd	r31, Y+16	; 0x10
    1fc0:	84 e6       	ldi	r24, 0x64	; 100
    1fc2:	84 83       	std	Z+4, r24	; 0x04
			com= (uint16)(((float)(s_config_ptr->pwm_duty)/100)*(s_config_ptr->pwm_com));
    1fc4:	ef 85       	ldd	r30, Y+15	; 0x0f
    1fc6:	f8 89       	ldd	r31, Y+16	; 0x10
    1fc8:	84 81       	ldd	r24, Z+4	; 0x04
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	a0 e0       	ldi	r26, 0x00	; 0
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	48 ec       	ldi	r20, 0xC8	; 200
    1fe8:	52 e4       	ldi	r21, 0x42	; 66
    1fea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	7c 01       	movw	r14, r24
    1ff4:	8d 01       	movw	r16, r26
    1ff6:	ef 85       	ldd	r30, Y+15	; 0x0f
    1ff8:	f8 89       	ldd	r31, Y+16	; 0x10
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	cc 01       	movw	r24, r24
    2000:	a0 e0       	ldi	r26, 0x00	; 0
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	bc 01       	movw	r22, r24
    2006:	cd 01       	movw	r24, r26
    2008:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    200c:	9b 01       	movw	r18, r22
    200e:	ac 01       	movw	r20, r24
    2010:	c8 01       	movw	r24, r16
    2012:	b7 01       	movw	r22, r14
    2014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	bc 01       	movw	r22, r24
    201e:	cd 01       	movw	r24, r26
    2020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	9b 87       	std	Y+11, r25	; 0x0b
    202a:	8a 87       	std	Y+10, r24	; 0x0a
    202c:	35 c0       	rjmp	.+106    	; 0x2098 <PWM_init+0x328>
		}
		else
		{
			com= (uint16)(((float)(s_config_ptr->pwm_duty)/100)*((s_config_ptr->pwm_com)+1));
    202e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2030:	f8 89       	ldd	r31, Y+16	; 0x10
    2032:	84 81       	ldd	r24, Z+4	; 0x04
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e0       	ldi	r26, 0x00	; 0
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	48 ec       	ldi	r20, 0xC8	; 200
    2052:	52 e4       	ldi	r21, 0x42	; 66
    2054:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	7c 01       	movw	r14, r24
    205e:	8d 01       	movw	r16, r26
    2060:	ef 85       	ldd	r30, Y+15	; 0x0f
    2062:	f8 89       	ldd	r31, Y+16	; 0x10
    2064:	82 81       	ldd	r24, Z+2	; 0x02
    2066:	93 81       	ldd	r25, Z+3	; 0x03
    2068:	01 96       	adiw	r24, 0x01	; 1
    206a:	cc 01       	movw	r24, r24
    206c:	a0 e0       	ldi	r26, 0x00	; 0
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2078:	9b 01       	movw	r18, r22
    207a:	ac 01       	movw	r20, r24
    207c:	c8 01       	movw	r24, r16
    207e:	b7 01       	movw	r22, r14
    2080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	bc 01       	movw	r22, r24
    208a:	cd 01       	movw	r24, r26
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9b 87       	std	Y+11, r25	; 0x0b
    2096:	8a 87       	std	Y+10, r24	; 0x0a
		}
		ICR1  = (s_config_ptr->pwm_com) +1;
    2098:	a6 e4       	ldi	r26, 0x46	; 70
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	ef 85       	ldd	r30, Y+15	; 0x0f
    209e:	f8 89       	ldd	r31, Y+16	; 0x10
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	93 81       	ldd	r25, Z+3	; 0x03
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	11 96       	adiw	r26, 0x01	; 1
    20a8:	9c 93       	st	X, r25
    20aa:	8e 93       	st	-X, r24
		OCR1A = com ;                                      /* Set Compare Value*/
    20ac:	ea e4       	ldi	r30, 0x4A	; 74
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24
		TIMSK = (TIMSK & 0xc3) ;                           /*disable Timer1 Interrupt*/
    20b8:	a9 e5       	ldi	r26, 0x59	; 89
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e9 e5       	ldi	r30, 0x59	; 89
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	83 7c       	andi	r24, 0xC3	; 195
    20c4:	8c 93       	st	X, r24

		GPIO_setupPinDirection(PORTD_ID,PIN5_ID,PIN_OUTPUT);
    20c6:	83 e0       	ldi	r24, 0x03	; 3
    20c8:	65 e0       	ldi	r22, 0x05	; 5
    20ca:	41 e0       	ldi	r20, 0x01	; 1
    20cc:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
		GPIO_writePin(PORTD_ID,PIN5_ID,LOGIC_LOW);
    20d0:	83 e0       	ldi	r24, 0x03	; 3
    20d2:	65 e0       	ldi	r22, 0x05	; 5
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		 * 2. PWM Mode  WGM13=1 & WGM12=1 & WGM11=1 & WGM10=0
		 * 3. s_config_ptr->pwm_state :  inverting or non inverting
		 * 4. s_config_ptr->pwm_clk   :  timer frequancy
		 */

		uint16 pre = (uint16)((F_CPU) / ( (float)(s_config_ptr->pwm_clk)*(1+s_config_ptr->pwm_com)) );
    20da:	ef 85       	ldd	r30, Y+15	; 0x0f
    20dc:	f8 89       	ldd	r31, Y+16	; 0x10
    20de:	80 81       	ld	r24, Z
    20e0:	91 81       	ldd	r25, Z+1	; 0x01
    20e2:	cc 01       	movw	r24, r24
    20e4:	a0 e0       	ldi	r26, 0x00	; 0
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	bc 01       	movw	r22, r24
    20ea:	cd 01       	movw	r24, r26
    20ec:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    20f0:	7b 01       	movw	r14, r22
    20f2:	8c 01       	movw	r16, r24
    20f4:	ef 85       	ldd	r30, Y+15	; 0x0f
    20f6:	f8 89       	ldd	r31, Y+16	; 0x10
    20f8:	82 81       	ldd	r24, Z+2	; 0x02
    20fa:	93 81       	ldd	r25, Z+3	; 0x03
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	cc 01       	movw	r24, r24
    2100:	a0 e0       	ldi	r26, 0x00	; 0
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    210c:	9b 01       	movw	r18, r22
    210e:	ac 01       	movw	r20, r24
    2110:	c8 01       	movw	r24, r16
    2112:	b7 01       	movw	r22, r14
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9c 01       	movw	r18, r24
    211e:	ad 01       	movw	r20, r26
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	74 e2       	ldi	r23, 0x24	; 36
    2124:	84 ef       	ldi	r24, 0xF4	; 244
    2126:	9a e4       	ldi	r25, 0x4A	; 74
    2128:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	99 87       	std	Y+9, r25	; 0x09
    213e:	88 87       	std	Y+8, r24	; 0x08
		if((pre > 0) && (pre <= 4))
    2140:	88 85       	ldd	r24, Y+8	; 0x08
    2142:	99 85       	ldd	r25, Y+9	; 0x09
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	51 f0       	breq	.+20     	; 0x215c <PWM_init+0x3ec>
    2148:	88 85       	ldd	r24, Y+8	; 0x08
    214a:	99 85       	ldd	r25, Y+9	; 0x09
    214c:	85 30       	cpi	r24, 0x05	; 5
    214e:	91 05       	cpc	r25, r1
    2150:	28 f4       	brcc	.+10     	; 0x215c <PWM_init+0x3ec>
		{
			pre =1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	99 87       	std	Y+9, r25	; 0x09
    2158:	88 87       	std	Y+8, r24	; 0x08
    215a:	41 c0       	rjmp	.+130    	; 0x21de <PWM_init+0x46e>
		}
		else if((pre > 4) && (pre <= 10))
    215c:	88 85       	ldd	r24, Y+8	; 0x08
    215e:	99 85       	ldd	r25, Y+9	; 0x09
    2160:	85 30       	cpi	r24, 0x05	; 5
    2162:	91 05       	cpc	r25, r1
    2164:	50 f0       	brcs	.+20     	; 0x217a <PWM_init+0x40a>
    2166:	88 85       	ldd	r24, Y+8	; 0x08
    2168:	99 85       	ldd	r25, Y+9	; 0x09
    216a:	8b 30       	cpi	r24, 0x0B	; 11
    216c:	91 05       	cpc	r25, r1
    216e:	28 f4       	brcc	.+10     	; 0x217a <PWM_init+0x40a>
		{
			pre =2;
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	99 87       	std	Y+9, r25	; 0x09
    2176:	88 87       	std	Y+8, r24	; 0x08
    2178:	32 c0       	rjmp	.+100    	; 0x21de <PWM_init+0x46e>
		}
		else if((pre > 10) && (pre <= 70))
    217a:	88 85       	ldd	r24, Y+8	; 0x08
    217c:	99 85       	ldd	r25, Y+9	; 0x09
    217e:	8b 30       	cpi	r24, 0x0B	; 11
    2180:	91 05       	cpc	r25, r1
    2182:	50 f0       	brcs	.+20     	; 0x2198 <PWM_init+0x428>
    2184:	88 85       	ldd	r24, Y+8	; 0x08
    2186:	99 85       	ldd	r25, Y+9	; 0x09
    2188:	87 34       	cpi	r24, 0x47	; 71
    218a:	91 05       	cpc	r25, r1
    218c:	28 f4       	brcc	.+10     	; 0x2198 <PWM_init+0x428>
		{
			pre =3;
    218e:	83 e0       	ldi	r24, 0x03	; 3
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	99 87       	std	Y+9, r25	; 0x09
    2194:	88 87       	std	Y+8, r24	; 0x08
    2196:	23 c0       	rjmp	.+70     	; 0x21de <PWM_init+0x46e>
		}
		else if((pre > 70) && (pre <= 300))
    2198:	88 85       	ldd	r24, Y+8	; 0x08
    219a:	99 85       	ldd	r25, Y+9	; 0x09
    219c:	87 34       	cpi	r24, 0x47	; 71
    219e:	91 05       	cpc	r25, r1
    21a0:	58 f0       	brcs	.+22     	; 0x21b8 <PWM_init+0x448>
    21a2:	88 85       	ldd	r24, Y+8	; 0x08
    21a4:	99 85       	ldd	r25, Y+9	; 0x09
    21a6:	21 e0       	ldi	r18, 0x01	; 1
    21a8:	8d 32       	cpi	r24, 0x2D	; 45
    21aa:	92 07       	cpc	r25, r18
    21ac:	28 f4       	brcc	.+10     	; 0x21b8 <PWM_init+0x448>
		{
			pre =4;
    21ae:	84 e0       	ldi	r24, 0x04	; 4
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	99 87       	std	Y+9, r25	; 0x09
    21b4:	88 87       	std	Y+8, r24	; 0x08
    21b6:	13 c0       	rjmp	.+38     	; 0x21de <PWM_init+0x46e>
		}
		else if((pre > 300) && (pre <= 1024))
    21b8:	88 85       	ldd	r24, Y+8	; 0x08
    21ba:	99 85       	ldd	r25, Y+9	; 0x09
    21bc:	21 e0       	ldi	r18, 0x01	; 1
    21be:	8d 32       	cpi	r24, 0x2D	; 45
    21c0:	92 07       	cpc	r25, r18
    21c2:	58 f0       	brcs	.+22     	; 0x21da <PWM_init+0x46a>
    21c4:	88 85       	ldd	r24, Y+8	; 0x08
    21c6:	99 85       	ldd	r25, Y+9	; 0x09
    21c8:	24 e0       	ldi	r18, 0x04	; 4
    21ca:	81 30       	cpi	r24, 0x01	; 1
    21cc:	92 07       	cpc	r25, r18
    21ce:	28 f4       	brcc	.+10     	; 0x21da <PWM_init+0x46a>
		{
			pre =5;
    21d0:	85 e0       	ldi	r24, 0x05	; 5
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	99 87       	std	Y+9, r25	; 0x09
    21d6:	88 87       	std	Y+8, r24	; 0x08
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <PWM_init+0x46e>
		}
		else
		{
			pre = 0;
    21da:	19 86       	std	Y+9, r1	; 0x09
    21dc:	18 86       	std	Y+8, r1	; 0x08
		}

		TCCR1A = (1<<WGM11) | (1<<WGM12) | (1<<WGM13) | ((s_config_ptr->pwm_state)<<COM1A0);
    21de:	af e4       	ldi	r26, 0x4F	; 79
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	ef 85       	ldd	r30, Y+15	; 0x0f
    21e4:	f8 89       	ldd	r31, Y+16	; 0x10
    21e6:	85 81       	ldd	r24, Z+5	; 0x05
    21e8:	86 95       	lsr	r24
    21ea:	86 95       	lsr	r24
    21ec:	83 70       	andi	r24, 0x03	; 3
    21ee:	88 2f       	mov	r24, r24
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	00 24       	eor	r0, r0
    21f4:	96 95       	lsr	r25
    21f6:	87 95       	ror	r24
    21f8:	07 94       	ror	r0
    21fa:	96 95       	lsr	r25
    21fc:	87 95       	ror	r24
    21fe:	07 94       	ror	r0
    2200:	98 2f       	mov	r25, r24
    2202:	80 2d       	mov	r24, r0
    2204:	8a 61       	ori	r24, 0x1A	; 26
    2206:	8c 93       	st	X, r24
		TCCR1B =((pre)<<CS10);
    2208:	ee e4       	ldi	r30, 0x4E	; 78
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	88 85       	ldd	r24, Y+8	; 0x08
    220e:	80 83       	st	Z, r24

	}
/*********************************************************************************************************/
	if((s_config_ptr->pwm_x)==PWM1B)
    2210:	ef 85       	ldd	r30, Y+15	; 0x0f
    2212:	f8 89       	ldd	r31, Y+16	; 0x10
    2214:	85 81       	ldd	r24, Z+5	; 0x05
    2216:	83 70       	andi	r24, 0x03	; 3
    2218:	82 30       	cpi	r24, 0x02	; 2
    221a:	09 f0       	breq	.+2      	; 0x221e <PWM_init+0x4ae>
    221c:	34 c1       	rjmp	.+616    	; 0x2486 <PWM_init+0x716>
	{
		TCNT1 = 0;                                        /* Set Timer initial value to 0*/
    221e:	ec e4       	ldi	r30, 0x4C	; 76
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	11 82       	std	Z+1, r1	; 0x01
    2224:	10 82       	st	Z, r1
		uint16 com = 100;
    2226:	84 e6       	ldi	r24, 0x64	; 100
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	9f 83       	std	Y+7, r25	; 0x07
    222c:	8e 83       	std	Y+6, r24	; 0x06
		if((s_config_ptr->pwm_duty) >= 100)
    222e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2230:	f8 89       	ldd	r31, Y+16	; 0x10
    2232:	84 81       	ldd	r24, Z+4	; 0x04
    2234:	84 36       	cpi	r24, 0x64	; 100
    2236:	c8 f1       	brcs	.+114    	; 0x22aa <PWM_init+0x53a>
		{
			s_config_ptr->pwm_duty=100;
    2238:	ef 85       	ldd	r30, Y+15	; 0x0f
    223a:	f8 89       	ldd	r31, Y+16	; 0x10
    223c:	84 e6       	ldi	r24, 0x64	; 100
    223e:	84 83       	std	Z+4, r24	; 0x04
			com= (uint16)(((float)(s_config_ptr->pwm_duty)/100)*(s_config_ptr->pwm_com));
    2240:	ef 85       	ldd	r30, Y+15	; 0x0f
    2242:	f8 89       	ldd	r31, Y+16	; 0x10
    2244:	84 81       	ldd	r24, Z+4	; 0x04
    2246:	88 2f       	mov	r24, r24
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	a0 e0       	ldi	r26, 0x00	; 0
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	48 ec       	ldi	r20, 0xC8	; 200
    2264:	52 e4       	ldi	r21, 0x42	; 66
    2266:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	7c 01       	movw	r14, r24
    2270:	8d 01       	movw	r16, r26
    2272:	ef 85       	ldd	r30, Y+15	; 0x0f
    2274:	f8 89       	ldd	r31, Y+16	; 0x10
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	cc 01       	movw	r24, r24
    227c:	a0 e0       	ldi	r26, 0x00	; 0
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2288:	9b 01       	movw	r18, r22
    228a:	ac 01       	movw	r20, r24
    228c:	c8 01       	movw	r24, r16
    228e:	b7 01       	movw	r22, r14
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9f 83       	std	Y+7, r25	; 0x07
    22a6:	8e 83       	std	Y+6, r24	; 0x06
    22a8:	35 c0       	rjmp	.+106    	; 0x2314 <PWM_init+0x5a4>
		}
		else
		{
			com= (uint16)(((float)(s_config_ptr->pwm_duty)/100)*((s_config_ptr->pwm_com)+1));
    22aa:	ef 85       	ldd	r30, Y+15	; 0x0f
    22ac:	f8 89       	ldd	r31, Y+16	; 0x10
    22ae:	84 81       	ldd	r24, Z+4	; 0x04
    22b0:	88 2f       	mov	r24, r24
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a0 e0       	ldi	r26, 0x00	; 0
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	48 ec       	ldi	r20, 0xC8	; 200
    22ce:	52 e4       	ldi	r21, 0x42	; 66
    22d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	7c 01       	movw	r14, r24
    22da:	8d 01       	movw	r16, r26
    22dc:	ef 85       	ldd	r30, Y+15	; 0x0f
    22de:	f8 89       	ldd	r31, Y+16	; 0x10
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	01 96       	adiw	r24, 0x01	; 1
    22e6:	cc 01       	movw	r24, r24
    22e8:	a0 e0       	ldi	r26, 0x00	; 0
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    22f4:	9b 01       	movw	r18, r22
    22f6:	ac 01       	movw	r20, r24
    22f8:	c8 01       	movw	r24, r16
    22fa:	b7 01       	movw	r22, r14
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9f 83       	std	Y+7, r25	; 0x07
    2312:	8e 83       	std	Y+6, r24	; 0x06
		}
		ICR1  = (s_config_ptr->pwm_com) +1;
    2314:	a6 e4       	ldi	r26, 0x46	; 70
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	ef 85       	ldd	r30, Y+15	; 0x0f
    231a:	f8 89       	ldd	r31, Y+16	; 0x10
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	01 96       	adiw	r24, 0x01	; 1
    2322:	11 96       	adiw	r26, 0x01	; 1
    2324:	9c 93       	st	X, r25
    2326:	8e 93       	st	-X, r24
		OCR1B = com ;                                      /* Set Compare Value*/
    2328:	e8 e4       	ldi	r30, 0x48	; 72
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	8e 81       	ldd	r24, Y+6	; 0x06
    232e:	9f 81       	ldd	r25, Y+7	; 0x07
    2330:	91 83       	std	Z+1, r25	; 0x01
    2332:	80 83       	st	Z, r24
		TIMSK = (TIMSK & 0xc3) ;                           /*disable Timer1 Interrupt*/
    2334:	a9 e5       	ldi	r26, 0x59	; 89
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e9 e5       	ldi	r30, 0x59	; 89
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	83 7c       	andi	r24, 0xC3	; 195
    2340:	8c 93       	st	X, r24

		GPIO_setupPinDirection(PORTD_ID,PIN4_ID,PIN_OUTPUT);
    2342:	83 e0       	ldi	r24, 0x03	; 3
    2344:	64 e0       	ldi	r22, 0x04	; 4
    2346:	41 e0       	ldi	r20, 0x01	; 1
    2348:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
		GPIO_writePin(PORTD_ID,PIN4_ID,LOGIC_LOW);
    234c:	83 e0       	ldi	r24, 0x03	; 3
    234e:	64 e0       	ldi	r22, 0x04	; 4
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		 * 2. PWM Mode  WGM13=1 & WGM12=1 & WGM11=1 & WGM10=0
		 * 3. s_config_ptr->pwm_state :  inverting or non inverting
		 * 4. s_config_ptr->pwm_clk   :  timer frequancy
		 */

		uint16 pre = (uint16)((F_CPU) / ( (float)(s_config_ptr->pwm_clk)*(1+s_config_ptr->pwm_com)) );
    2356:	ef 85       	ldd	r30, Y+15	; 0x0f
    2358:	f8 89       	ldd	r31, Y+16	; 0x10
    235a:	80 81       	ld	r24, Z
    235c:	91 81       	ldd	r25, Z+1	; 0x01
    235e:	cc 01       	movw	r24, r24
    2360:	a0 e0       	ldi	r26, 0x00	; 0
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    236c:	7b 01       	movw	r14, r22
    236e:	8c 01       	movw	r16, r24
    2370:	ef 85       	ldd	r30, Y+15	; 0x0f
    2372:	f8 89       	ldd	r31, Y+16	; 0x10
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	01 96       	adiw	r24, 0x01	; 1
    237a:	cc 01       	movw	r24, r24
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2388:	9b 01       	movw	r18, r22
    238a:	ac 01       	movw	r20, r24
    238c:	c8 01       	movw	r24, r16
    238e:	b7 01       	movw	r22, r14
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9c 01       	movw	r18, r24
    239a:	ad 01       	movw	r20, r26
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	74 e2       	ldi	r23, 0x24	; 36
    23a0:	84 ef       	ldi	r24, 0xF4	; 244
    23a2:	9a e4       	ldi	r25, 0x4A	; 74
    23a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9d 83       	std	Y+5, r25	; 0x05
    23ba:	8c 83       	std	Y+4, r24	; 0x04
		if((pre > 0) && (pre <= 4))
    23bc:	8c 81       	ldd	r24, Y+4	; 0x04
    23be:	9d 81       	ldd	r25, Y+5	; 0x05
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	51 f0       	breq	.+20     	; 0x23d8 <PWM_init+0x668>
    23c4:	8c 81       	ldd	r24, Y+4	; 0x04
    23c6:	9d 81       	ldd	r25, Y+5	; 0x05
    23c8:	85 30       	cpi	r24, 0x05	; 5
    23ca:	91 05       	cpc	r25, r1
    23cc:	28 f4       	brcc	.+10     	; 0x23d8 <PWM_init+0x668>
		{
			pre =1;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	9d 83       	std	Y+5, r25	; 0x05
    23d4:	8c 83       	std	Y+4, r24	; 0x04
    23d6:	41 c0       	rjmp	.+130    	; 0x245a <PWM_init+0x6ea>
		}
		else if((pre > 4) && (pre <= 10))
    23d8:	8c 81       	ldd	r24, Y+4	; 0x04
    23da:	9d 81       	ldd	r25, Y+5	; 0x05
    23dc:	85 30       	cpi	r24, 0x05	; 5
    23de:	91 05       	cpc	r25, r1
    23e0:	50 f0       	brcs	.+20     	; 0x23f6 <PWM_init+0x686>
    23e2:	8c 81       	ldd	r24, Y+4	; 0x04
    23e4:	9d 81       	ldd	r25, Y+5	; 0x05
    23e6:	8b 30       	cpi	r24, 0x0B	; 11
    23e8:	91 05       	cpc	r25, r1
    23ea:	28 f4       	brcc	.+10     	; 0x23f6 <PWM_init+0x686>
		{
			pre =2;
    23ec:	82 e0       	ldi	r24, 0x02	; 2
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9d 83       	std	Y+5, r25	; 0x05
    23f2:	8c 83       	std	Y+4, r24	; 0x04
    23f4:	32 c0       	rjmp	.+100    	; 0x245a <PWM_init+0x6ea>
		}
		else if((pre > 10) && (pre <= 70))
    23f6:	8c 81       	ldd	r24, Y+4	; 0x04
    23f8:	9d 81       	ldd	r25, Y+5	; 0x05
    23fa:	8b 30       	cpi	r24, 0x0B	; 11
    23fc:	91 05       	cpc	r25, r1
    23fe:	50 f0       	brcs	.+20     	; 0x2414 <PWM_init+0x6a4>
    2400:	8c 81       	ldd	r24, Y+4	; 0x04
    2402:	9d 81       	ldd	r25, Y+5	; 0x05
    2404:	87 34       	cpi	r24, 0x47	; 71
    2406:	91 05       	cpc	r25, r1
    2408:	28 f4       	brcc	.+10     	; 0x2414 <PWM_init+0x6a4>
		{
			pre =3;
    240a:	83 e0       	ldi	r24, 0x03	; 3
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9d 83       	std	Y+5, r25	; 0x05
    2410:	8c 83       	std	Y+4, r24	; 0x04
    2412:	23 c0       	rjmp	.+70     	; 0x245a <PWM_init+0x6ea>
		}
		else if((pre > 70) && (pre <= 300))
    2414:	8c 81       	ldd	r24, Y+4	; 0x04
    2416:	9d 81       	ldd	r25, Y+5	; 0x05
    2418:	87 34       	cpi	r24, 0x47	; 71
    241a:	91 05       	cpc	r25, r1
    241c:	58 f0       	brcs	.+22     	; 0x2434 <PWM_init+0x6c4>
    241e:	8c 81       	ldd	r24, Y+4	; 0x04
    2420:	9d 81       	ldd	r25, Y+5	; 0x05
    2422:	21 e0       	ldi	r18, 0x01	; 1
    2424:	8d 32       	cpi	r24, 0x2D	; 45
    2426:	92 07       	cpc	r25, r18
    2428:	28 f4       	brcc	.+10     	; 0x2434 <PWM_init+0x6c4>
		{
			pre =4;
    242a:	84 e0       	ldi	r24, 0x04	; 4
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	9d 83       	std	Y+5, r25	; 0x05
    2430:	8c 83       	std	Y+4, r24	; 0x04
    2432:	13 c0       	rjmp	.+38     	; 0x245a <PWM_init+0x6ea>
		}
		else if((pre > 300) && (pre <= 1024))
    2434:	8c 81       	ldd	r24, Y+4	; 0x04
    2436:	9d 81       	ldd	r25, Y+5	; 0x05
    2438:	21 e0       	ldi	r18, 0x01	; 1
    243a:	8d 32       	cpi	r24, 0x2D	; 45
    243c:	92 07       	cpc	r25, r18
    243e:	58 f0       	brcs	.+22     	; 0x2456 <PWM_init+0x6e6>
    2440:	8c 81       	ldd	r24, Y+4	; 0x04
    2442:	9d 81       	ldd	r25, Y+5	; 0x05
    2444:	24 e0       	ldi	r18, 0x04	; 4
    2446:	81 30       	cpi	r24, 0x01	; 1
    2448:	92 07       	cpc	r25, r18
    244a:	28 f4       	brcc	.+10     	; 0x2456 <PWM_init+0x6e6>
		{
			pre =5;
    244c:	85 e0       	ldi	r24, 0x05	; 5
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9d 83       	std	Y+5, r25	; 0x05
    2452:	8c 83       	std	Y+4, r24	; 0x04
    2454:	02 c0       	rjmp	.+4      	; 0x245a <PWM_init+0x6ea>
		}
		else
		{
			pre = 0;
    2456:	1d 82       	std	Y+5, r1	; 0x05
    2458:	1c 82       	std	Y+4, r1	; 0x04
		}

		TCCR1A = (1<<WGM11) | (1<<WGM12) | (1<<WGM13) | ((s_config_ptr->pwm_state)<<COM1B0);
    245a:	af e4       	ldi	r26, 0x4F	; 79
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2460:	f8 89       	ldd	r31, Y+16	; 0x10
    2462:	85 81       	ldd	r24, Z+5	; 0x05
    2464:	86 95       	lsr	r24
    2466:	86 95       	lsr	r24
    2468:	83 70       	andi	r24, 0x03	; 3
    246a:	88 2f       	mov	r24, r24
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	82 95       	swap	r24
    2470:	92 95       	swap	r25
    2472:	90 7f       	andi	r25, 0xF0	; 240
    2474:	98 27       	eor	r25, r24
    2476:	80 7f       	andi	r24, 0xF0	; 240
    2478:	98 27       	eor	r25, r24
    247a:	8a 61       	ori	r24, 0x1A	; 26
    247c:	8c 93       	st	X, r24
		TCCR1B =((pre)<<CS10);
    247e:	ee e4       	ldi	r30, 0x4E	; 78
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	8c 81       	ldd	r24, Y+4	; 0x04
    2484:	80 83       	st	Z, r24

	}
/*********************************************************************************************************/

	if((s_config_ptr->pwm_x)==PWM2)
    2486:	ef 85       	ldd	r30, Y+15	; 0x0f
    2488:	f8 89       	ldd	r31, Y+16	; 0x10
    248a:	85 81       	ldd	r24, Z+5	; 0x05
    248c:	83 70       	andi	r24, 0x03	; 3
    248e:	83 30       	cpi	r24, 0x03	; 3
    2490:	09 f0       	breq	.+2      	; 0x2494 <PWM_init+0x724>
    2492:	ff c0       	rjmp	.+510    	; 0x2692 <PWM_init+0x922>
	{
		ASSR = (1<<AS2);                             /* Timer/Counter2 is clocked from a Crystal Oscillator*/
    2494:	e2 e4       	ldi	r30, 0x42	; 66
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	88 e0       	ldi	r24, 0x08	; 8
    249a:	80 83       	st	Z, r24
		TCNT2 = 0;                                   /* Set Timer initial value to 0*/
    249c:	e4 e4       	ldi	r30, 0x44	; 68
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	10 82       	st	Z, r1
		uint8 com = 50;
    24a2:	82 e3       	ldi	r24, 0x32	; 50
    24a4:	8b 83       	std	Y+3, r24	; 0x03
		if((s_config_ptr->pwm_duty) >= 100)
    24a6:	ef 85       	ldd	r30, Y+15	; 0x0f
    24a8:	f8 89       	ldd	r31, Y+16	; 0x10
    24aa:	84 81       	ldd	r24, Z+4	; 0x04
    24ac:	84 36       	cpi	r24, 0x64	; 100
    24ae:	68 f1       	brcs	.+90     	; 0x250a <PWM_init+0x79a>
		{
			s_config_ptr->pwm_duty=100;
    24b0:	ef 85       	ldd	r30, Y+15	; 0x0f
    24b2:	f8 89       	ldd	r31, Y+16	; 0x10
    24b4:	84 e6       	ldi	r24, 0x64	; 100
    24b6:	84 83       	std	Z+4, r24	; 0x04
			com= (uint8)(((float)(s_config_ptr->pwm_duty)/100)*255);
    24b8:	ef 85       	ldd	r30, Y+15	; 0x0f
    24ba:	f8 89       	ldd	r31, Y+16	; 0x10
    24bc:	84 81       	ldd	r24, Z+4	; 0x04
    24be:	88 2f       	mov	r24, r24
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	a0 e0       	ldi	r26, 0x00	; 0
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	bc 01       	movw	r22, r24
    24c8:	cd 01       	movw	r24, r26
    24ca:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	48 ec       	ldi	r20, 0xC8	; 200
    24dc:	52 e4       	ldi	r21, 0x42	; 66
    24de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	bc 01       	movw	r22, r24
    24e8:	cd 01       	movw	r24, r26
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	53 e4       	ldi	r21, 0x43	; 67
    24f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	8b 83       	std	Y+3, r24	; 0x03
    2508:	28 c0       	rjmp	.+80     	; 0x255a <PWM_init+0x7ea>
		}
		else
		{
			com= (uint8)(((float)(s_config_ptr->pwm_duty)/100)*256);
    250a:	ef 85       	ldd	r30, Y+15	; 0x0f
    250c:	f8 89       	ldd	r31, Y+16	; 0x10
    250e:	84 81       	ldd	r24, Z+4	; 0x04
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e0       	ldi	r26, 0x00	; 0
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	bc 01       	movw	r22, r24
    2526:	cd 01       	movw	r24, r26
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	48 ec       	ldi	r20, 0xC8	; 200
    252e:	52 e4       	ldi	r21, 0x42	; 66
    2530:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	bc 01       	movw	r22, r24
    253a:	cd 01       	movw	r24, r26
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e8       	ldi	r20, 0x80	; 128
    2542:	53 e4       	ldi	r21, 0x43	; 67
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	8b 83       	std	Y+3, r24	; 0x03
		}
		OCR2  = com ;                                     /* Set Compare Value*/
    255a:	e3 e4       	ldi	r30, 0x43	; 67
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	80 83       	st	Z, r24
		TIMSK = (TIMSK & 0x3f) ;                          /*disable Timer2 Interrupt*/
    2562:	a9 e5       	ldi	r26, 0x59	; 89
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e9 e5       	ldi	r30, 0x59	; 89
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	8f 73       	andi	r24, 0x3F	; 63
    256e:	8c 93       	st	X, r24

		GPIO_setupPinDirection(PORTD_ID,PIN7_ID,PIN_OUTPUT);
    2570:	83 e0       	ldi	r24, 0x03	; 3
    2572:	67 e0       	ldi	r22, 0x07	; 7
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
		GPIO_writePin(PORTD_ID,PIN7_ID,LOGIC_LOW);
    257a:	83 e0       	ldi	r24, 0x03	; 3
    257c:	67 e0       	ldi	r22, 0x07	; 7
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		 * 2. PWM Mode WGM21=1 & WGM20=1
		 * 3. s_config_ptr->pwm_state :  inverting or non inverting
		 * 4. s_config_ptr->pwm_clk   :  timer frequancy
		 */

		uint16 pre = (uint16)((F_CPU)/((float)(s_config_ptr->pwm_clk)*256));
    2584:	ef 85       	ldd	r30, Y+15	; 0x0f
    2586:	f8 89       	ldd	r31, Y+16	; 0x10
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	cc 01       	movw	r24, r24
    258e:	a0 e0       	ldi	r26, 0x00	; 0
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e8       	ldi	r20, 0x80	; 128
    25a8:	53 e4       	ldi	r21, 0x43	; 67
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9c 01       	movw	r18, r24
    25b4:	ad 01       	movw	r20, r26
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	74 e2       	ldi	r23, 0x24	; 36
    25ba:	84 ef       	ldi	r24, 0xF4	; 244
    25bc:	9a e4       	ldi	r25, 0x4A	; 74
    25be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	bc 01       	movw	r22, r24
    25c8:	cd 01       	movw	r24, r26
    25ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
		if((pre > 0) && (pre <= 4))
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	9a 81       	ldd	r25, Y+2	; 0x02
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	51 f0       	breq	.+20     	; 0x25f2 <PWM_init+0x882>
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	9a 81       	ldd	r25, Y+2	; 0x02
    25e2:	85 30       	cpi	r24, 0x05	; 5
    25e4:	91 05       	cpc	r25, r1
    25e6:	28 f4       	brcc	.+10     	; 0x25f2 <PWM_init+0x882>
		{
			pre =1;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	41 c0       	rjmp	.+130    	; 0x2674 <PWM_init+0x904>
		}
		else if((pre > 4) && (pre <= 10))
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	9a 81       	ldd	r25, Y+2	; 0x02
    25f6:	85 30       	cpi	r24, 0x05	; 5
    25f8:	91 05       	cpc	r25, r1
    25fa:	50 f0       	brcs	.+20     	; 0x2610 <PWM_init+0x8a0>
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	8b 30       	cpi	r24, 0x0B	; 11
    2602:	91 05       	cpc	r25, r1
    2604:	28 f4       	brcc	.+10     	; 0x2610 <PWM_init+0x8a0>
		{
			pre =2;
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	9a 83       	std	Y+2, r25	; 0x02
    260c:	89 83       	std	Y+1, r24	; 0x01
    260e:	32 c0       	rjmp	.+100    	; 0x2674 <PWM_init+0x904>
		}
		else if((pre > 10) && (pre <= 70))
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	9a 81       	ldd	r25, Y+2	; 0x02
    2614:	8b 30       	cpi	r24, 0x0B	; 11
    2616:	91 05       	cpc	r25, r1
    2618:	50 f0       	brcs	.+20     	; 0x262e <PWM_init+0x8be>
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	9a 81       	ldd	r25, Y+2	; 0x02
    261e:	87 34       	cpi	r24, 0x47	; 71
    2620:	91 05       	cpc	r25, r1
    2622:	28 f4       	brcc	.+10     	; 0x262e <PWM_init+0x8be>
		{
			pre =3;
    2624:	83 e0       	ldi	r24, 0x03	; 3
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	23 c0       	rjmp	.+70     	; 0x2674 <PWM_init+0x904>
		}
		else if((pre > 70) && (pre <= 300))
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	9a 81       	ldd	r25, Y+2	; 0x02
    2632:	87 34       	cpi	r24, 0x47	; 71
    2634:	91 05       	cpc	r25, r1
    2636:	58 f0       	brcs	.+22     	; 0x264e <PWM_init+0x8de>
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	9a 81       	ldd	r25, Y+2	; 0x02
    263c:	21 e0       	ldi	r18, 0x01	; 1
    263e:	8d 32       	cpi	r24, 0x2D	; 45
    2640:	92 07       	cpc	r25, r18
    2642:	28 f4       	brcc	.+10     	; 0x264e <PWM_init+0x8de>
		{
			pre =4;
    2644:	84 e0       	ldi	r24, 0x04	; 4
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
    264c:	13 c0       	rjmp	.+38     	; 0x2674 <PWM_init+0x904>
		}
		else if((pre > 300) && (pre <= 1024))
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	9a 81       	ldd	r25, Y+2	; 0x02
    2652:	21 e0       	ldi	r18, 0x01	; 1
    2654:	8d 32       	cpi	r24, 0x2D	; 45
    2656:	92 07       	cpc	r25, r18
    2658:	58 f0       	brcs	.+22     	; 0x2670 <PWM_init+0x900>
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	24 e0       	ldi	r18, 0x04	; 4
    2660:	81 30       	cpi	r24, 0x01	; 1
    2662:	92 07       	cpc	r25, r18
    2664:	28 f4       	brcc	.+10     	; 0x2670 <PWM_init+0x900>
		{
			pre =5;
    2666:	85 e0       	ldi	r24, 0x05	; 5
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9a 83       	std	Y+2, r25	; 0x02
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <PWM_init+0x904>
		}
		else
		{
			pre = 0;
    2670:	1a 82       	std	Y+2, r1	; 0x02
    2672:	19 82       	std	Y+1, r1	; 0x01
		}

		TCCR2 = (1<<WGM20) | (1<<WGM21) | ((s_config_ptr->pwm_state)<<COM20) | ((pre)<<CS20);
    2674:	a5 e4       	ldi	r26, 0x45	; 69
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	ef 85       	ldd	r30, Y+15	; 0x0f
    267a:	f8 89       	ldd	r31, Y+16	; 0x10
    267c:	85 81       	ldd	r24, Z+5	; 0x05
    267e:	86 95       	lsr	r24
    2680:	86 95       	lsr	r24
    2682:	83 70       	andi	r24, 0x03	; 3
    2684:	98 2f       	mov	r25, r24
    2686:	92 95       	swap	r25
    2688:	90 7f       	andi	r25, 0xF0	; 240
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	89 2b       	or	r24, r25
    268e:	88 64       	ori	r24, 0x48	; 72
    2690:	8c 93       	st	X, r24
	}
/*********************************************************************************************************/

}
    2692:	60 96       	adiw	r28, 0x10	; 16
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	1f 91       	pop	r17
    26a4:	0f 91       	pop	r16
    26a6:	ff 90       	pop	r15
    26a8:	ef 90       	pop	r14
    26aa:	08 95       	ret

000026ac <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <GPIO_setupPinDirection+0x6>
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <GPIO_setupPinDirection+0x8>
    26b4:	0f 92       	push	r0
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	89 83       	std	Y+1, r24	; 0x01
    26bc:	6a 83       	std	Y+2, r22	; 0x02
    26be:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	88 30       	cpi	r24, 0x08	; 8
    26c4:	08 f0       	brcs	.+2      	; 0x26c8 <GPIO_setupPinDirection+0x1c>
    26c6:	d5 c0       	rjmp	.+426    	; 0x2872 <GPIO_setupPinDirection+0x1c6>
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	84 30       	cpi	r24, 0x04	; 4
    26cc:	08 f0       	brcs	.+2      	; 0x26d0 <GPIO_setupPinDirection+0x24>
    26ce:	d1 c0       	rjmp	.+418    	; 0x2872 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	3d 83       	std	Y+5, r19	; 0x05
    26d8:	2c 83       	std	Y+4, r18	; 0x04
    26da:	8c 81       	ldd	r24, Y+4	; 0x04
    26dc:	9d 81       	ldd	r25, Y+5	; 0x05
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	91 05       	cpc	r25, r1
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <GPIO_setupPinDirection+0x3a>
    26e4:	43 c0       	rjmp	.+134    	; 0x276c <GPIO_setupPinDirection+0xc0>
    26e6:	2c 81       	ldd	r18, Y+4	; 0x04
    26e8:	3d 81       	ldd	r19, Y+5	; 0x05
    26ea:	22 30       	cpi	r18, 0x02	; 2
    26ec:	31 05       	cpc	r19, r1
    26ee:	2c f4       	brge	.+10     	; 0x26fa <GPIO_setupPinDirection+0x4e>
    26f0:	8c 81       	ldd	r24, Y+4	; 0x04
    26f2:	9d 81       	ldd	r25, Y+5	; 0x05
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	71 f0       	breq	.+28     	; 0x2714 <GPIO_setupPinDirection+0x68>
    26f8:	bc c0       	rjmp	.+376    	; 0x2872 <GPIO_setupPinDirection+0x1c6>
    26fa:	2c 81       	ldd	r18, Y+4	; 0x04
    26fc:	3d 81       	ldd	r19, Y+5	; 0x05
    26fe:	22 30       	cpi	r18, 0x02	; 2
    2700:	31 05       	cpc	r19, r1
    2702:	09 f4       	brne	.+2      	; 0x2706 <GPIO_setupPinDirection+0x5a>
    2704:	5f c0       	rjmp	.+190    	; 0x27c4 <GPIO_setupPinDirection+0x118>
    2706:	8c 81       	ldd	r24, Y+4	; 0x04
    2708:	9d 81       	ldd	r25, Y+5	; 0x05
    270a:	83 30       	cpi	r24, 0x03	; 3
    270c:	91 05       	cpc	r25, r1
    270e:	09 f4       	brne	.+2      	; 0x2712 <GPIO_setupPinDirection+0x66>
    2710:	85 c0       	rjmp	.+266    	; 0x281c <GPIO_setupPinDirection+0x170>
    2712:	af c0       	rjmp	.+350    	; 0x2872 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	81 30       	cpi	r24, 0x01	; 1
    2718:	a1 f4       	brne	.+40     	; 0x2742 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    271a:	aa e3       	ldi	r26, 0x3A	; 58
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	ea e3       	ldi	r30, 0x3A	; 58
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	48 2f       	mov	r20, r24
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	02 2e       	mov	r0, r18
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <GPIO_setupPinDirection+0x8c>
    2734:	88 0f       	add	r24, r24
    2736:	99 1f       	adc	r25, r25
    2738:	0a 94       	dec	r0
    273a:	e2 f7       	brpl	.-8      	; 0x2734 <GPIO_setupPinDirection+0x88>
    273c:	84 2b       	or	r24, r20
    273e:	8c 93       	st	X, r24
    2740:	98 c0       	rjmp	.+304    	; 0x2872 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2742:	aa e3       	ldi	r26, 0x3A	; 58
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	ea e3       	ldi	r30, 0x3A	; 58
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	48 2f       	mov	r20, r24
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	02 2e       	mov	r0, r18
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <GPIO_setupPinDirection+0xb4>
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	0a 94       	dec	r0
    2762:	e2 f7       	brpl	.-8      	; 0x275c <GPIO_setupPinDirection+0xb0>
    2764:	80 95       	com	r24
    2766:	84 23       	and	r24, r20
    2768:	8c 93       	st	X, r24
    276a:	83 c0       	rjmp	.+262    	; 0x2872 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	81 30       	cpi	r24, 0x01	; 1
    2770:	a1 f4       	brne	.+40     	; 0x279a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2772:	a7 e3       	ldi	r26, 0x37	; 55
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e7 e3       	ldi	r30, 0x37	; 55
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	48 2f       	mov	r20, r24
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	02 2e       	mov	r0, r18
    278a:	02 c0       	rjmp	.+4      	; 0x2790 <GPIO_setupPinDirection+0xe4>
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	0a 94       	dec	r0
    2792:	e2 f7       	brpl	.-8      	; 0x278c <GPIO_setupPinDirection+0xe0>
    2794:	84 2b       	or	r24, r20
    2796:	8c 93       	st	X, r24
    2798:	6c c0       	rjmp	.+216    	; 0x2872 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    279a:	a7 e3       	ldi	r26, 0x37	; 55
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	e7 e3       	ldi	r30, 0x37	; 55
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	48 2f       	mov	r20, r24
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	02 2e       	mov	r0, r18
    27b2:	02 c0       	rjmp	.+4      	; 0x27b8 <GPIO_setupPinDirection+0x10c>
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	0a 94       	dec	r0
    27ba:	e2 f7       	brpl	.-8      	; 0x27b4 <GPIO_setupPinDirection+0x108>
    27bc:	80 95       	com	r24
    27be:	84 23       	and	r24, r20
    27c0:	8c 93       	st	X, r24
    27c2:	57 c0       	rjmp	.+174    	; 0x2872 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	a1 f4       	brne	.+40     	; 0x27f2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    27ca:	a4 e3       	ldi	r26, 0x34	; 52
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e4 e3       	ldi	r30, 0x34	; 52
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	48 2f       	mov	r20, r24
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	28 2f       	mov	r18, r24
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	02 2e       	mov	r0, r18
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <GPIO_setupPinDirection+0x13c>
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	0a 94       	dec	r0
    27ea:	e2 f7       	brpl	.-8      	; 0x27e4 <GPIO_setupPinDirection+0x138>
    27ec:	84 2b       	or	r24, r20
    27ee:	8c 93       	st	X, r24
    27f0:	40 c0       	rjmp	.+128    	; 0x2872 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    27f2:	a4 e3       	ldi	r26, 0x34	; 52
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	e4 e3       	ldi	r30, 0x34	; 52
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	48 2f       	mov	r20, r24
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	02 2e       	mov	r0, r18
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <GPIO_setupPinDirection+0x164>
    280c:	88 0f       	add	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	0a 94       	dec	r0
    2812:	e2 f7       	brpl	.-8      	; 0x280c <GPIO_setupPinDirection+0x160>
    2814:	80 95       	com	r24
    2816:	84 23       	and	r24, r20
    2818:	8c 93       	st	X, r24
    281a:	2b c0       	rjmp	.+86     	; 0x2872 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	81 30       	cpi	r24, 0x01	; 1
    2820:	a1 f4       	brne	.+40     	; 0x284a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2822:	a1 e3       	ldi	r26, 0x31	; 49
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e1 e3       	ldi	r30, 0x31	; 49
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	48 2f       	mov	r20, r24
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	02 2e       	mov	r0, r18
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <GPIO_setupPinDirection+0x194>
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	0a 94       	dec	r0
    2842:	e2 f7       	brpl	.-8      	; 0x283c <GPIO_setupPinDirection+0x190>
    2844:	84 2b       	or	r24, r20
    2846:	8c 93       	st	X, r24
    2848:	14 c0       	rjmp	.+40     	; 0x2872 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    284a:	a1 e3       	ldi	r26, 0x31	; 49
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e1 e3       	ldi	r30, 0x31	; 49
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	48 2f       	mov	r20, r24
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	28 2f       	mov	r18, r24
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	02 2e       	mov	r0, r18
    2862:	02 c0       	rjmp	.+4      	; 0x2868 <GPIO_setupPinDirection+0x1bc>
    2864:	88 0f       	add	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	0a 94       	dec	r0
    286a:	e2 f7       	brpl	.-8      	; 0x2864 <GPIO_setupPinDirection+0x1b8>
    286c:	80 95       	com	r24
    286e:	84 23       	and	r24, r20
    2870:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	00 d0       	rcall	.+0      	; 0x2888 <GPIO_writePin+0x6>
    2888:	00 d0       	rcall	.+0      	; 0x288a <GPIO_writePin+0x8>
    288a:	0f 92       	push	r0
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	6a 83       	std	Y+2, r22	; 0x02
    2894:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	88 30       	cpi	r24, 0x08	; 8
    289a:	08 f0       	brcs	.+2      	; 0x289e <GPIO_writePin+0x1c>
    289c:	d5 c0       	rjmp	.+426    	; 0x2a48 <GPIO_writePin+0x1c6>
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	84 30       	cpi	r24, 0x04	; 4
    28a2:	08 f0       	brcs	.+2      	; 0x28a6 <GPIO_writePin+0x24>
    28a4:	d1 c0       	rjmp	.+418    	; 0x2a48 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	28 2f       	mov	r18, r24
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	3d 83       	std	Y+5, r19	; 0x05
    28ae:	2c 83       	std	Y+4, r18	; 0x04
    28b0:	8c 81       	ldd	r24, Y+4	; 0x04
    28b2:	9d 81       	ldd	r25, Y+5	; 0x05
    28b4:	81 30       	cpi	r24, 0x01	; 1
    28b6:	91 05       	cpc	r25, r1
    28b8:	09 f4       	brne	.+2      	; 0x28bc <GPIO_writePin+0x3a>
    28ba:	43 c0       	rjmp	.+134    	; 0x2942 <GPIO_writePin+0xc0>
    28bc:	2c 81       	ldd	r18, Y+4	; 0x04
    28be:	3d 81       	ldd	r19, Y+5	; 0x05
    28c0:	22 30       	cpi	r18, 0x02	; 2
    28c2:	31 05       	cpc	r19, r1
    28c4:	2c f4       	brge	.+10     	; 0x28d0 <GPIO_writePin+0x4e>
    28c6:	8c 81       	ldd	r24, Y+4	; 0x04
    28c8:	9d 81       	ldd	r25, Y+5	; 0x05
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	71 f0       	breq	.+28     	; 0x28ea <GPIO_writePin+0x68>
    28ce:	bc c0       	rjmp	.+376    	; 0x2a48 <GPIO_writePin+0x1c6>
    28d0:	2c 81       	ldd	r18, Y+4	; 0x04
    28d2:	3d 81       	ldd	r19, Y+5	; 0x05
    28d4:	22 30       	cpi	r18, 0x02	; 2
    28d6:	31 05       	cpc	r19, r1
    28d8:	09 f4       	brne	.+2      	; 0x28dc <GPIO_writePin+0x5a>
    28da:	5f c0       	rjmp	.+190    	; 0x299a <GPIO_writePin+0x118>
    28dc:	8c 81       	ldd	r24, Y+4	; 0x04
    28de:	9d 81       	ldd	r25, Y+5	; 0x05
    28e0:	83 30       	cpi	r24, 0x03	; 3
    28e2:	91 05       	cpc	r25, r1
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <GPIO_writePin+0x66>
    28e6:	85 c0       	rjmp	.+266    	; 0x29f2 <GPIO_writePin+0x170>
    28e8:	af c0       	rjmp	.+350    	; 0x2a48 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	81 30       	cpi	r24, 0x01	; 1
    28ee:	a1 f4       	brne	.+40     	; 0x2918 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    28f0:	ab e3       	ldi	r26, 0x3B	; 59
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	eb e3       	ldi	r30, 0x3B	; 59
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	48 2f       	mov	r20, r24
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	28 2f       	mov	r18, r24
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	02 2e       	mov	r0, r18
    2908:	02 c0       	rjmp	.+4      	; 0x290e <GPIO_writePin+0x8c>
    290a:	88 0f       	add	r24, r24
    290c:	99 1f       	adc	r25, r25
    290e:	0a 94       	dec	r0
    2910:	e2 f7       	brpl	.-8      	; 0x290a <GPIO_writePin+0x88>
    2912:	84 2b       	or	r24, r20
    2914:	8c 93       	st	X, r24
    2916:	98 c0       	rjmp	.+304    	; 0x2a48 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2918:	ab e3       	ldi	r26, 0x3B	; 59
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	eb e3       	ldi	r30, 0x3B	; 59
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	48 2f       	mov	r20, r24
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	28 2f       	mov	r18, r24
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	02 2e       	mov	r0, r18
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <GPIO_writePin+0xb4>
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	0a 94       	dec	r0
    2938:	e2 f7       	brpl	.-8      	; 0x2932 <GPIO_writePin+0xb0>
    293a:	80 95       	com	r24
    293c:	84 23       	and	r24, r20
    293e:	8c 93       	st	X, r24
    2940:	83 c0       	rjmp	.+262    	; 0x2a48 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	81 30       	cpi	r24, 0x01	; 1
    2946:	a1 f4       	brne	.+40     	; 0x2970 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2948:	a8 e3       	ldi	r26, 0x38	; 56
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e8 e3       	ldi	r30, 0x38	; 56
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	48 2f       	mov	r20, r24
    2954:	8a 81       	ldd	r24, Y+2	; 0x02
    2956:	28 2f       	mov	r18, r24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	02 2e       	mov	r0, r18
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <GPIO_writePin+0xe4>
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	0a 94       	dec	r0
    2968:	e2 f7       	brpl	.-8      	; 0x2962 <GPIO_writePin+0xe0>
    296a:	84 2b       	or	r24, r20
    296c:	8c 93       	st	X, r24
    296e:	6c c0       	rjmp	.+216    	; 0x2a48 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2970:	a8 e3       	ldi	r26, 0x38	; 56
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e8 e3       	ldi	r30, 0x38	; 56
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	48 2f       	mov	r20, r24
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	02 2e       	mov	r0, r18
    2988:	02 c0       	rjmp	.+4      	; 0x298e <GPIO_writePin+0x10c>
    298a:	88 0f       	add	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	0a 94       	dec	r0
    2990:	e2 f7       	brpl	.-8      	; 0x298a <GPIO_writePin+0x108>
    2992:	80 95       	com	r24
    2994:	84 23       	and	r24, r20
    2996:	8c 93       	st	X, r24
    2998:	57 c0       	rjmp	.+174    	; 0x2a48 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	81 30       	cpi	r24, 0x01	; 1
    299e:	a1 f4       	brne	.+40     	; 0x29c8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    29a0:	a5 e3       	ldi	r26, 0x35	; 53
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	e5 e3       	ldi	r30, 0x35	; 53
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	48 2f       	mov	r20, r24
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	02 2e       	mov	r0, r18
    29b8:	02 c0       	rjmp	.+4      	; 0x29be <GPIO_writePin+0x13c>
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	0a 94       	dec	r0
    29c0:	e2 f7       	brpl	.-8      	; 0x29ba <GPIO_writePin+0x138>
    29c2:	84 2b       	or	r24, r20
    29c4:	8c 93       	st	X, r24
    29c6:	40 c0       	rjmp	.+128    	; 0x2a48 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    29c8:	a5 e3       	ldi	r26, 0x35	; 53
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	e5 e3       	ldi	r30, 0x35	; 53
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	48 2f       	mov	r20, r24
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	28 2f       	mov	r18, r24
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	02 2e       	mov	r0, r18
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <GPIO_writePin+0x164>
    29e2:	88 0f       	add	r24, r24
    29e4:	99 1f       	adc	r25, r25
    29e6:	0a 94       	dec	r0
    29e8:	e2 f7       	brpl	.-8      	; 0x29e2 <GPIO_writePin+0x160>
    29ea:	80 95       	com	r24
    29ec:	84 23       	and	r24, r20
    29ee:	8c 93       	st	X, r24
    29f0:	2b c0       	rjmp	.+86     	; 0x2a48 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	81 30       	cpi	r24, 0x01	; 1
    29f6:	a1 f4       	brne	.+40     	; 0x2a20 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    29f8:	a2 e3       	ldi	r26, 0x32	; 50
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e2 e3       	ldi	r30, 0x32	; 50
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	48 2f       	mov	r20, r24
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	02 2e       	mov	r0, r18
    2a10:	02 c0       	rjmp	.+4      	; 0x2a16 <GPIO_writePin+0x194>
    2a12:	88 0f       	add	r24, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	0a 94       	dec	r0
    2a18:	e2 f7       	brpl	.-8      	; 0x2a12 <GPIO_writePin+0x190>
    2a1a:	84 2b       	or	r24, r20
    2a1c:	8c 93       	st	X, r24
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2a20:	a2 e3       	ldi	r26, 0x32	; 50
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	e2 e3       	ldi	r30, 0x32	; 50
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	48 2f       	mov	r20, r24
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	28 2f       	mov	r18, r24
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	02 2e       	mov	r0, r18
    2a38:	02 c0       	rjmp	.+4      	; 0x2a3e <GPIO_writePin+0x1bc>
    2a3a:	88 0f       	add	r24, r24
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	0a 94       	dec	r0
    2a40:	e2 f7       	brpl	.-8      	; 0x2a3a <GPIO_writePin+0x1b8>
    2a42:	80 95       	com	r24
    2a44:	84 23       	and	r24, r20
    2a46:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <GPIO_readPin+0x6>
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <GPIO_readPin+0x8>
    2a60:	0f 92       	push	r0
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	8a 83       	std	Y+2, r24	; 0x02
    2a68:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2a6a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	88 30       	cpi	r24, 0x08	; 8
    2a70:	08 f0       	brcs	.+2      	; 0x2a74 <GPIO_readPin+0x1c>
    2a72:	84 c0       	rjmp	.+264    	; 0x2b7c <GPIO_readPin+0x124>
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	84 30       	cpi	r24, 0x04	; 4
    2a78:	08 f0       	brcs	.+2      	; 0x2a7c <GPIO_readPin+0x24>
    2a7a:	80 c0       	rjmp	.+256    	; 0x2b7c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	3d 83       	std	Y+5, r19	; 0x05
    2a84:	2c 83       	std	Y+4, r18	; 0x04
    2a86:	4c 81       	ldd	r20, Y+4	; 0x04
    2a88:	5d 81       	ldd	r21, Y+5	; 0x05
    2a8a:	41 30       	cpi	r20, 0x01	; 1
    2a8c:	51 05       	cpc	r21, r1
    2a8e:	79 f1       	breq	.+94     	; 0x2aee <GPIO_readPin+0x96>
    2a90:	8c 81       	ldd	r24, Y+4	; 0x04
    2a92:	9d 81       	ldd	r25, Y+5	; 0x05
    2a94:	82 30       	cpi	r24, 0x02	; 2
    2a96:	91 05       	cpc	r25, r1
    2a98:	34 f4       	brge	.+12     	; 0x2aa6 <GPIO_readPin+0x4e>
    2a9a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a9c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a9e:	21 15       	cp	r18, r1
    2aa0:	31 05       	cpc	r19, r1
    2aa2:	69 f0       	breq	.+26     	; 0x2abe <GPIO_readPin+0x66>
    2aa4:	6b c0       	rjmp	.+214    	; 0x2b7c <GPIO_readPin+0x124>
    2aa6:	4c 81       	ldd	r20, Y+4	; 0x04
    2aa8:	5d 81       	ldd	r21, Y+5	; 0x05
    2aaa:	42 30       	cpi	r20, 0x02	; 2
    2aac:	51 05       	cpc	r21, r1
    2aae:	b9 f1       	breq	.+110    	; 0x2b1e <GPIO_readPin+0xc6>
    2ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab4:	83 30       	cpi	r24, 0x03	; 3
    2ab6:	91 05       	cpc	r25, r1
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <GPIO_readPin+0x64>
    2aba:	49 c0       	rjmp	.+146    	; 0x2b4e <GPIO_readPin+0xf6>
    2abc:	5f c0       	rjmp	.+190    	; 0x2b7c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2abe:	e9 e3       	ldi	r30, 0x39	; 57
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	88 2f       	mov	r24, r24
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	a9 01       	movw	r20, r18
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <GPIO_readPin+0x7e>
    2ad2:	55 95       	asr	r21
    2ad4:	47 95       	ror	r20
    2ad6:	8a 95       	dec	r24
    2ad8:	e2 f7       	brpl	.-8      	; 0x2ad2 <GPIO_readPin+0x7a>
    2ada:	ca 01       	movw	r24, r20
    2adc:	81 70       	andi	r24, 0x01	; 1
    2ade:	90 70       	andi	r25, 0x00	; 0
    2ae0:	88 23       	and	r24, r24
    2ae2:	19 f0       	breq	.+6      	; 0x2aea <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	89 83       	std	Y+1, r24	; 0x01
    2ae8:	49 c0       	rjmp	.+146    	; 0x2b7c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2aea:	19 82       	std	Y+1, r1	; 0x01
    2aec:	47 c0       	rjmp	.+142    	; 0x2b7c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2aee:	e6 e3       	ldi	r30, 0x36	; 54
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	8b 81       	ldd	r24, Y+3	; 0x03
    2afa:	88 2f       	mov	r24, r24
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	a9 01       	movw	r20, r18
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <GPIO_readPin+0xae>
    2b02:	55 95       	asr	r21
    2b04:	47 95       	ror	r20
    2b06:	8a 95       	dec	r24
    2b08:	e2 f7       	brpl	.-8      	; 0x2b02 <GPIO_readPin+0xaa>
    2b0a:	ca 01       	movw	r24, r20
    2b0c:	81 70       	andi	r24, 0x01	; 1
    2b0e:	90 70       	andi	r25, 0x00	; 0
    2b10:	88 23       	and	r24, r24
    2b12:	19 f0       	breq	.+6      	; 0x2b1a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	89 83       	std	Y+1, r24	; 0x01
    2b18:	31 c0       	rjmp	.+98     	; 0x2b7c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2b1a:	19 82       	std	Y+1, r1	; 0x01
    2b1c:	2f c0       	rjmp	.+94     	; 0x2b7c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2b1e:	e3 e3       	ldi	r30, 0x33	; 51
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	88 2f       	mov	r24, r24
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	a9 01       	movw	r20, r18
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <GPIO_readPin+0xde>
    2b32:	55 95       	asr	r21
    2b34:	47 95       	ror	r20
    2b36:	8a 95       	dec	r24
    2b38:	e2 f7       	brpl	.-8      	; 0x2b32 <GPIO_readPin+0xda>
    2b3a:	ca 01       	movw	r24, r20
    2b3c:	81 70       	andi	r24, 0x01	; 1
    2b3e:	90 70       	andi	r25, 0x00	; 0
    2b40:	88 23       	and	r24, r24
    2b42:	19 f0       	breq	.+6      	; 0x2b4a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	89 83       	std	Y+1, r24	; 0x01
    2b48:	19 c0       	rjmp	.+50     	; 0x2b7c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2b4a:	19 82       	std	Y+1, r1	; 0x01
    2b4c:	17 c0       	rjmp	.+46     	; 0x2b7c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2b4e:	e0 e3       	ldi	r30, 0x30	; 48
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	28 2f       	mov	r18, r24
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	88 2f       	mov	r24, r24
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	a9 01       	movw	r20, r18
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <GPIO_readPin+0x10e>
    2b62:	55 95       	asr	r21
    2b64:	47 95       	ror	r20
    2b66:	8a 95       	dec	r24
    2b68:	e2 f7       	brpl	.-8      	; 0x2b62 <GPIO_readPin+0x10a>
    2b6a:	ca 01       	movw	r24, r20
    2b6c:	81 70       	andi	r24, 0x01	; 1
    2b6e:	90 70       	andi	r25, 0x00	; 0
    2b70:	88 23       	and	r24, r24
    2b72:	19 f0       	breq	.+6      	; 0x2b7a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	01 c0       	rjmp	.+2      	; 0x2b7c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2b7a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <GPIO_setupPortDirection+0x6>
    2b94:	00 d0       	rcall	.+0      	; 0x2b96 <GPIO_setupPortDirection+0x8>
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	84 30       	cpi	r24, 0x04	; 4
    2ba2:	90 f5       	brcc	.+100    	; 0x2c08 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	3c 83       	std	Y+4, r19	; 0x04
    2bac:	2b 83       	std	Y+3, r18	; 0x03
    2bae:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb2:	81 30       	cpi	r24, 0x01	; 1
    2bb4:	91 05       	cpc	r25, r1
    2bb6:	d1 f0       	breq	.+52     	; 0x2bec <GPIO_setupPortDirection+0x5e>
    2bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    2bba:	3c 81       	ldd	r19, Y+4	; 0x04
    2bbc:	22 30       	cpi	r18, 0x02	; 2
    2bbe:	31 05       	cpc	r19, r1
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <GPIO_setupPortDirection+0x3e>
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	61 f0       	breq	.+24     	; 0x2be2 <GPIO_setupPortDirection+0x54>
    2bca:	1e c0       	rjmp	.+60     	; 0x2c08 <GPIO_setupPortDirection+0x7a>
    2bcc:	2b 81       	ldd	r18, Y+3	; 0x03
    2bce:	3c 81       	ldd	r19, Y+4	; 0x04
    2bd0:	22 30       	cpi	r18, 0x02	; 2
    2bd2:	31 05       	cpc	r19, r1
    2bd4:	81 f0       	breq	.+32     	; 0x2bf6 <GPIO_setupPortDirection+0x68>
    2bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bda:	83 30       	cpi	r24, 0x03	; 3
    2bdc:	91 05       	cpc	r25, r1
    2bde:	81 f0       	breq	.+32     	; 0x2c00 <GPIO_setupPortDirection+0x72>
    2be0:	13 c0       	rjmp	.+38     	; 0x2c08 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2be2:	ea e3       	ldi	r30, 0x3A	; 58
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	8a 81       	ldd	r24, Y+2	; 0x02
    2be8:	80 83       	st	Z, r24
    2bea:	0e c0       	rjmp	.+28     	; 0x2c08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2bec:	e7 e3       	ldi	r30, 0x37	; 55
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	80 83       	st	Z, r24
    2bf4:	09 c0       	rjmp	.+18     	; 0x2c08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2bf6:	e4 e3       	ldi	r30, 0x34	; 52
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	80 83       	st	Z, r24
    2bfe:	04 c0       	rjmp	.+8      	; 0x2c08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2c00:	e1 e3       	ldi	r30, 0x31	; 49
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	80 83       	st	Z, r24
			break;
		}
	}
}
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	08 95       	ret

00002c16 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2c16:	df 93       	push	r29
    2c18:	cf 93       	push	r28
    2c1a:	00 d0       	rcall	.+0      	; 0x2c1c <GPIO_writePort+0x6>
    2c1c:	00 d0       	rcall	.+0      	; 0x2c1e <GPIO_writePort+0x8>
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	89 83       	std	Y+1, r24	; 0x01
    2c24:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	84 30       	cpi	r24, 0x04	; 4
    2c2a:	90 f5       	brcc	.+100    	; 0x2c90 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	3c 83       	std	Y+4, r19	; 0x04
    2c34:	2b 83       	std	Y+3, r18	; 0x03
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3a:	81 30       	cpi	r24, 0x01	; 1
    2c3c:	91 05       	cpc	r25, r1
    2c3e:	d1 f0       	breq	.+52     	; 0x2c74 <GPIO_writePort+0x5e>
    2c40:	2b 81       	ldd	r18, Y+3	; 0x03
    2c42:	3c 81       	ldd	r19, Y+4	; 0x04
    2c44:	22 30       	cpi	r18, 0x02	; 2
    2c46:	31 05       	cpc	r19, r1
    2c48:	2c f4       	brge	.+10     	; 0x2c54 <GPIO_writePort+0x3e>
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4e:	00 97       	sbiw	r24, 0x00	; 0
    2c50:	61 f0       	breq	.+24     	; 0x2c6a <GPIO_writePort+0x54>
    2c52:	1e c0       	rjmp	.+60     	; 0x2c90 <GPIO_writePort+0x7a>
    2c54:	2b 81       	ldd	r18, Y+3	; 0x03
    2c56:	3c 81       	ldd	r19, Y+4	; 0x04
    2c58:	22 30       	cpi	r18, 0x02	; 2
    2c5a:	31 05       	cpc	r19, r1
    2c5c:	81 f0       	breq	.+32     	; 0x2c7e <GPIO_writePort+0x68>
    2c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c60:	9c 81       	ldd	r25, Y+4	; 0x04
    2c62:	83 30       	cpi	r24, 0x03	; 3
    2c64:	91 05       	cpc	r25, r1
    2c66:	81 f0       	breq	.+32     	; 0x2c88 <GPIO_writePort+0x72>
    2c68:	13 c0       	rjmp	.+38     	; 0x2c90 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2c6a:	eb e3       	ldi	r30, 0x3B	; 59
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	80 83       	st	Z, r24
    2c72:	0e c0       	rjmp	.+28     	; 0x2c90 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2c74:	e8 e3       	ldi	r30, 0x38	; 56
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	80 83       	st	Z, r24
    2c7c:	09 c0       	rjmp	.+18     	; 0x2c90 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2c7e:	e5 e3       	ldi	r30, 0x35	; 53
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	80 83       	st	Z, r24
    2c86:	04 c0       	rjmp	.+8      	; 0x2c90 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2c88:	e2 e3       	ldi	r30, 0x32	; 50
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	08 95       	ret

00002c9e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <GPIO_readPort+0x6>
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <GPIO_readPort+0x8>
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2cac:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	84 30       	cpi	r24, 0x04	; 4
    2cb2:	90 f5       	brcc	.+100    	; 0x2d18 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	3c 83       	std	Y+4, r19	; 0x04
    2cbc:	2b 83       	std	Y+3, r18	; 0x03
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc2:	81 30       	cpi	r24, 0x01	; 1
    2cc4:	91 05       	cpc	r25, r1
    2cc6:	d1 f0       	breq	.+52     	; 0x2cfc <GPIO_readPort+0x5e>
    2cc8:	2b 81       	ldd	r18, Y+3	; 0x03
    2cca:	3c 81       	ldd	r19, Y+4	; 0x04
    2ccc:	22 30       	cpi	r18, 0x02	; 2
    2cce:	31 05       	cpc	r19, r1
    2cd0:	2c f4       	brge	.+10     	; 0x2cdc <GPIO_readPort+0x3e>
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd6:	00 97       	sbiw	r24, 0x00	; 0
    2cd8:	61 f0       	breq	.+24     	; 0x2cf2 <GPIO_readPort+0x54>
    2cda:	1e c0       	rjmp	.+60     	; 0x2d18 <GPIO_readPort+0x7a>
    2cdc:	2b 81       	ldd	r18, Y+3	; 0x03
    2cde:	3c 81       	ldd	r19, Y+4	; 0x04
    2ce0:	22 30       	cpi	r18, 0x02	; 2
    2ce2:	31 05       	cpc	r19, r1
    2ce4:	81 f0       	breq	.+32     	; 0x2d06 <GPIO_readPort+0x68>
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cea:	83 30       	cpi	r24, 0x03	; 3
    2cec:	91 05       	cpc	r25, r1
    2cee:	81 f0       	breq	.+32     	; 0x2d10 <GPIO_readPort+0x72>
    2cf0:	13 c0       	rjmp	.+38     	; 0x2d18 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2cf2:	e9 e3       	ldi	r30, 0x39	; 57
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	0e c0       	rjmp	.+28     	; 0x2d18 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2cfc:	e6 e3       	ldi	r30, 0x36	; 54
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	89 83       	std	Y+1, r24	; 0x01
    2d04:	09 c0       	rjmp	.+18     	; 0x2d18 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2d06:	e3 e3       	ldi	r30, 0x33	; 51
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	89 83       	std	Y+1, r24	; 0x01
    2d0e:	04 c0       	rjmp	.+8      	; 0x2d18 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2d10:	e0 e3       	ldi	r30, 0x30	; 48
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	08 95       	ret

00002d28 <BUZZER_init>:
 * Description:
 *             make the pin connected to buzzer output
 *             make the buzzer OFF
 ******************************************************************************/
void BUZZER_init (void)
{
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	67 e0       	ldi	r22, 0x07	; 7
    2d34:	41 e0       	ldi	r20, 0x01	; 1
    2d36:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	67 e0       	ldi	r22, 0x07	; 7
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
}
    2d44:	cf 91       	pop	r28
    2d46:	df 91       	pop	r29
    2d48:	08 95       	ret

00002d4a <BUZZER_on>:
/*
 * Description:
 *             make the buzzer ON
 ******************************************************************************/
void BUZZER_on (void)
{
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	67 e0       	ldi	r22, 0x07	; 7
    2d56:	41 e0       	ldi	r20, 0x01	; 1
    2d58:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
}
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <BUZZER_off>:
/*
 * Description:
 *             make the buzzer OFF
 ******************************************************************************/
void BUZZER_off (void)
{
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	67 e0       	ldi	r22, 0x07	; 7
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
    2d70:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
}
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	08 95       	ret

00002d7a <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../../mcal/twi/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2d7a:	df 93       	push	r29
    2d7c:	cf 93       	push	r28
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <EEPROM_writeByte+0x6>
    2d80:	00 d0       	rcall	.+0      	; 0x2d82 <EEPROM_writeByte+0x8>
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	9a 83       	std	Y+2, r25	; 0x02
    2d88:	89 83       	std	Y+1, r24	; 0x01
    2d8a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2d8c:	0e 94 67 09 	call	0x12ce	; 0x12ce <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2d90:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TWI_getStatus>
    2d94:	88 30       	cpi	r24, 0x08	; 8
    2d96:	11 f0       	breq	.+4      	; 0x2d9c <EEPROM_writeByte+0x22>
        return ERROR;
    2d98:	1c 82       	std	Y+4, r1	; 0x04
    2d9a:	28 c0       	rjmp	.+80     	; 0x2dec <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2da0:	80 70       	andi	r24, 0x00	; 0
    2da2:	97 70       	andi	r25, 0x07	; 7
    2da4:	88 0f       	add	r24, r24
    2da6:	89 2f       	mov	r24, r25
    2da8:	88 1f       	adc	r24, r24
    2daa:	99 0b       	sbc	r25, r25
    2dac:	91 95       	neg	r25
    2dae:	80 6a       	ori	r24, 0xA0	; 160
    2db0:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2db4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TWI_getStatus>
    2db8:	88 31       	cpi	r24, 0x18	; 24
    2dba:	11 f0       	breq	.+4      	; 0x2dc0 <EEPROM_writeByte+0x46>
        return ERROR; 
    2dbc:	1c 82       	std	Y+4, r1	; 0x04
    2dbe:	16 c0       	rjmp	.+44     	; 0x2dec <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2dc6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TWI_getStatus>
    2dca:	88 32       	cpi	r24, 0x28	; 40
    2dcc:	11 f0       	breq	.+4      	; 0x2dd2 <EEPROM_writeByte+0x58>
        return ERROR;
    2dce:	1c 82       	std	Y+4, r1	; 0x04
    2dd0:	0d c0       	rjmp	.+26     	; 0x2dec <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2dd8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TWI_getStatus>
    2ddc:	88 32       	cpi	r24, 0x28	; 40
    2dde:	11 f0       	breq	.+4      	; 0x2de4 <EEPROM_writeByte+0x6a>
        return ERROR;
    2de0:	1c 82       	std	Y+4, r1	; 0x04
    2de2:	04 c0       	rjmp	.+8      	; 0x2dec <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2de4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_stop>
	
    return SUCCESS;
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	8c 83       	std	Y+4, r24	; 0x04
    2dec:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	cf 91       	pop	r28
    2df8:	df 91       	pop	r29
    2dfa:	08 95       	ret

00002dfc <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	00 d0       	rcall	.+0      	; 0x2e02 <EEPROM_readByte+0x6>
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <EEPROM_readByte+0x8>
    2e04:	0f 92       	push	r0
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	9a 83       	std	Y+2, r25	; 0x02
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	7c 83       	std	Y+4, r23	; 0x04
    2e10:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2e12:	0e 94 67 09 	call	0x12ce	; 0x12ce <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2e16:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TWI_getStatus>
    2e1a:	88 30       	cpi	r24, 0x08	; 8
    2e1c:	11 f0       	breq	.+4      	; 0x2e22 <EEPROM_readByte+0x26>
        return ERROR;
    2e1e:	1d 82       	std	Y+5, r1	; 0x05
    2e20:	44 c0       	rjmp	.+136    	; 0x2eaa <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
    2e26:	80 70       	andi	r24, 0x00	; 0
    2e28:	97 70       	andi	r25, 0x07	; 7
    2e2a:	88 0f       	add	r24, r24
    2e2c:	89 2f       	mov	r24, r25
    2e2e:	88 1f       	adc	r24, r24
    2e30:	99 0b       	sbc	r25, r25
    2e32:	91 95       	neg	r25
    2e34:	80 6a       	ori	r24, 0xA0	; 160
    2e36:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2e3a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TWI_getStatus>
    2e3e:	88 31       	cpi	r24, 0x18	; 24
    2e40:	11 f0       	breq	.+4      	; 0x2e46 <EEPROM_readByte+0x4a>
        return ERROR;
    2e42:	1d 82       	std	Y+5, r1	; 0x05
    2e44:	32 c0       	rjmp	.+100    	; 0x2eaa <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2e4c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TWI_getStatus>
    2e50:	88 32       	cpi	r24, 0x28	; 40
    2e52:	11 f0       	breq	.+4      	; 0x2e58 <EEPROM_readByte+0x5c>
        return ERROR;
    2e54:	1d 82       	std	Y+5, r1	; 0x05
    2e56:	29 c0       	rjmp	.+82     	; 0x2eaa <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2e58:	0e 94 67 09 	call	0x12ce	; 0x12ce <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2e5c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TWI_getStatus>
    2e60:	80 31       	cpi	r24, 0x10	; 16
    2e62:	11 f0       	breq	.+4      	; 0x2e68 <EEPROM_readByte+0x6c>
        return ERROR;
    2e64:	1d 82       	std	Y+5, r1	; 0x05
    2e66:	21 c0       	rjmp	.+66     	; 0x2eaa <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6c:	80 70       	andi	r24, 0x00	; 0
    2e6e:	97 70       	andi	r25, 0x07	; 7
    2e70:	88 0f       	add	r24, r24
    2e72:	89 2f       	mov	r24, r25
    2e74:	88 1f       	adc	r24, r24
    2e76:	99 0b       	sbc	r25, r25
    2e78:	91 95       	neg	r25
    2e7a:	81 6a       	ori	r24, 0xA1	; 161
    2e7c:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2e80:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TWI_getStatus>
    2e84:	80 34       	cpi	r24, 0x40	; 64
    2e86:	11 f0       	breq	.+4      	; 0x2e8c <EEPROM_readByte+0x90>
        return ERROR;
    2e88:	1d 82       	std	Y+5, r1	; 0x05
    2e8a:	0f c0       	rjmp	.+30     	; 0x2eaa <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2e8c:	0e 94 bc 09 	call	0x1378	; 0x1378 <TWI_readByteWithNACK>
    2e90:	eb 81       	ldd	r30, Y+3	; 0x03
    2e92:	fc 81       	ldd	r31, Y+4	; 0x04
    2e94:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2e96:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TWI_getStatus>
    2e9a:	88 35       	cpi	r24, 0x58	; 88
    2e9c:	11 f0       	breq	.+4      	; 0x2ea2 <EEPROM_readByte+0xa6>
        return ERROR;
    2e9e:	1d 82       	std	Y+5, r1	; 0x05
    2ea0:	04 c0       	rjmp	.+8      	; 0x2eaa <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2ea2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <TWI_stop>

    return SUCCESS;
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	8d 83       	std	Y+5, r24	; 0x05
    2eaa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	cf 91       	pop	r28
    2eb8:	df 91       	pop	r29
    2eba:	08 95       	ret

00002ebc <DcMotor_Init>:
*            The Function responsible for setup the direction for the two
*            motor pins through the GPIO driver.
*            Stop at the DC-Motor at the beginning through the GPIO driver.
********************************************************************************************************/
void DcMotor_Init(void)
{
    2ebc:	df 93       	push	r29
    2ebe:	cf 93       	push	r28
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT_ID1,MOTOR_PIN_ID1,PIN_OUTPUT);
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	60 e0       	ldi	r22, 0x00	; 0
    2ec8:	41 e0       	ldi	r20, 0x01	; 1
    2eca:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID2,MOTOR_PIN_ID2,PIN_OUTPUT);
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	61 e0       	ldi	r22, 0x01	; 1
    2ed2:	41 e0       	ldi	r20, 0x01	; 1
    2ed4:	0e 94 56 13 	call	0x26ac	; 0x26ac <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_PORT_ID1,MOTOR_PIN_ID1,LOGIC_LOW);
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	60 e0       	ldi	r22, 0x00	; 0
    2edc:	40 e0       	ldi	r20, 0x00	; 0
    2ede:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID2,MOTOR_PIN_ID2,LOGIC_LOW);
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	61 e0       	ldi	r22, 0x01	; 1
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
}
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <DcMotor_Rotate>:
*              The function responsible for rotate the DC Motor CW/ or A-CW or
*              stop the motor based on the state input state value.
*              Send the required duty cycle to the PWM driver based on the required speed value.
*********************************************************************************************************/
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	69 97       	sbiw	r28, 0x19	; 25
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	cd bf       	out	0x3d, r28	; 61
    2f06:	8b 8b       	std	Y+19, r24	; 0x13
    2f08:	6c 8b       	std	Y+20, r22	; 0x14
	if(state==CW)
    2f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0c:	88 23       	and	r24, r24
    2f0e:	f1 f4       	brne	.+60     	; 0x2f4c <DcMotor_Rotate+0x5a>
	{
		PWM_Config s_pwm_config={500,0,speed,PWM0,NON_INVERTING};
    2f10:	84 ef       	ldi	r24, 0xF4	; 244
    2f12:	91 e0       	ldi	r25, 0x01	; 1
    2f14:	9a 83       	std	Y+2, r25	; 0x02
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	1c 82       	std	Y+4, r1	; 0x04
    2f1a:	1b 82       	std	Y+3, r1	; 0x03
    2f1c:	8c 89       	ldd	r24, Y+20	; 0x14
    2f1e:	8d 83       	std	Y+5, r24	; 0x05
    2f20:	8e 81       	ldd	r24, Y+6	; 0x06
    2f22:	8c 7f       	andi	r24, 0xFC	; 252
    2f24:	8e 83       	std	Y+6, r24	; 0x06
    2f26:	8e 81       	ldd	r24, Y+6	; 0x06
    2f28:	83 7f       	andi	r24, 0xF3	; 243
    2f2a:	88 60       	ori	r24, 0x08	; 8
    2f2c:	8e 83       	std	Y+6, r24	; 0x06
		PWM_init(&s_pwm_config);
    2f2e:	ce 01       	movw	r24, r28
    2f30:	01 96       	adiw	r24, 0x01	; 1
    2f32:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <PWM_init>

		GPIO_writePin(MOTOR_PORT_ID1,MOTOR_PIN_ID1,LOGIC_LOW);
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	60 e0       	ldi	r22, 0x00	; 0
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID2,MOTOR_PIN_ID2,LOGIC_HIGH);
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	61 e0       	ldi	r22, 0x01	; 1
    2f44:	41 e0       	ldi	r20, 0x01	; 1
    2f46:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
    2f4a:	52 c0       	rjmp	.+164    	; 0x2ff0 <DcMotor_Rotate+0xfe>
	}
	else if(state==A_CW)
    2f4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f4e:	81 30       	cpi	r24, 0x01	; 1
    2f50:	f1 f4       	brne	.+60     	; 0x2f8e <DcMotor_Rotate+0x9c>
	{
		PWM_Config s_pwm_config={500,0,speed,PWM0,NON_INVERTING};
    2f52:	84 ef       	ldi	r24, 0xF4	; 244
    2f54:	91 e0       	ldi	r25, 0x01	; 1
    2f56:	98 87       	std	Y+8, r25	; 0x08
    2f58:	8f 83       	std	Y+7, r24	; 0x07
    2f5a:	1a 86       	std	Y+10, r1	; 0x0a
    2f5c:	19 86       	std	Y+9, r1	; 0x09
    2f5e:	8c 89       	ldd	r24, Y+20	; 0x14
    2f60:	8b 87       	std	Y+11, r24	; 0x0b
    2f62:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f64:	8c 7f       	andi	r24, 0xFC	; 252
    2f66:	8c 87       	std	Y+12, r24	; 0x0c
    2f68:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f6a:	83 7f       	andi	r24, 0xF3	; 243
    2f6c:	88 60       	ori	r24, 0x08	; 8
    2f6e:	8c 87       	std	Y+12, r24	; 0x0c
		PWM_init(&s_pwm_config);
    2f70:	ce 01       	movw	r24, r28
    2f72:	07 96       	adiw	r24, 0x07	; 7
    2f74:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <PWM_init>

		GPIO_writePin(MOTOR_PORT_ID1,MOTOR_PIN_ID1,LOGIC_HIGH);
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	60 e0       	ldi	r22, 0x00	; 0
    2f7c:	41 e0       	ldi	r20, 0x01	; 1
    2f7e:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID2,MOTOR_PIN_ID2,LOGIC_LOW);
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	61 e0       	ldi	r22, 0x01	; 1
    2f86:	40 e0       	ldi	r20, 0x00	; 0
    2f88:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
    2f8c:	31 c0       	rjmp	.+98     	; 0x2ff0 <DcMotor_Rotate+0xfe>
	}
	else if(state==STOP)
    2f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f90:	82 30       	cpi	r24, 0x02	; 2
    2f92:	71 f5       	brne	.+92     	; 0x2ff0 <DcMotor_Rotate+0xfe>
		{
		    PWM_Config s_pwm_config={500,0,0,PWM0,NON_INVERTING};
    2f94:	ce 01       	movw	r24, r28
    2f96:	0d 96       	adiw	r24, 0x0d	; 13
    2f98:	9e 8b       	std	Y+22, r25	; 0x16
    2f9a:	8d 8b       	std	Y+21, r24	; 0x15
    2f9c:	e8 e6       	ldi	r30, 0x68	; 104
    2f9e:	f1 e0       	ldi	r31, 0x01	; 1
    2fa0:	f8 8f       	std	Y+24, r31	; 0x18
    2fa2:	ef 8b       	std	Y+23, r30	; 0x17
    2fa4:	f6 e0       	ldi	r31, 0x06	; 6
    2fa6:	f9 8f       	std	Y+25, r31	; 0x19
    2fa8:	ef 89       	ldd	r30, Y+23	; 0x17
    2faa:	f8 8d       	ldd	r31, Y+24	; 0x18
    2fac:	00 80       	ld	r0, Z
    2fae:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb2:	01 96       	adiw	r24, 0x01	; 1
    2fb4:	98 8f       	std	Y+24, r25	; 0x18
    2fb6:	8f 8b       	std	Y+23, r24	; 0x17
    2fb8:	ed 89       	ldd	r30, Y+21	; 0x15
    2fba:	fe 89       	ldd	r31, Y+22	; 0x16
    2fbc:	00 82       	st	Z, r0
    2fbe:	8d 89       	ldd	r24, Y+21	; 0x15
    2fc0:	9e 89       	ldd	r25, Y+22	; 0x16
    2fc2:	01 96       	adiw	r24, 0x01	; 1
    2fc4:	9e 8b       	std	Y+22, r25	; 0x16
    2fc6:	8d 8b       	std	Y+21, r24	; 0x15
    2fc8:	99 8d       	ldd	r25, Y+25	; 0x19
    2fca:	91 50       	subi	r25, 0x01	; 1
    2fcc:	99 8f       	std	Y+25, r25	; 0x19
    2fce:	e9 8d       	ldd	r30, Y+25	; 0x19
    2fd0:	ee 23       	and	r30, r30
    2fd2:	51 f7       	brne	.-44     	; 0x2fa8 <DcMotor_Rotate+0xb6>
		    PWM_init(&s_pwm_config);
    2fd4:	ce 01       	movw	r24, r28
    2fd6:	0d 96       	adiw	r24, 0x0d	; 13
    2fd8:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <PWM_init>

			GPIO_writePin(MOTOR_PORT_ID1,MOTOR_PIN_ID1,LOGIC_LOW);
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	60 e0       	ldi	r22, 0x00	; 0
    2fe0:	40 e0       	ldi	r20, 0x00	; 0
    2fe2:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
			GPIO_writePin(MOTOR_PORT_ID2,MOTOR_PIN_ID2,LOGIC_LOW);
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	61 e0       	ldi	r22, 0x01	; 1
    2fea:	40 e0       	ldi	r20, 0x00	; 0
    2fec:	0e 94 41 14 	call	0x2882	; 0x2882 <GPIO_writePin>
		}
}
    2ff0:	69 96       	adiw	r28, 0x19	; 25
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	cf 91       	pop	r28
    2ffe:	df 91       	pop	r29
    3000:	08 95       	ret

00003002 <main>:

/******************************************************************************************************
 *                                   Main  Function                                                   *
 ******************************************************************************************************/
int main(void)
{
    3002:	df 93       	push	r29
    3004:	cf 93       	push	r28
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
    300a:	a6 97       	sbiw	r28, 0x26	; 38
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61

	UART_Init s_uart_config={RATE9600,DISP,EIGHT_BIT,ENR,ONE_STOP};
    3016:	ce 01       	movw	r24, r28
    3018:	0f 96       	adiw	r24, 0x0f	; 15
    301a:	9e 8f       	std	Y+30, r25	; 0x1e
    301c:	8d 8f       	std	Y+29, r24	; 0x1d
    301e:	e3 e7       	ldi	r30, 0x73	; 115
    3020:	f1 e0       	ldi	r31, 0x01	; 1
    3022:	f8 a3       	std	Y+32, r31	; 0x20
    3024:	ef 8f       	std	Y+31, r30	; 0x1f
    3026:	f5 e0       	ldi	r31, 0x05	; 5
    3028:	f9 a3       	std	Y+33, r31	; 0x21
    302a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    302c:	f8 a1       	ldd	r31, Y+32	; 0x20
    302e:	00 80       	ld	r0, Z
    3030:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3032:	98 a1       	ldd	r25, Y+32	; 0x20
    3034:	01 96       	adiw	r24, 0x01	; 1
    3036:	98 a3       	std	Y+32, r25	; 0x20
    3038:	8f 8f       	std	Y+31, r24	; 0x1f
    303a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    303c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    303e:	00 82       	st	Z, r0
    3040:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3042:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3044:	01 96       	adiw	r24, 0x01	; 1
    3046:	9e 8f       	std	Y+30, r25	; 0x1e
    3048:	8d 8f       	std	Y+29, r24	; 0x1d
    304a:	99 a1       	ldd	r25, Y+33	; 0x21
    304c:	91 50       	subi	r25, 0x01	; 1
    304e:	99 a3       	std	Y+33, r25	; 0x21
    3050:	e9 a1       	ldd	r30, Y+33	; 0x21
    3052:	ee 23       	and	r30, r30
    3054:	51 f7       	brne	.-44     	; 0x302a <main+0x28>
	TIMER_Config s_timer_config={0,250,PRE8,T1,DISCONECT};
    3056:	ce 01       	movw	r24, r28
    3058:	44 96       	adiw	r24, 0x14	; 20
    305a:	9b a3       	std	Y+35, r25	; 0x23
    305c:	8a a3       	std	Y+34, r24	; 0x22
    305e:	ee e6       	ldi	r30, 0x6E	; 110
    3060:	f1 e0       	ldi	r31, 0x01	; 1
    3062:	fd a3       	std	Y+37, r31	; 0x25
    3064:	ec a3       	std	Y+36, r30	; 0x24
    3066:	f5 e0       	ldi	r31, 0x05	; 5
    3068:	fe a3       	std	Y+38, r31	; 0x26
    306a:	ec a1       	ldd	r30, Y+36	; 0x24
    306c:	fd a1       	ldd	r31, Y+37	; 0x25
    306e:	00 80       	ld	r0, Z
    3070:	8c a1       	ldd	r24, Y+36	; 0x24
    3072:	9d a1       	ldd	r25, Y+37	; 0x25
    3074:	01 96       	adiw	r24, 0x01	; 1
    3076:	9d a3       	std	Y+37, r25	; 0x25
    3078:	8c a3       	std	Y+36, r24	; 0x24
    307a:	ea a1       	ldd	r30, Y+34	; 0x22
    307c:	fb a1       	ldd	r31, Y+35	; 0x23
    307e:	00 82       	st	Z, r0
    3080:	8a a1       	ldd	r24, Y+34	; 0x22
    3082:	9b a1       	ldd	r25, Y+35	; 0x23
    3084:	01 96       	adiw	r24, 0x01	; 1
    3086:	9b a3       	std	Y+35, r25	; 0x23
    3088:	8a a3       	std	Y+34, r24	; 0x22
    308a:	9e a1       	ldd	r25, Y+38	; 0x26
    308c:	91 50       	subi	r25, 0x01	; 1
    308e:	9e a3       	std	Y+38, r25	; 0x26
    3090:	ee a1       	ldd	r30, Y+38	; 0x26
    3092:	ee 23       	and	r30, r30
    3094:	51 f7       	brne	.-44     	; 0x306a <main+0x68>
	I2C_Config s_i2c_config={400000,0x50,I2C_PRE_1};
    3096:	80 e8       	ldi	r24, 0x80	; 128
    3098:	89 8f       	std	Y+25, r24	; 0x19
    309a:	8a e1       	ldi	r24, 0x1A	; 26
    309c:	8a 8f       	std	Y+26, r24	; 0x1a
    309e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a0:	80 7e       	andi	r24, 0xE0	; 224
    30a2:	86 60       	ori	r24, 0x06	; 6
    30a4:	8b 8f       	std	Y+27, r24	; 0x1b
    30a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a8:	8f 71       	andi	r24, 0x1F	; 31
    30aa:	8b 8f       	std	Y+27, r24	; 0x1b
    30ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30ae:	80 7f       	andi	r24, 0xF0	; 240
    30b0:	8a 60       	ori	r24, 0x0A	; 10
    30b2:	8c 8f       	std	Y+28, r24	; 0x1c
    30b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30b6:	8f 7c       	andi	r24, 0xCF	; 207
    30b8:	8c 8f       	std	Y+28, r24	; 0x1c

	TIMER_comparInit(&s_timer_config,TIME_delay);
    30ba:	ce 01       	movw	r24, r28
    30bc:	44 96       	adiw	r24, 0x14	; 20
    30be:	2f e9       	ldi	r18, 0x9F	; 159
    30c0:	3a e1       	ldi	r19, 0x1A	; 26
    30c2:	b9 01       	movw	r22, r18
    30c4:	0e 94 6d 0b 	call	0x16da	; 0x16da <TIMER_comparInit>
	UART_init(&s_uart_config);
    30c8:	ce 01       	movw	r24, r28
    30ca:	0f 96       	adiw	r24, 0x0f	; 15
    30cc:	0e 94 93 07 	call	0xf26	; 0xf26 <UART_init>
	TWI_init(&s_i2c_config);
    30d0:	ce 01       	movw	r24, r28
    30d2:	49 96       	adiw	r24, 0x19	; 25
    30d4:	0e 94 b4 08 	call	0x1168	; 0x1168 <TWI_init>
	DcMotor_Init();
    30d8:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <DcMotor_Init>
	BUZZER_init ();
    30dc:	0e 94 94 16 	call	0x2d28	; 0x2d28 <BUZZER_init>
	SREG |=(1<<7);
    30e0:	af e5       	ldi	r26, 0x5F	; 95
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	ef e5       	ldi	r30, 0x5F	; 95
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	80 68       	ori	r24, 0x80	; 128
    30ec:	8c 93       	st	X, r24

	pass_READ();
    30ee:	0e 94 c0 1a 	call	0x3580	; 0x3580 <pass_READ>
	if(val == 0x10)
    30f2:	80 91 8d 01 	lds	r24, 0x018D
    30f6:	80 31       	cpi	r24, 0x10	; 16
    30f8:	21 f4       	brne	.+8      	; 0x3102 <main+0x100>
	{
		stepONE_ack1=1;
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	80 93 8b 01 	sts	0x018B, r24
    3100:	02 c0       	rjmp	.+4      	; 0x3106 <main+0x104>
	}
	else
	{
		stepONE_ack1=0;
    3102:	10 92 8b 01 	sts	0x018B, r1
	}
	UART_sendByte(MC2_READY);
    3106:	8f ef       	ldi	r24, 0xFF	; 255
    3108:	0e 94 22 08 	call	0x1044	; 0x1044 <UART_sendByte>
	while(UART_recieveByte() != MC1_READY){}
    310c:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    3110:	80 3f       	cpi	r24, 0xF0	; 240
    3112:	e1 f7       	brne	.-8      	; 0x310c <main+0x10a>
	UART_sendByte(val);
    3114:	80 91 8d 01 	lds	r24, 0x018D
    3118:	0e 94 22 08 	call	0x1044	; 0x1044 <UART_sendByte>

	while(1)
	{
		if(stepONE_ack2 == 0 && stepONE_ack1 == 0)
    311c:	80 91 8c 01 	lds	r24, 0x018C
    3120:	88 23       	and	r24, r24
    3122:	51 f4       	brne	.+20     	; 0x3138 <main+0x136>
    3124:	80 91 8b 01 	lds	r24, 0x018B
    3128:	88 23       	and	r24, r24
    312a:	31 f4       	brne	.+12     	; 0x3138 <main+0x136>
		{
			stepONE() ;
    312c:	0e 94 2b 19 	call	0x3256	; 0x3256 <stepONE>
			stepONE_ack2 =1;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	80 93 8c 01 	sts	0x018C, r24
    3136:	f2 cf       	rjmp	.-28     	; 0x311c <main+0x11a>
		}

		else if(stepONE_ack2 == 0 && stepONE_ack1 == 1)
    3138:	80 91 8c 01 	lds	r24, 0x018C
    313c:	88 23       	and	r24, r24
    313e:	39 f4       	brne	.+14     	; 0x314e <main+0x14c>
    3140:	80 91 8b 01 	lds	r24, 0x018B
    3144:	81 30       	cpi	r24, 0x01	; 1
    3146:	19 f4       	brne	.+6      	; 0x314e <main+0x14c>
		{
			stepONETWO();
    3148:	0e 94 ce 19 	call	0x339c	; 0x339c <stepONETWO>
    314c:	e7 cf       	rjmp	.-50     	; 0x311c <main+0x11a>
		}

		else if(stepONE_ack2 == 1 && stepONE_ack1 == 1)
    314e:	80 91 8c 01 	lds	r24, 0x018C
    3152:	81 30       	cpi	r24, 0x01	; 1
    3154:	09 f0       	breq	.+2      	; 0x3158 <main+0x156>
    3156:	7a c0       	rjmp	.+244    	; 0x324c <main+0x24a>
    3158:	80 91 8b 01 	lds	r24, 0x018B
    315c:	81 30       	cpi	r24, 0x01	; 1
    315e:	09 f0       	breq	.+2      	; 0x3162 <main+0x160>
    3160:	75 c0       	rjmp	.+234    	; 0x324c <main+0x24a>
		{
			stepTWO();
    3162:	0e 94 4a 1a 	call	0x3494	; 0x3494 <stepTWO>
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	a8 ec       	ldi	r26, 0xC8	; 200
    316c:	b3 e4       	ldi	r27, 0x43	; 67
    316e:	8b 87       	std	Y+11, r24	; 0x0b
    3170:	9c 87       	std	Y+12, r25	; 0x0c
    3172:	ad 87       	std	Y+13, r26	; 0x0d
    3174:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3176:	6b 85       	ldd	r22, Y+11	; 0x0b
    3178:	7c 85       	ldd	r23, Y+12	; 0x0c
    317a:	8d 85       	ldd	r24, Y+13	; 0x0d
    317c:	9e 85       	ldd	r25, Y+14	; 0x0e
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	4a ef       	ldi	r20, 0xFA	; 250
    3184:	54 e4       	ldi	r21, 0x44	; 68
    3186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	8f 83       	std	Y+7, r24	; 0x07
    3190:	98 87       	std	Y+8, r25	; 0x08
    3192:	a9 87       	std	Y+9, r26	; 0x09
    3194:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3196:	6f 81       	ldd	r22, Y+7	; 0x07
    3198:	78 85       	ldd	r23, Y+8	; 0x08
    319a:	89 85       	ldd	r24, Y+9	; 0x09
    319c:	9a 85       	ldd	r25, Y+10	; 0x0a
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e8       	ldi	r20, 0x80	; 128
    31a4:	5f e3       	ldi	r21, 0x3F	; 63
    31a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31aa:	88 23       	and	r24, r24
    31ac:	2c f4       	brge	.+10     	; 0x31b8 <main+0x1b6>
		__ticks = 1;
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	9e 83       	std	Y+6, r25	; 0x06
    31b4:	8d 83       	std	Y+5, r24	; 0x05
    31b6:	3f c0       	rjmp	.+126    	; 0x3236 <main+0x234>
	else if (__tmp > 65535)
    31b8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ba:	78 85       	ldd	r23, Y+8	; 0x08
    31bc:	89 85       	ldd	r24, Y+9	; 0x09
    31be:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	3f ef       	ldi	r19, 0xFF	; 255
    31c4:	4f e7       	ldi	r20, 0x7F	; 127
    31c6:	57 e4       	ldi	r21, 0x47	; 71
    31c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31cc:	18 16       	cp	r1, r24
    31ce:	4c f5       	brge	.+82     	; 0x3222 <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	40 e2       	ldi	r20, 0x20	; 32
    31de:	51 e4       	ldi	r21, 0x41	; 65
    31e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	bc 01       	movw	r22, r24
    31ea:	cd 01       	movw	r24, r26
    31ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	9e 83       	std	Y+6, r25	; 0x06
    31f6:	8d 83       	std	Y+5, r24	; 0x05
    31f8:	0f c0       	rjmp	.+30     	; 0x3218 <main+0x216>
    31fa:	88 ec       	ldi	r24, 0xC8	; 200
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	9c 83       	std	Y+4, r25	; 0x04
    3200:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3202:	8b 81       	ldd	r24, Y+3	; 0x03
    3204:	9c 81       	ldd	r25, Y+4	; 0x04
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <main+0x204>
    320a:	9c 83       	std	Y+4, r25	; 0x04
    320c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320e:	8d 81       	ldd	r24, Y+5	; 0x05
    3210:	9e 81       	ldd	r25, Y+6	; 0x06
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	9e 83       	std	Y+6, r25	; 0x06
    3216:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3218:	8d 81       	ldd	r24, Y+5	; 0x05
    321a:	9e 81       	ldd	r25, Y+6	; 0x06
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	69 f7       	brne	.-38     	; 0x31fa <main+0x1f8>
    3220:	7d cf       	rjmp	.-262    	; 0x311c <main+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3222:	6f 81       	ldd	r22, Y+7	; 0x07
    3224:	78 85       	ldd	r23, Y+8	; 0x08
    3226:	89 85       	ldd	r24, Y+9	; 0x09
    3228:	9a 85       	ldd	r25, Y+10	; 0x0a
    322a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	9e 83       	std	Y+6, r25	; 0x06
    3234:	8d 83       	std	Y+5, r24	; 0x05
    3236:	8d 81       	ldd	r24, Y+5	; 0x05
    3238:	9e 81       	ldd	r25, Y+6	; 0x06
    323a:	9a 83       	std	Y+2, r25	; 0x02
    323c:	89 83       	std	Y+1, r24	; 0x01
    323e:	89 81       	ldd	r24, Y+1	; 0x01
    3240:	9a 81       	ldd	r25, Y+2	; 0x02
    3242:	01 97       	sbiw	r24, 0x01	; 1
    3244:	f1 f7       	brne	.-4      	; 0x3242 <main+0x240>
    3246:	9a 83       	std	Y+2, r25	; 0x02
    3248:	89 83       	std	Y+1, r24	; 0x01
    324a:	68 cf       	rjmp	.-304    	; 0x311c <main+0x11a>
			_delay_ms(400);
		}

		else
		{
			stepTHREE();
    324c:	0e 94 8e 1a 	call	0x351c	; 0x351c <stepTHREE>
			stepONE_ack2 =0;
    3250:	10 92 8c 01 	sts	0x018C, r1
    3254:	63 cf       	rjmp	.-314    	; 0x311c <main+0x11a>

00003256 <stepONE>:
 * Description:
 *             this function responsible for match the new password
 *             if correct then save it in eeprom if not re enter
 */
void stepONE(void)
{
    3256:	0f 93       	push	r16
    3258:	1f 93       	push	r17
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	2f 97       	sbiw	r28, 0x0f	; 15
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
	uint8 ack=0;
    326e:	1d 82       	std	Y+5, r1	; 0x05
    3270:	85 c0       	rjmp	.+266    	; 0x337c <stepONE+0x126>
	uint8 key[5] ;
	uint8 key2[5] ;
	while(0 == stepONE_ack1)
	{
		while(UART_recieveByte() != MC1_READY){}
    3272:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    3276:	80 3f       	cpi	r24, 0xF0	; 240
    3278:	e1 f7       	brne	.-8      	; 0x3272 <stepONE+0x1c>
		for(uint8 i=0 ;i<5; i++)
    327a:	1c 82       	std	Y+4, r1	; 0x04
    327c:	0f c0       	rjmp	.+30     	; 0x329c <stepONE+0x46>
		{
			key[i] = UART_recieveByte();
    327e:	8c 81       	ldd	r24, Y+4	; 0x04
    3280:	08 2f       	mov	r16, r24
    3282:	10 e0       	ldi	r17, 0x00	; 0
    3284:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    3288:	28 2f       	mov	r18, r24
    328a:	ce 01       	movw	r24, r28
    328c:	06 96       	adiw	r24, 0x06	; 6
    328e:	fc 01       	movw	r30, r24
    3290:	e0 0f       	add	r30, r16
    3292:	f1 1f       	adc	r31, r17
    3294:	20 83       	st	Z, r18
	uint8 key[5] ;
	uint8 key2[5] ;
	while(0 == stepONE_ack1)
	{
		while(UART_recieveByte() != MC1_READY){}
		for(uint8 i=0 ;i<5; i++)
    3296:	8c 81       	ldd	r24, Y+4	; 0x04
    3298:	8f 5f       	subi	r24, 0xFF	; 255
    329a:	8c 83       	std	Y+4, r24	; 0x04
    329c:	8c 81       	ldd	r24, Y+4	; 0x04
    329e:	85 30       	cpi	r24, 0x05	; 5
    32a0:	70 f3       	brcs	.-36     	; 0x327e <stepONE+0x28>
		{
			key[i] = UART_recieveByte();
		}

		while(UART_recieveByte() != MC1_READY){}
    32a2:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    32a6:	80 3f       	cpi	r24, 0xF0	; 240
    32a8:	e1 f7       	brne	.-8      	; 0x32a2 <stepONE+0x4c>
		for(uint8 i=0 ;i<5; i++)
    32aa:	1b 82       	std	Y+3, r1	; 0x03
    32ac:	0f c0       	rjmp	.+30     	; 0x32cc <stepONE+0x76>
		{
			key2[i] = UART_recieveByte();
    32ae:	8b 81       	ldd	r24, Y+3	; 0x03
    32b0:	08 2f       	mov	r16, r24
    32b2:	10 e0       	ldi	r17, 0x00	; 0
    32b4:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    32b8:	28 2f       	mov	r18, r24
    32ba:	ce 01       	movw	r24, r28
    32bc:	0b 96       	adiw	r24, 0x0b	; 11
    32be:	fc 01       	movw	r30, r24
    32c0:	e0 0f       	add	r30, r16
    32c2:	f1 1f       	adc	r31, r17
    32c4:	20 83       	st	Z, r18
		{
			key[i] = UART_recieveByte();
		}

		while(UART_recieveByte() != MC1_READY){}
		for(uint8 i=0 ;i<5; i++)
    32c6:	8b 81       	ldd	r24, Y+3	; 0x03
    32c8:	8f 5f       	subi	r24, 0xFF	; 255
    32ca:	8b 83       	std	Y+3, r24	; 0x03
    32cc:	8b 81       	ldd	r24, Y+3	; 0x03
    32ce:	85 30       	cpi	r24, 0x05	; 5
    32d0:	70 f3       	brcs	.-36     	; 0x32ae <stepONE+0x58>
		{
			key2[i] = UART_recieveByte();
		}


		for(uint8 j=0 ;j<5; j++)
    32d2:	1a 82       	std	Y+2, r1	; 0x02
    32d4:	19 c0       	rjmp	.+50     	; 0x3308 <stepONE+0xb2>
		{
			if(key[j] != key2[j])
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	28 2f       	mov	r18, r24
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	ce 01       	movw	r24, r28
    32de:	06 96       	adiw	r24, 0x06	; 6
    32e0:	fc 01       	movw	r30, r24
    32e2:	e2 0f       	add	r30, r18
    32e4:	f3 1f       	adc	r31, r19
    32e6:	40 81       	ld	r20, Z
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	28 2f       	mov	r18, r24
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	ce 01       	movw	r24, r28
    32f0:	0b 96       	adiw	r24, 0x0b	; 11
    32f2:	fc 01       	movw	r30, r24
    32f4:	e2 0f       	add	r30, r18
    32f6:	f3 1f       	adc	r31, r19
    32f8:	80 81       	ld	r24, Z
    32fa:	48 17       	cp	r20, r24
    32fc:	11 f0       	breq	.+4      	; 0x3302 <stepONE+0xac>
			{
				ack=1;
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	8d 83       	std	Y+5, r24	; 0x05
		{
			key2[i] = UART_recieveByte();
		}


		for(uint8 j=0 ;j<5; j++)
    3302:	8a 81       	ldd	r24, Y+2	; 0x02
    3304:	8f 5f       	subi	r24, 0xFF	; 255
    3306:	8a 83       	std	Y+2, r24	; 0x02
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	85 30       	cpi	r24, 0x05	; 5
    330c:	20 f3       	brcs	.-56     	; 0x32d6 <stepONE+0x80>
			{
				ack=1;
			}
		}

		for(uint8 i=0 ;i<5; i++)
    330e:	19 82       	std	Y+1, r1	; 0x01
    3310:	13 c0       	rjmp	.+38     	; 0x3338 <stepONE+0xe2>
		{
			password[i] = key[i];
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	48 2f       	mov	r20, r24
    3316:	50 e0       	ldi	r21, 0x00	; 0
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	28 2f       	mov	r18, r24
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	ce 01       	movw	r24, r28
    3320:	06 96       	adiw	r24, 0x06	; 6
    3322:	fc 01       	movw	r30, r24
    3324:	e2 0f       	add	r30, r18
    3326:	f3 1f       	adc	r31, r19
    3328:	80 81       	ld	r24, Z
    332a:	fa 01       	movw	r30, r20
    332c:	e0 57       	subi	r30, 0x70	; 112
    332e:	fe 4f       	sbci	r31, 0xFE	; 254
    3330:	80 83       	st	Z, r24
			{
				ack=1;
			}
		}

		for(uint8 i=0 ;i<5; i++)
    3332:	89 81       	ldd	r24, Y+1	; 0x01
    3334:	8f 5f       	subi	r24, 0xFF	; 255
    3336:	89 83       	std	Y+1, r24	; 0x01
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	85 30       	cpi	r24, 0x05	; 5
    333c:	50 f3       	brcs	.-44     	; 0x3312 <stepONE+0xbc>
		{
			password[i] = key[i];
		}

		pass_WRITE(password);
    333e:	80 e9       	ldi	r24, 0x90	; 144
    3340:	91 e0       	ldi	r25, 0x01	; 1
    3342:	0e 94 65 1b 	call	0x36ca	; 0x36ca <pass_WRITE>


		UART_sendByte(MC2_READY);
    3346:	8f ef       	ldi	r24, 0xFF	; 255
    3348:	0e 94 22 08 	call	0x1044	; 0x1044 <UART_sendByte>

		if(ack == 0)
    334c:	8d 81       	ldd	r24, Y+5	; 0x05
    334e:	88 23       	and	r24, r24
    3350:	51 f4       	brne	.+20     	; 0x3366 <stepONE+0x110>
		{
			UART_sendByte(1);
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	0e 94 22 08 	call	0x1044	; 0x1044 <UART_sendByte>
			stepONE_ack1 = UART_recieveByte();
    3358:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    335c:	80 93 8b 01 	sts	0x018B, r24
			ack = 1;
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	8d 83       	std	Y+5, r24	; 0x05
    3364:	0b c0       	rjmp	.+22     	; 0x337c <stepONE+0x126>
	    }
		else if(ack == 1)
    3366:	8d 81       	ldd	r24, Y+5	; 0x05
    3368:	81 30       	cpi	r24, 0x01	; 1
    336a:	41 f4       	brne	.+16     	; 0x337c <stepONE+0x126>
		{
			UART_sendByte(0);
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	0e 94 22 08 	call	0x1044	; 0x1044 <UART_sendByte>
			stepONE_ack1 = UART_recieveByte();
    3372:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    3376:	80 93 8b 01 	sts	0x018B, r24
			ack = 0;
    337a:	1d 82       	std	Y+5, r1	; 0x05
void stepONE(void)
{
	uint8 ack=0;
	uint8 key[5] ;
	uint8 key2[5] ;
	while(0 == stepONE_ack1)
    337c:	80 91 8b 01 	lds	r24, 0x018B
    3380:	88 23       	and	r24, r24
    3382:	09 f4       	brne	.+2      	; 0x3386 <stepONE+0x130>
    3384:	76 cf       	rjmp	.-276    	; 0x3272 <stepONE+0x1c>
			UART_sendByte(0);
			stepONE_ack1 = UART_recieveByte();
			ack = 0;
		}
	}
}
    3386:	2f 96       	adiw	r28, 0x0f	; 15
    3388:	0f b6       	in	r0, 0x3f	; 63
    338a:	f8 94       	cli
    338c:	de bf       	out	0x3e, r29	; 62
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	cd bf       	out	0x3d, r28	; 61
    3392:	cf 91       	pop	r28
    3394:	df 91       	pop	r29
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
    339a:	08 95       	ret

0000339c <stepONETWO>:
 * Description:
 *             this function responsible for check password
 *             if correct then login if not try 2 other time
 */
void stepONETWO(void)
{
    339c:	0f 93       	push	r16
    339e:	1f 93       	push	r17
    33a0:	df 93       	push	r29
    33a2:	cf 93       	push	r28
    33a4:	cd b7       	in	r28, 0x3d	; 61
    33a6:	de b7       	in	r29, 0x3e	; 62
    33a8:	29 97       	sbiw	r28, 0x09	; 9
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
	uint8 save = 0;
    33b4:	1c 82       	std	Y+4, r1	; 0x04
	uint8 ack=0;
    33b6:	1b 82       	std	Y+3, r1	; 0x03
    33b8:	5e c0       	rjmp	.+188    	; 0x3476 <stepONETWO+0xda>
	uint8 key[5] ;

	while(2 >= save)
	{

		while(UART_recieveByte() != MC1_READY){}
    33ba:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    33be:	80 3f       	cpi	r24, 0xF0	; 240
    33c0:	e1 f7       	brne	.-8      	; 0x33ba <stepONETWO+0x1e>
		for(uint8 i=0 ;i<5; i++)
    33c2:	1a 82       	std	Y+2, r1	; 0x02
    33c4:	0f c0       	rjmp	.+30     	; 0x33e4 <stepONETWO+0x48>
		{
			key[i] = UART_recieveByte();
    33c6:	8a 81       	ldd	r24, Y+2	; 0x02
    33c8:	08 2f       	mov	r16, r24
    33ca:	10 e0       	ldi	r17, 0x00	; 0
    33cc:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    33d0:	28 2f       	mov	r18, r24
    33d2:	ce 01       	movw	r24, r28
    33d4:	05 96       	adiw	r24, 0x05	; 5
    33d6:	fc 01       	movw	r30, r24
    33d8:	e0 0f       	add	r30, r16
    33da:	f1 1f       	adc	r31, r17
    33dc:	20 83       	st	Z, r18

	while(2 >= save)
	{

		while(UART_recieveByte() != MC1_READY){}
		for(uint8 i=0 ;i<5; i++)
    33de:	8a 81       	ldd	r24, Y+2	; 0x02
    33e0:	8f 5f       	subi	r24, 0xFF	; 255
    33e2:	8a 83       	std	Y+2, r24	; 0x02
    33e4:	8a 81       	ldd	r24, Y+2	; 0x02
    33e6:	85 30       	cpi	r24, 0x05	; 5
    33e8:	70 f3       	brcs	.-36     	; 0x33c6 <stepONETWO+0x2a>
		{
			key[i] = UART_recieveByte();
		}

		pass_READ();
    33ea:	0e 94 c0 1a 	call	0x3580	; 0x3580 <pass_READ>

		for(uint8 j=0 ;j<5; j++)
    33ee:	19 82       	std	Y+1, r1	; 0x01
    33f0:	17 c0       	rjmp	.+46     	; 0x3420 <stepONETWO+0x84>
		{
			if(key[j] != password[j])
    33f2:	89 81       	ldd	r24, Y+1	; 0x01
    33f4:	28 2f       	mov	r18, r24
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	ce 01       	movw	r24, r28
    33fa:	05 96       	adiw	r24, 0x05	; 5
    33fc:	fc 01       	movw	r30, r24
    33fe:	e2 0f       	add	r30, r18
    3400:	f3 1f       	adc	r31, r19
    3402:	20 81       	ld	r18, Z
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	88 2f       	mov	r24, r24
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	fc 01       	movw	r30, r24
    340c:	e0 57       	subi	r30, 0x70	; 112
    340e:	fe 4f       	sbci	r31, 0xFE	; 254
    3410:	80 81       	ld	r24, Z
    3412:	28 17       	cp	r18, r24
    3414:	11 f0       	breq	.+4      	; 0x341a <stepONETWO+0x7e>
			{
				ack=1;
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	8b 83       	std	Y+3, r24	; 0x03
			key[i] = UART_recieveByte();
		}

		pass_READ();

		for(uint8 j=0 ;j<5; j++)
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	8f 5f       	subi	r24, 0xFF	; 255
    341e:	89 83       	std	Y+1, r24	; 0x01
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	85 30       	cpi	r24, 0x05	; 5
    3424:	30 f3       	brcs	.-52     	; 0x33f2 <stepONETWO+0x56>
			{
				ack=1;
			}
		}

		UART_sendByte(MC2_READY);
    3426:	8f ef       	ldi	r24, 0xFF	; 255
    3428:	0e 94 22 08 	call	0x1044	; 0x1044 <UART_sendByte>

		if(ack == 0)
    342c:	8b 81       	ldd	r24, Y+3	; 0x03
    342e:	88 23       	and	r24, r24
    3430:	51 f4       	brne	.+20     	; 0x3446 <stepONETWO+0xaa>
		{
			UART_sendByte(1);
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	0e 94 22 08 	call	0x1044	; 0x1044 <UART_sendByte>
			stepONE_ack2 = UART_recieveByte();
    3438:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    343c:	80 93 8c 01 	sts	0x018C, r24
			ack = 1;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	8b 83       	std	Y+3, r24	; 0x03
    3444:	0b c0       	rjmp	.+22     	; 0x345c <stepONETWO+0xc0>
	    }
		else if(ack == 1)
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	81 30       	cpi	r24, 0x01	; 1
    344a:	41 f4       	brne	.+16     	; 0x345c <stepONETWO+0xc0>
		{
			UART_sendByte(0);
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	0e 94 22 08 	call	0x1044	; 0x1044 <UART_sendByte>
			stepONE_ack2 = UART_recieveByte();
    3452:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    3456:	80 93 8c 01 	sts	0x018C, r24
			ack = 0;
    345a:	1b 82       	std	Y+3, r1	; 0x03
		}

		if(1 == stepONE_ack2)
    345c:	80 91 8c 01 	lds	r24, 0x018C
    3460:	81 30       	cpi	r24, 0x01	; 1
    3462:	69 f0       	breq	.+26     	; 0x347e <stepONETWO+0xe2>
		{
			break;
		}
		save++;
    3464:	8c 81       	ldd	r24, Y+4	; 0x04
    3466:	8f 5f       	subi	r24, 0xFF	; 255
    3468:	8c 83       	std	Y+4, r24	; 0x04
		if(save >= 3 )
    346a:	8c 81       	ldd	r24, Y+4	; 0x04
    346c:	83 30       	cpi	r24, 0x03	; 3
    346e:	18 f0       	brcs	.+6      	; 0x3476 <stepONETWO+0xda>
		{
			stepONE_ack2 = 2;
    3470:	82 e0       	ldi	r24, 0x02	; 2
    3472:	80 93 8c 01 	sts	0x018C, r24
{
	uint8 save = 0;
	uint8 ack=0;
	uint8 key[5] ;

	while(2 >= save)
    3476:	8c 81       	ldd	r24, Y+4	; 0x04
    3478:	83 30       	cpi	r24, 0x03	; 3
    347a:	08 f4       	brcc	.+2      	; 0x347e <stepONETWO+0xe2>
    347c:	9e cf       	rjmp	.-196    	; 0x33ba <stepONETWO+0x1e>
		if(save >= 3 )
		{
			stepONE_ack2 = 2;
		}
	}
}
    347e:	29 96       	adiw	r28, 0x09	; 9
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	cd bf       	out	0x3d, r28	; 61
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	1f 91       	pop	r17
    3490:	0f 91       	pop	r16
    3492:	08 95       	ret

00003494 <stepTWO>:
 * Description:
 *             this function responsible for change password or
 *             open and close the door
 */
void stepTWO(void)
{
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	0f 92       	push	r0
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62
	char res='\0';
    349e:	19 82       	std	Y+1, r1	; 0x01

	stepONETWO();
    34a0:	0e 94 ce 19 	call	0x339c	; 0x339c <stepONETWO>
	if(stepONE_ack2 == 2)
    34a4:	80 91 8c 01 	lds	r24, 0x018C
    34a8:	82 30       	cpi	r24, 0x02	; 2
    34aa:	29 f4       	brne	.+10     	; 0x34b6 <stepTWO+0x22>
	{
		stepTHREE();
    34ac:	0e 94 8e 1a 	call	0x351c	; 0x351c <stepTHREE>
		stepONE_ack2 = 0;
    34b0:	10 92 8c 01 	sts	0x018C, r1
    34b4:	2f c0       	rjmp	.+94     	; 0x3514 <stepTWO+0x80>
		return ;
	}

	while(UART_recieveByte() != MC1_READY){}
    34b6:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    34ba:	80 3f       	cpi	r24, 0xF0	; 240
    34bc:	e1 f7       	brne	.-8      	; 0x34b6 <stepTWO+0x22>
	res = UART_recieveByte();
    34be:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_recieveByte>
    34c2:	89 83       	std	Y+1, r24	; 0x01

	if(res == '+')
    34c4:	89 81       	ldd	r24, Y+1	; 0x01
    34c6:	8b 32       	cpi	r24, 0x2B	; 43
    34c8:	d9 f4       	brne	.+54     	; 0x3500 <stepTWO+0x6c>
	{
		UART_sendByte(1);
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	0e 94 22 08 	call	0x1044	; 0x1044 <UART_sendByte>

		DcMotor_Rotate(CW,50);
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	62 e3       	ldi	r22, 0x32	; 50
    34d4:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DcMotor_Rotate>
		g_count_value=0;
    34d8:	10 92 8a 01 	sts	0x018A, r1
		while(g_count_value <= 15){}
    34dc:	80 91 8a 01 	lds	r24, 0x018A
    34e0:	80 31       	cpi	r24, 0x10	; 16
    34e2:	e0 f3       	brcs	.-8      	; 0x34dc <stepTWO+0x48>

		DcMotor_Rotate(A_CW,50);
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	62 e3       	ldi	r22, 0x32	; 50
    34e8:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DcMotor_Rotate>
		g_count_value=0;
    34ec:	10 92 8a 01 	sts	0x018A, r1
		while(g_count_value <= 15){}
    34f0:	80 91 8a 01 	lds	r24, 0x018A
    34f4:	80 31       	cpi	r24, 0x10	; 16
    34f6:	e0 f3       	brcs	.-8      	; 0x34f0 <stepTWO+0x5c>

		DcMotor_Rotate(STOP,0);
    34f8:	82 e0       	ldi	r24, 0x02	; 2
    34fa:	60 e0       	ldi	r22, 0x00	; 0
    34fc:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DcMotor_Rotate>
			/*timer count*/
	}

	if(res == '-')
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	8d 32       	cpi	r24, 0x2D	; 45
    3504:	39 f4       	brne	.+14     	; 0x3514 <stepTWO+0x80>
	{
		UART_sendByte(0);
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	0e 94 22 08 	call	0x1044	; 0x1044 <UART_sendByte>
		stepONE_ack1 = 0;
    350c:	10 92 8b 01 	sts	0x018B, r1
		stepONE();
    3510:	0e 94 2b 19 	call	0x3256	; 0x3256 <stepONE>
	}
}
    3514:	0f 90       	pop	r0
    3516:	cf 91       	pop	r28
    3518:	df 91       	pop	r29
    351a:	08 95       	ret

0000351c <stepTHREE>:
/*
 * Description:
 *             this function responsible for buzzer on or off
 */
void stepTHREE(void)
{
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	cd b7       	in	r28, 0x3d	; 61
    3522:	de b7       	in	r29, 0x3e	; 62
	BUZZER_on ();
    3524:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <BUZZER_on>
	g_count_value=0;
    3528:	10 92 8a 01 	sts	0x018A, r1
	while(g_count_value <= 10){}
    352c:	80 91 8a 01 	lds	r24, 0x018A
    3530:	8b 30       	cpi	r24, 0x0B	; 11
    3532:	e0 f3       	brcs	.-8      	; 0x352c <stepTHREE+0x10>
	BUZZER_off ();
    3534:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <BUZZER_off>
}
    3538:	cf 91       	pop	r28
    353a:	df 91       	pop	r29
    353c:	08 95       	ret

0000353e <TIME_delay>:
/*
 * Description:
 *             this function is a call back for timer 1
 */
void TIME_delay(void)
{
    353e:	df 93       	push	r29
    3540:	cf 93       	push	r28
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62

	/*every over flow take time 2ms*/
	static volatile uint16 count_value = 0;
	count_value++;
    3546:	80 91 8e 01 	lds	r24, 0x018E
    354a:	90 91 8f 01 	lds	r25, 0x018F
    354e:	01 96       	adiw	r24, 0x01	; 1
    3550:	90 93 8f 01 	sts	0x018F, r25
    3554:	80 93 8e 01 	sts	0x018E, r24
	if(count_value >= 4000)
    3558:	80 91 8e 01 	lds	r24, 0x018E
    355c:	90 91 8f 01 	lds	r25, 0x018F
    3560:	2f e0       	ldi	r18, 0x0F	; 15
    3562:	80 3a       	cpi	r24, 0xA0	; 160
    3564:	92 07       	cpc	r25, r18
    3566:	48 f0       	brcs	.+18     	; 0x357a <TIME_delay+0x3c>
	{
		g_count_value++;
    3568:	80 91 8a 01 	lds	r24, 0x018A
    356c:	8f 5f       	subi	r24, 0xFF	; 255
    356e:	80 93 8a 01 	sts	0x018A, r24
		count_value = 0;
    3572:	10 92 8f 01 	sts	0x018F, r1
    3576:	10 92 8e 01 	sts	0x018E, r1
	}

}
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <pass_READ>:
/*
 * Description:
 *             read password from eeprom
 */
void pass_READ(void)
{
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
    3588:	2f 97       	sbiw	r28, 0x0f	; 15
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	f8 94       	cli
    358e:	de bf       	out	0x3e, r29	; 62
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	cd bf       	out	0x3d, r28	; 61
	EEPROM_readByte(0x0311, &val);
    3594:	2d e8       	ldi	r18, 0x8D	; 141
    3596:	31 e0       	ldi	r19, 0x01	; 1
    3598:	81 e1       	ldi	r24, 0x11	; 17
    359a:	93 e0       	ldi	r25, 0x03	; 3
    359c:	b9 01       	movw	r22, r18
    359e:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <EEPROM_readByte>
	for(uint8 k=0;k<5;k++)
    35a2:	1f 86       	std	Y+15, r1	; 0x0f
    35a4:	85 c0       	rjmp	.+266    	; 0x36b0 <pass_READ+0x130>
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	a0 e2       	ldi	r26, 0x20	; 32
    35ac:	b1 e4       	ldi	r27, 0x41	; 65
    35ae:	8b 87       	std	Y+11, r24	; 0x0b
    35b0:	9c 87       	std	Y+12, r25	; 0x0c
    35b2:	ad 87       	std	Y+13, r26	; 0x0d
    35b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    35b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    35ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    35bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	4a ef       	ldi	r20, 0xFA	; 250
    35c4:	54 e4       	ldi	r21, 0x44	; 68
    35c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	8f 83       	std	Y+7, r24	; 0x07
    35d0:	98 87       	std	Y+8, r25	; 0x08
    35d2:	a9 87       	std	Y+9, r26	; 0x09
    35d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35d6:	6f 81       	ldd	r22, Y+7	; 0x07
    35d8:	78 85       	ldd	r23, Y+8	; 0x08
    35da:	89 85       	ldd	r24, Y+9	; 0x09
    35dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	40 e8       	ldi	r20, 0x80	; 128
    35e4:	5f e3       	ldi	r21, 0x3F	; 63
    35e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ea:	88 23       	and	r24, r24
    35ec:	2c f4       	brge	.+10     	; 0x35f8 <pass_READ+0x78>
		__ticks = 1;
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	9e 83       	std	Y+6, r25	; 0x06
    35f4:	8d 83       	std	Y+5, r24	; 0x05
    35f6:	3f c0       	rjmp	.+126    	; 0x3676 <pass_READ+0xf6>
	else if (__tmp > 65535)
    35f8:	6f 81       	ldd	r22, Y+7	; 0x07
    35fa:	78 85       	ldd	r23, Y+8	; 0x08
    35fc:	89 85       	ldd	r24, Y+9	; 0x09
    35fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	3f ef       	ldi	r19, 0xFF	; 255
    3604:	4f e7       	ldi	r20, 0x7F	; 127
    3606:	57 e4       	ldi	r21, 0x47	; 71
    3608:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    360c:	18 16       	cp	r1, r24
    360e:	4c f5       	brge	.+82     	; 0x3662 <pass_READ+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3610:	6b 85       	ldd	r22, Y+11	; 0x0b
    3612:	7c 85       	ldd	r23, Y+12	; 0x0c
    3614:	8d 85       	ldd	r24, Y+13	; 0x0d
    3616:	9e 85       	ldd	r25, Y+14	; 0x0e
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	40 e2       	ldi	r20, 0x20	; 32
    361e:	51 e4       	ldi	r21, 0x41	; 65
    3620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	bc 01       	movw	r22, r24
    362a:	cd 01       	movw	r24, r26
    362c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	9e 83       	std	Y+6, r25	; 0x06
    3636:	8d 83       	std	Y+5, r24	; 0x05
    3638:	0f c0       	rjmp	.+30     	; 0x3658 <pass_READ+0xd8>
    363a:	88 ec       	ldi	r24, 0xC8	; 200
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	9c 83       	std	Y+4, r25	; 0x04
    3640:	8b 83       	std	Y+3, r24	; 0x03
    3642:	8b 81       	ldd	r24, Y+3	; 0x03
    3644:	9c 81       	ldd	r25, Y+4	; 0x04
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	f1 f7       	brne	.-4      	; 0x3646 <pass_READ+0xc6>
    364a:	9c 83       	std	Y+4, r25	; 0x04
    364c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    364e:	8d 81       	ldd	r24, Y+5	; 0x05
    3650:	9e 81       	ldd	r25, Y+6	; 0x06
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	9e 83       	std	Y+6, r25	; 0x06
    3656:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3658:	8d 81       	ldd	r24, Y+5	; 0x05
    365a:	9e 81       	ldd	r25, Y+6	; 0x06
    365c:	00 97       	sbiw	r24, 0x00	; 0
    365e:	69 f7       	brne	.-38     	; 0x363a <pass_READ+0xba>
    3660:	14 c0       	rjmp	.+40     	; 0x368a <pass_READ+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3662:	6f 81       	ldd	r22, Y+7	; 0x07
    3664:	78 85       	ldd	r23, Y+8	; 0x08
    3666:	89 85       	ldd	r24, Y+9	; 0x09
    3668:	9a 85       	ldd	r25, Y+10	; 0x0a
    366a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	9e 83       	std	Y+6, r25	; 0x06
    3674:	8d 83       	std	Y+5, r24	; 0x05
    3676:	8d 81       	ldd	r24, Y+5	; 0x05
    3678:	9e 81       	ldd	r25, Y+6	; 0x06
    367a:	9a 83       	std	Y+2, r25	; 0x02
    367c:	89 83       	std	Y+1, r24	; 0x01
    367e:	89 81       	ldd	r24, Y+1	; 0x01
    3680:	9a 81       	ldd	r25, Y+2	; 0x02
    3682:	01 97       	sbiw	r24, 0x01	; 1
    3684:	f1 f7       	brne	.-4      	; 0x3682 <pass_READ+0x102>
    3686:	9a 83       	std	Y+2, r25	; 0x02
    3688:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(10);
		EEPROM_readByte((0x0312+k), &password[k]);
    368a:	8f 85       	ldd	r24, Y+15	; 0x0f
    368c:	88 2f       	mov	r24, r24
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	8e 5e       	subi	r24, 0xEE	; 238
    3692:	9c 4f       	sbci	r25, 0xFC	; 252
    3694:	ac 01       	movw	r20, r24
    3696:	8f 85       	ldd	r24, Y+15	; 0x0f
    3698:	88 2f       	mov	r24, r24
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	9c 01       	movw	r18, r24
    369e:	20 57       	subi	r18, 0x70	; 112
    36a0:	3e 4f       	sbci	r19, 0xFE	; 254
    36a2:	ca 01       	movw	r24, r20
    36a4:	b9 01       	movw	r22, r18
    36a6:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <EEPROM_readByte>
 *             read password from eeprom
 */
void pass_READ(void)
{
	EEPROM_readByte(0x0311, &val);
	for(uint8 k=0;k<5;k++)
    36aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ac:	8f 5f       	subi	r24, 0xFF	; 255
    36ae:	8f 87       	std	Y+15, r24	; 0x0f
    36b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    36b2:	85 30       	cpi	r24, 0x05	; 5
    36b4:	08 f4       	brcc	.+2      	; 0x36b8 <pass_READ+0x138>
    36b6:	77 cf       	rjmp	.-274    	; 0x35a6 <pass_READ+0x26>
	{
		_delay_ms(10);
		EEPROM_readByte((0x0312+k), &password[k]);
	}
}
    36b8:	2f 96       	adiw	r28, 0x0f	; 15
    36ba:	0f b6       	in	r0, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	0f be       	out	0x3f, r0	; 63
    36c2:	cd bf       	out	0x3d, r28	; 61
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <pass_WRITE>:
/*
 * Description:
 *             write password to eeprom
 */
void pass_WRITE(uint8 *pass)
{
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	61 97       	sbiw	r28, 0x11	; 17
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	cd bf       	out	0x3d, r28	; 61
    36de:	99 8b       	std	Y+17, r25	; 0x11
    36e0:	88 8b       	std	Y+16, r24	; 0x10

	for(uint8 k=0;k<5;k++)
    36e2:	1f 86       	std	Y+15, r1	; 0x0f
    36e4:	88 c0       	rjmp	.+272    	; 0x37f6 <pass_WRITE+0x12c>
	{
		EEPROM_writeByte((0x0312+k), pass[k]);
    36e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36e8:	88 2f       	mov	r24, r24
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	8e 5e       	subi	r24, 0xEE	; 238
    36ee:	9c 4f       	sbci	r25, 0xFC	; 252
    36f0:	ac 01       	movw	r20, r24
    36f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    36f4:	28 2f       	mov	r18, r24
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	88 89       	ldd	r24, Y+16	; 0x10
    36fa:	99 89       	ldd	r25, Y+17	; 0x11
    36fc:	fc 01       	movw	r30, r24
    36fe:	e2 0f       	add	r30, r18
    3700:	f3 1f       	adc	r31, r19
    3702:	20 81       	ld	r18, Z
    3704:	ca 01       	movw	r24, r20
    3706:	62 2f       	mov	r22, r18
    3708:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <EEPROM_writeByte>
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	a0 e2       	ldi	r26, 0x20	; 32
    3712:	b1 e4       	ldi	r27, 0x41	; 65
    3714:	8b 87       	std	Y+11, r24	; 0x0b
    3716:	9c 87       	std	Y+12, r25	; 0x0c
    3718:	ad 87       	std	Y+13, r26	; 0x0d
    371a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    371c:	6b 85       	ldd	r22, Y+11	; 0x0b
    371e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3720:	8d 85       	ldd	r24, Y+13	; 0x0d
    3722:	9e 85       	ldd	r25, Y+14	; 0x0e
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	4a ef       	ldi	r20, 0xFA	; 250
    372a:	54 e4       	ldi	r21, 0x44	; 68
    372c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3730:	dc 01       	movw	r26, r24
    3732:	cb 01       	movw	r24, r22
    3734:	8f 83       	std	Y+7, r24	; 0x07
    3736:	98 87       	std	Y+8, r25	; 0x08
    3738:	a9 87       	std	Y+9, r26	; 0x09
    373a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    373c:	6f 81       	ldd	r22, Y+7	; 0x07
    373e:	78 85       	ldd	r23, Y+8	; 0x08
    3740:	89 85       	ldd	r24, Y+9	; 0x09
    3742:	9a 85       	ldd	r25, Y+10	; 0x0a
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	40 e8       	ldi	r20, 0x80	; 128
    374a:	5f e3       	ldi	r21, 0x3F	; 63
    374c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3750:	88 23       	and	r24, r24
    3752:	2c f4       	brge	.+10     	; 0x375e <pass_WRITE+0x94>
		__ticks = 1;
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	9e 83       	std	Y+6, r25	; 0x06
    375a:	8d 83       	std	Y+5, r24	; 0x05
    375c:	3f c0       	rjmp	.+126    	; 0x37dc <pass_WRITE+0x112>
	else if (__tmp > 65535)
    375e:	6f 81       	ldd	r22, Y+7	; 0x07
    3760:	78 85       	ldd	r23, Y+8	; 0x08
    3762:	89 85       	ldd	r24, Y+9	; 0x09
    3764:	9a 85       	ldd	r25, Y+10	; 0x0a
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	3f ef       	ldi	r19, 0xFF	; 255
    376a:	4f e7       	ldi	r20, 0x7F	; 127
    376c:	57 e4       	ldi	r21, 0x47	; 71
    376e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3772:	18 16       	cp	r1, r24
    3774:	4c f5       	brge	.+82     	; 0x37c8 <pass_WRITE+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3776:	6b 85       	ldd	r22, Y+11	; 0x0b
    3778:	7c 85       	ldd	r23, Y+12	; 0x0c
    377a:	8d 85       	ldd	r24, Y+13	; 0x0d
    377c:	9e 85       	ldd	r25, Y+14	; 0x0e
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	40 e2       	ldi	r20, 0x20	; 32
    3784:	51 e4       	ldi	r21, 0x41	; 65
    3786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	bc 01       	movw	r22, r24
    3790:	cd 01       	movw	r24, r26
    3792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	9e 83       	std	Y+6, r25	; 0x06
    379c:	8d 83       	std	Y+5, r24	; 0x05
    379e:	0f c0       	rjmp	.+30     	; 0x37be <pass_WRITE+0xf4>
    37a0:	88 ec       	ldi	r24, 0xC8	; 200
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	9c 83       	std	Y+4, r25	; 0x04
    37a6:	8b 83       	std	Y+3, r24	; 0x03
    37a8:	8b 81       	ldd	r24, Y+3	; 0x03
    37aa:	9c 81       	ldd	r25, Y+4	; 0x04
    37ac:	01 97       	sbiw	r24, 0x01	; 1
    37ae:	f1 f7       	brne	.-4      	; 0x37ac <pass_WRITE+0xe2>
    37b0:	9c 83       	std	Y+4, r25	; 0x04
    37b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b4:	8d 81       	ldd	r24, Y+5	; 0x05
    37b6:	9e 81       	ldd	r25, Y+6	; 0x06
    37b8:	01 97       	sbiw	r24, 0x01	; 1
    37ba:	9e 83       	std	Y+6, r25	; 0x06
    37bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37be:	8d 81       	ldd	r24, Y+5	; 0x05
    37c0:	9e 81       	ldd	r25, Y+6	; 0x06
    37c2:	00 97       	sbiw	r24, 0x00	; 0
    37c4:	69 f7       	brne	.-38     	; 0x37a0 <pass_WRITE+0xd6>
    37c6:	14 c0       	rjmp	.+40     	; 0x37f0 <pass_WRITE+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c8:	6f 81       	ldd	r22, Y+7	; 0x07
    37ca:	78 85       	ldd	r23, Y+8	; 0x08
    37cc:	89 85       	ldd	r24, Y+9	; 0x09
    37ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d4:	dc 01       	movw	r26, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	9e 83       	std	Y+6, r25	; 0x06
    37da:	8d 83       	std	Y+5, r24	; 0x05
    37dc:	8d 81       	ldd	r24, Y+5	; 0x05
    37de:	9e 81       	ldd	r25, Y+6	; 0x06
    37e0:	9a 83       	std	Y+2, r25	; 0x02
    37e2:	89 83       	std	Y+1, r24	; 0x01
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	9a 81       	ldd	r25, Y+2	; 0x02
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	f1 f7       	brne	.-4      	; 0x37e8 <pass_WRITE+0x11e>
    37ec:	9a 83       	std	Y+2, r25	; 0x02
    37ee:	89 83       	std	Y+1, r24	; 0x01
 *             write password to eeprom
 */
void pass_WRITE(uint8 *pass)
{

	for(uint8 k=0;k<5;k++)
    37f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    37f2:	8f 5f       	subi	r24, 0xFF	; 255
    37f4:	8f 87       	std	Y+15, r24	; 0x0f
    37f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    37f8:	85 30       	cpi	r24, 0x05	; 5
    37fa:	08 f4       	brcc	.+2      	; 0x37fe <pass_WRITE+0x134>
    37fc:	74 cf       	rjmp	.-280    	; 0x36e6 <pass_WRITE+0x1c>
	{
		EEPROM_writeByte((0x0312+k), pass[k]);
		_delay_ms(10);

	}
	EEPROM_writeByte(0x0311,0x10);
    37fe:	81 e1       	ldi	r24, 0x11	; 17
    3800:	93 e0       	ldi	r25, 0x03	; 3
    3802:	60 e1       	ldi	r22, 0x10	; 16
    3804:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <EEPROM_writeByte>
}
    3808:	61 96       	adiw	r28, 0x11	; 17
    380a:	0f b6       	in	r0, 0x3f	; 63
    380c:	f8 94       	cli
    380e:	de bf       	out	0x3e, r29	; 62
    3810:	0f be       	out	0x3f, r0	; 63
    3812:	cd bf       	out	0x3d, r28	; 61
    3814:	cf 91       	pop	r28
    3816:	df 91       	pop	r29
    3818:	08 95       	ret

0000381a <__udivmodsi4>:
    381a:	a1 e2       	ldi	r26, 0x21	; 33
    381c:	1a 2e       	mov	r1, r26
    381e:	aa 1b       	sub	r26, r26
    3820:	bb 1b       	sub	r27, r27
    3822:	fd 01       	movw	r30, r26
    3824:	0d c0       	rjmp	.+26     	; 0x3840 <__udivmodsi4_ep>

00003826 <__udivmodsi4_loop>:
    3826:	aa 1f       	adc	r26, r26
    3828:	bb 1f       	adc	r27, r27
    382a:	ee 1f       	adc	r30, r30
    382c:	ff 1f       	adc	r31, r31
    382e:	a2 17       	cp	r26, r18
    3830:	b3 07       	cpc	r27, r19
    3832:	e4 07       	cpc	r30, r20
    3834:	f5 07       	cpc	r31, r21
    3836:	20 f0       	brcs	.+8      	; 0x3840 <__udivmodsi4_ep>
    3838:	a2 1b       	sub	r26, r18
    383a:	b3 0b       	sbc	r27, r19
    383c:	e4 0b       	sbc	r30, r20
    383e:	f5 0b       	sbc	r31, r21

00003840 <__udivmodsi4_ep>:
    3840:	66 1f       	adc	r22, r22
    3842:	77 1f       	adc	r23, r23
    3844:	88 1f       	adc	r24, r24
    3846:	99 1f       	adc	r25, r25
    3848:	1a 94       	dec	r1
    384a:	69 f7       	brne	.-38     	; 0x3826 <__udivmodsi4_loop>
    384c:	60 95       	com	r22
    384e:	70 95       	com	r23
    3850:	80 95       	com	r24
    3852:	90 95       	com	r25
    3854:	9b 01       	movw	r18, r22
    3856:	ac 01       	movw	r20, r24
    3858:	bd 01       	movw	r22, r26
    385a:	cf 01       	movw	r24, r30
    385c:	08 95       	ret

0000385e <__prologue_saves__>:
    385e:	2f 92       	push	r2
    3860:	3f 92       	push	r3
    3862:	4f 92       	push	r4
    3864:	5f 92       	push	r5
    3866:	6f 92       	push	r6
    3868:	7f 92       	push	r7
    386a:	8f 92       	push	r8
    386c:	9f 92       	push	r9
    386e:	af 92       	push	r10
    3870:	bf 92       	push	r11
    3872:	cf 92       	push	r12
    3874:	df 92       	push	r13
    3876:	ef 92       	push	r14
    3878:	ff 92       	push	r15
    387a:	0f 93       	push	r16
    387c:	1f 93       	push	r17
    387e:	cf 93       	push	r28
    3880:	df 93       	push	r29
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	ca 1b       	sub	r28, r26
    3888:	db 0b       	sbc	r29, r27
    388a:	0f b6       	in	r0, 0x3f	; 63
    388c:	f8 94       	cli
    388e:	de bf       	out	0x3e, r29	; 62
    3890:	0f be       	out	0x3f, r0	; 63
    3892:	cd bf       	out	0x3d, r28	; 61
    3894:	09 94       	ijmp

00003896 <__epilogue_restores__>:
    3896:	2a 88       	ldd	r2, Y+18	; 0x12
    3898:	39 88       	ldd	r3, Y+17	; 0x11
    389a:	48 88       	ldd	r4, Y+16	; 0x10
    389c:	5f 84       	ldd	r5, Y+15	; 0x0f
    389e:	6e 84       	ldd	r6, Y+14	; 0x0e
    38a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    38a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    38a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    38a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    38a8:	b9 84       	ldd	r11, Y+9	; 0x09
    38aa:	c8 84       	ldd	r12, Y+8	; 0x08
    38ac:	df 80       	ldd	r13, Y+7	; 0x07
    38ae:	ee 80       	ldd	r14, Y+6	; 0x06
    38b0:	fd 80       	ldd	r15, Y+5	; 0x05
    38b2:	0c 81       	ldd	r16, Y+4	; 0x04
    38b4:	1b 81       	ldd	r17, Y+3	; 0x03
    38b6:	aa 81       	ldd	r26, Y+2	; 0x02
    38b8:	b9 81       	ldd	r27, Y+1	; 0x01
    38ba:	ce 0f       	add	r28, r30
    38bc:	d1 1d       	adc	r29, r1
    38be:	0f b6       	in	r0, 0x3f	; 63
    38c0:	f8 94       	cli
    38c2:	de bf       	out	0x3e, r29	; 62
    38c4:	0f be       	out	0x3f, r0	; 63
    38c6:	cd bf       	out	0x3d, r28	; 61
    38c8:	ed 01       	movw	r28, r26
    38ca:	08 95       	ret

000038cc <_exit>:
    38cc:	f8 94       	cli

000038ce <__stop_program>:
    38ce:	ff cf       	rjmp	.-2      	; 0x38ce <__stop_program>
